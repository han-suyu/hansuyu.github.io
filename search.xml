<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pytorch的pth权重转化为tensorflow的ckpt文件</title>
      <link href="/2020/08/2789207887.html"/>
      <url>/2020/08/2789207887.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(bin_path, ckptpath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="keyword">for</span> var_name, value <span class="keyword">in</span> torch.load(bin_path, map_location=<span class="string">'cpu'</span>).items():</span><br><span class="line">            print(var_name)  <span class="comment"># 输出权重文件中的变量名</span></span><br><span class="line">            tf.Variable(initial_value=value, name=var_name)</span><br><span class="line">        saver = tf.train.Saver()</span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        saver.save(sess, ckpt_path)</span><br><span class="line"></span><br><span class="line">bin_path = <span class="string">'model.pth'</span></span><br><span class="line">ckpt_path = <span class="string">'new_model.ckpt'</span></span><br><span class="line">convert(bin_path, ckpt_path)</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蚁群算法</title>
      <link href="/2020/08/803160622.html"/>
      <url>/2020/08/803160622.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​蚁群算法（Ant Colony Algorithm）最初于1992年由意大利学者M.Dorigo等人提出，它是一种模拟自然界中真实蚁群觅食行为的仿生优化算法。研究发现：每只蚂蚁觅食时在走过的路线上会留下一种称为信息素的物质，蚂蚁之间靠感知这种物质的浓度进行信息传递。蚂蚁在选择路径时总是倾向于朝信息索浓度高的方向移动，而距离短的路径上走过的蚂蚁多，留下的信息素也多，后续蚂蚁选择它的概率也会越大；其他路径上的信息素会随着时间的推移不断挥发，这样就形成了一种正反馈机制，最后整个蚁群聚集到最短路径上。</p><p>​人工蚁群算法模拟了这一过程。每只蚂蚁在解空间独立地搜索可行解，解越好留下的信息素越多，随着算法推进，较优解路径上的信息素增多，选择它的蚂蚁也随之增多，最终收敛到最优或近似最优的解上。</p><a id="more"></a><p> </p><p> </p><h2 id="一-算法原理"><a class="markdownIt-Anchor" href="#一-算法原理"></a> 一、算法原理</h2><p>​蚂蚁系统是最早的蚁群系统，它采用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\tau_{ij}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 来模仿t时刻路径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 上面的信息残留量，即信息素浓度。类似于蚂蚁觅食过程，每条路径上面的信息素会挥发，如果有蚂蚁经过的时候，信息素的浓度会相应增加。因此，蚂蚁系统中的信息素浓度的更新公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ρ</mi><mo separator="true">⋅</mo><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">Δ</mi><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\tau_{ij}(t+n)=\rho·\tau_{ij}(t)+\Delta\tau_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">ρ</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>式中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span></span></span></span> 是一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的数字，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>ρ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1-\rho)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ρ</span><span class="mclose">)</span></span></span></span> 为挥发因子。另外，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\Delta\tau_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 表示一次旅行（遍历完所有城市）后，所有路径i到j的蚂蚁留下的信息素总量，即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi mathvariant="normal">Δ</mi><msubsup><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>k</mi></msubsup><mi>r</mi></mrow><annotation encoding="application/x-tex">\Delta\tau_{ij}=\sum_{k=1}^m\Delta\tau_{ij}^kr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-2.4530000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></span></p><p>式中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msubsup><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">\Delta\tau_{ij}^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.394772em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.441336em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span> 表示第k只蚂蚁在路径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 上面留下的信息素量。如果第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 只蚂蚁经过路径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> ，则：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msubsup><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>k</mi></msubsup><mo>=</mo><mfrac><mi>Q</mi><mrow><msub><mi>L</mi><mi>k</mi></msub><mi>r</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\Delta\tau_{ij}^k=\frac{Q}{L_kr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.282216em;vertical-align:-0.383108em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-2.4530000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1963299999999997em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>式中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span></span></span></span> 为一个常数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">L_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为蚂蚁已经走过路径的总长度。否则，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 只蚂蚁在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 上面留下的信息素量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p>​一般来说有了信息素浓度的更新公式，就可以直接给出蚂蚁对每条路径的选择概率了。然而，为了更好的利用TSP问题自身的性质，M.Dorigo等引入了一个启发项：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi><mo>=</mo><mfrac><mn>1</mn><msub><mi>d</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">\eta=\frac{1}{d_{ij}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3874279999999999em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。通过结合信息素浓度和启发因子，可以得到蚂蚁选择路径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 的概率为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>k</mi></msubsup><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="right center left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mo stretchy="false">[</mo><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mi>α</mi></msup><mo separator="true">⋅</mo><mo stretchy="false">[</mo><msub><mi>η</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msup><mo stretchy="false">]</mo><mi>β</mi></msup></mrow><msub><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mo>∈</mo><mi>a</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">[</mo><msub><mi>τ</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mi>α</mi></msup><mo separator="true">⋅</mo><mo stretchy="false">[</mo><msub><mi>η</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msup><mo stretchy="false">]</mo><mi>β</mi></msup></mrow></msub></mfrac><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>j</mi><mo>∈</mo><mi>a</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><msub><mi>d</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>e</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">p_{ij}^{k}(t)=\left\{\begin{array}{rcl}\frac{[\tau_{ij}(t)]^\alpha·[\eta_{ij}]^{\beta}}{\sum_{k= \in allowed \: [\tau_{ik}(t)]^\alpha·[\eta_{ik}]^{\beta} } }, &amp;&amp; {j \in allowed_k}\\ 0,       &amp;  &amp; {else}\end{array} \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.282216em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1330150000000003em;vertical-align:-1.3165075000000004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8165075em;"><span style="top:-3.8165075em;"><span class="pstrut" style="height:3.15624em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.15624em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.7118785714285716em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span><span class="mspace mtight" style="margin-right:0.32711111111111113em;"></span><span class="mopen mtight">[</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.1132em;margin-right:0.1em;"><span class="pstrut" style="height:2.69444em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34963999999999995em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mclose mtight"><span class="mclose mtight">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.72456em;"><span style="top:-2.794em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span></span></span><span class="mpunct mtight">⋅</span><span class="mopen mtight">[</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.03588em;margin-right:0.1em;"><span class="pstrut" style="height:2.69444em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34963999999999995em;"><span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9966299999999999em;"><span style="top:-2.9966300000000006em;margin-right:0.1em;"><span class="pstrut" style="height:2.69444em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6168214285714284em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.50732em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.1132em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mclose mtight"><span class="mclose mtight">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span></span></span></span><span class="mpunct mtight">⋅</span><span class="mopen mtight">[</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285713em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7767749999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span></span></span><span style="top:-2.1997324999999996em;"><span class="pstrut" style="height:3.15624em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3165075000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8165075em;"><span style="top:-3.8165075em;"><span class="pstrut" style="height:3.15624em;"></span><span class="mord"></span></span><span style="top:-2.1997324999999996em;"><span class="pstrut" style="height:3.15624em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3165075000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8165075em;"><span style="top:-3.8165075em;"><span class="pstrut" style="height:3.15624em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.1997324999999996em;"><span class="pstrut" style="height:3.15624em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3165075000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>式中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 是调节因子，用于调节 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\tau_{ij}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>η</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\eta_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 之间的作用。此外 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">allowed_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示蚂蚁 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 还没有走过的路径（用禁忌表存储已经走过的路径），通过这种存储可以保证所有解的逻辑可行。如果路径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 上的信息浓度越大 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\tau_{ij}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 的值就越大，该路径被选择的概率就越大；同样，如果该路径长度越短，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi><mo>=</mo><mfrac><mn>1</mn><msub><mi>d</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">\eta=\frac{1}{d_{ij}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3874279999999999em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 越大，该路径被选择的概率也越大。</p><p> </p><p><strong>求解TSP问题的蚁群算法中的人工蚂蚁具有以下特点：</strong></p><p>1）他们概率性地选择下一条路径，该概率与<strong>路径长度</strong>和路径上的<strong>信息素浓度</strong>有关；</p><p>2）为了保证解的逻辑可行，蚂蚁不允许选择已经走过的路径（通过禁忌表实现）；</p><p>3）蚂蚁走过一条路径时会在该路径上面分泌一种叫做信息素的物质。</p><p> </p><p> </p><h2 id="二-代码实现"><a class="markdownIt-Anchor" href="#二-代码实现"></a> 二、代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"><span class="comment">#对称矩阵，计算任意两个城市之间的距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance_p2p_mat</span><span class="params">()</span>:</span></span><br><span class="line">    dis_mat=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_city):</span><br><span class="line">        dis_mat_each=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(num_city):</span><br><span class="line">            dis=math.sqrt(pow(location[i][<span class="number">0</span>]-location[j][<span class="number">0</span>],<span class="number">2</span>)+pow(location[i][<span class="number">1</span>]-location[j][<span class="number">1</span>],<span class="number">2</span>))</span><br><span class="line">            dis_mat_each.append(dis)</span><br><span class="line">        dis_mat.append(dis_mat_each)</span><br><span class="line">   <span class="comment"># print(dis_mat)</span></span><br><span class="line">    <span class="keyword">return</span> dis_mat</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算所有寻找到的路径对应的距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_newpath</span><span class="params">(dis_mat,path_new)</span>:</span></span><br><span class="line">    dis_list=[]</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> path_new:</span><br><span class="line">        dis=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(num_city<span class="number">-1</span>):</span><br><span class="line">            dis=dis_mat[each[j]][each[j+<span class="number">1</span>]]+dis</span><br><span class="line">        dis=dis_mat[each[num_city<span class="number">-1</span>]][each[<span class="number">0</span>]]+dis<span class="comment">#回家</span></span><br><span class="line">        dis_list.append(dis)</span><br><span class="line">    <span class="keyword">return</span> dis_list</span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location=np.loadtxt(<span class="string">'./city_location.txt'</span>)</span><br><span class="line">num_ant=<span class="number">200</span> <span class="comment">#蚂蚁个数</span></span><br><span class="line">num_city=<span class="number">30</span> <span class="comment">#城市个数</span></span><br><span class="line"></span><br><span class="line">alpha=<span class="number">1</span> <span class="comment">#信息素影响因子</span></span><br><span class="line">beta=<span class="number">5</span>  <span class="comment">#期望影响因子</span></span><br><span class="line">info=<span class="number">0.1</span> <span class="comment">#信息素的挥发率</span></span><br><span class="line">Q=<span class="number">1</span> <span class="comment">#常数</span></span><br><span class="line"></span><br><span class="line">count_iter = <span class="number">0</span>  <span class="comment">#迭代计数器</span></span><br><span class="line">iter_max = <span class="number">30</span>   <span class="comment">#迭代次数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dis_list=distance_p2p_mat()     <span class="comment">#计算任意两个城市间的距离</span></span><br><span class="line">dis_mat=np.array(dis_list)      <span class="comment">#将list转化为矩阵</span></span><br><span class="line"></span><br><span class="line">e_mat_init=<span class="number">1.0</span>/(dis_mat+np.diag([<span class="number">10000</span>]*num_city))      <span class="comment">#期望矩阵。加对角阵是原矩阵对角线为0，而除数不能是0，所以先用一个比较大的数垫一下</span></span><br><span class="line">diag=np.diag([<span class="number">1.0</span>/<span class="number">10000</span>]*num_city)          <span class="comment">#上一步生成的num_city*num_city维的对角线为1000的对角矩阵</span></span><br><span class="line">e_mat=e_mat_init-diag           <span class="comment">#已经做过除法了，所以让对角线元素复原，再减去那个对角矩阵</span></span><br><span class="line"></span><br><span class="line">pheromone_mat=np.ones((num_city,num_city))    <span class="comment">#信息浓度矩阵。初始化每条边的信息素浓度，全1矩阵</span></span><br><span class="line"></span><br><span class="line">path_mat=np.zeros((num_ant,num_city)).astype(int)     <span class="comment">#蚂蚁的路径矩阵。初始化每只蚂蚁路径，都从0城市出发.(如果不加数据转化，则默认生成的是float类型的0，即0.0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count_iter &lt; iter_max:    <span class="comment">#最外层迭代</span></span><br><span class="line">    <span class="keyword">for</span> ant <span class="keyword">in</span> range(num_ant):  <span class="comment">#对每一只蚂蚁进行分析</span></span><br><span class="line">        visit=<span class="number">0</span>     <span class="comment">#都从0城市出发</span></span><br><span class="line">        unvisit_list=list(range(<span class="number">1</span>,<span class="number">30</span>))  <span class="comment">#未访问的城市。这个语句生成一个[1..29]的数组。再加上统一的出发点0，共30个城市</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,num_city):  <span class="comment">#j代表第ant个蚂蚁的第j步</span></span><br><span class="line">            </span><br><span class="line">            trans_list=[]</span><br><span class="line">          </span><br><span class="line">            trans=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(unvisit_list)):  <span class="comment">#第ant个蚂蚁的第j步取哪个城市</span></span><br><span class="line">                trans +=np.power(pheromone_mat[visit][unvisit_list[k]],alpha)*np.power(e_mat[visit][unvisit_list[k]],beta)  <span class="comment">#计算第ant个蚂蚁由visit位置向k位置走的概率。这里要注意：直接累加</span></span><br><span class="line">                trans_list.append(trans)      <span class="comment">#将 每一步 累加的结果保存到一个数组中</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">#轮盘法选择下一个城市</span></span><br><span class="line">            rand=random.uniform(<span class="number">0</span>,trans)<span class="comment">#产生随机数</span></span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> range(len(trans_list)):</span><br><span class="line">                <span class="keyword">if</span>(rand &lt;= trans_list[t]):  <span class="comment">#因为之前就已经累加了，trans_list[t]一定是一个递增数组，所以可以直接与trans_list[t]相比较</span></span><br><span class="line">                    visit_next=unvisit_list[t]  <span class="comment">#选择下标为t的城市作为这个蚂蚁下一步的方向</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">      </span><br><span class="line">            path_mat[ant,j]=visit_next  <span class="comment">#装填这只蚂蚁的路径矩阵</span></span><br><span class="line"></span><br><span class="line">            unvisit_list.remove(visit_next) <span class="comment">#在未走的城市列表中删去这个结点。这个操作，就会使unvisit_list这个数组变成断断续续的</span></span><br><span class="line">            visit=visit_next    <span class="comment">#更新这只蚂蚁的当前位置</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">#所有蚂蚁的路径表填满之后，算每只蚂蚁的总距离</span></span><br><span class="line">    dis_allant_list=cal_newpath(dis_mat,path_mat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#选取拥有最短路径的蚂蚁的路径</span></span><br><span class="line">    <span class="comment"># 注意：这里其实可以不用写成if-else结构，但那样对于每一次迭代都需要一次min和max计算，而有时候后一次迭代结果并不一定比前一次迭代结果更优，就会造成冗余计算。</span></span><br><span class="line">    <span class="comment">#       使用if-else结构后，每一次迭代只是一个判断，并不需要每次都进行min和max计算</span></span><br><span class="line">    <span class="keyword">if</span> count_iter == <span class="number">0</span>:</span><br><span class="line">        dis_new=min(dis_allant_list)</span><br><span class="line">        path_new=path_mat[dis_allant_list.index(dis_new)].copy()      </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> min(dis_allant_list) &lt; dis_new:</span><br><span class="line">            dis_new=min(dis_allant_list)</span><br><span class="line">            path_new=path_mat[dis_allant_list.index(dis_new)].copy() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为了避免残留信息素过多而淹没启发式信息，所以要及时的更新信息素矩阵</span></span><br><span class="line">    pheromone_change=np.zeros((num_city,num_city))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_ant):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(num_city<span class="number">-1</span>):</span><br><span class="line">            pheromone_change[path_mat[i,j]][path_mat[i,j+<span class="number">1</span>]] += Q/dis_mat[path_mat[i,j]][path_mat[i,j+<span class="number">1</span>]]</span><br><span class="line">        pheromone_change[path_mat[i,num_city<span class="number">-1</span>]][path_mat[i,<span class="number">0</span>]] += Q/dis_mat[path_mat[i,num_city<span class="number">-1</span>]][path_mat[i,<span class="number">0</span>]] <span class="comment">#最后一个结点到起点</span></span><br><span class="line">    </span><br><span class="line">    pheromone_mat=(<span class="number">1</span>-info)*pheromone_mat + pheromone_change</span><br><span class="line"></span><br><span class="line">    count_iter += <span class="number">1</span> <span class="comment">#迭代计数+1，进入下一次迭代</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">print(<span class="string">'最短距离：'</span>,dis_new)</span><br><span class="line">print(<span class="string">'最短路径：'</span>,path_new)</span><br></pre></td></tr></table></figure><p><code>city_location.txt</code>内容表示城市的横纵坐标，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">41 94</span><br><span class="line">37 84</span><br><span class="line">54 67</span><br><span class="line">25 62</span><br><span class="line">7 64</span><br><span class="line">2 99</span><br><span class="line">68 58</span><br><span class="line">71 44</span><br><span class="line">54 62</span><br><span class="line">83 69</span><br><span class="line">64 60</span><br><span class="line">18 54</span><br><span class="line">22 60</span><br><span class="line">83 46</span><br><span class="line">91 38</span><br><span class="line">25 38</span><br><span class="line">24 42</span><br><span class="line">58 69</span><br><span class="line">71 71</span><br><span class="line">74 78</span><br><span class="line">87 76</span><br><span class="line">18 40</span><br><span class="line">13 40</span><br><span class="line">82 7</span><br><span class="line">62 32</span><br><span class="line">58 35</span><br><span class="line">45 21</span><br><span class="line">41 26</span><br><span class="line">44 35</span><br><span class="line">4 50</span><br></pre></td></tr></table></figure><p> </p><p> </p><h2 id="三-运行结果"><a class="markdownIt-Anchor" href="#三-运行结果"></a> 三、运行结果</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/04/aBNOvF.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Meta-Heuristic Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元启发式搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗传算法</title>
      <link href="/2020/08/2633671626.html"/>
      <url>/2020/08/2633671626.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>遗传算法 (Genetic Algorithm, GA) 是由 John Holland 提出，其学生 Goldberg 对整个算法进行了进一步完善。算法的整个思想来源于达尔文的进化论，其基本思想是根据问题的目标函数构造一个适应度函数 (Fitness Function)，对于种群中的每个个体 (即问题的一个解) 进行评估 (计算适应度)，选择，交叉和变异，通过多轮的繁殖选择适应度最好的个体作为问题的最优解。算法的整个流程如下所示：</p><p><img src= "/img/loading.gif" data-src="https://d33wubrfki0l68.cloudfront.net/eedd66c9f9a47dec6aa3b97406bc47053e7ab678/ee942/images/cn/2019-04-05-heuristic-algorithms/ga-process.png" alt="GA-Process" /></p><a id="more"></a><p> </p><p> </p><h2 id="一-初始化种群"><a class="markdownIt-Anchor" href="#一-初始化种群"></a> 一、初始化种群</h2><p>在初始化种群时，我们首先需要对每一个个体进行编码，常用的编码方式有二进制编码，实值编码等。以二进制为例，对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>∈</mo><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mn>100</mn></mrow></mrow><annotation encoding="application/x-tex">p∈{0,1,…,100}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span> 中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mn>50</mn></mrow><annotation encoding="application/x-tex">p_i=50</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span></span></span></span> 可以表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mn>5</mn><msub><mn>0</mn><mn>10</mn></msub><mo>=</mo><mn>011001</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_i=50_{10}=0110010_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">5</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>对于一个具体的问题，我们需要选择合适的编码方式对问题的解进行编码，编码后的个体可以称之为一个染色体。则一个染色体可以表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>p</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=(p_1,p_2,…,p_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 为染色体的长度或编码的位数。初始化种群个体共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个，对于任意一个个体染色体的任意一位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，随机生成一个随机数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo>∈</mo><mi>U</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">rand∈U(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo>&gt;</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">rand&gt;0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span> ，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p_i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，否则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p_i=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p> </p><p> </p><h2 id="二-计算适应度"><a class="markdownIt-Anchor" href="#二-计算适应度"></a> 二、计算适应度</h2><p>适应度为评价个体优劣程度的函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> ，通常为问题的目标函数，对最小化优化问题 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">−</mi><mi>m</mi><mi>i</mi><mi>n</mi><mo>∑</mo><mi>L</mi><mo stretchy="false">(</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)=−min∑L(\hat{y},y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord">−</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，对最大化优化问题  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo>∑</mo><mi>L</mi><mo stretchy="false">(</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)=max∑L(\hat{y},y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 为损失函数。</p><p> </p><p> </p><h2 id="三-选择"><a class="markdownIt-Anchor" href="#三-选择"></a> 三、选择</h2><p>对于种群中的每个个体，计算其适应度，记第 i 个个体的适应度为  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_i=f(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。则个体在一次选择中被选中的概率为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub><mo>=</mo><mfrac><msub><mi>F</mi><mi>i</mi></msub><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>F</mi><mi>i</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">P_i = \dfrac{F_i}{\sum_{i=1}^{n}{F_i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3543320000000003em;vertical-align:-0.994002em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.305708em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.994002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>为了保证种群的数量不变，我们需要重复 n 次选择过程，单次选择采用轮盘赌的方法。利用计算得到的被选中的概率计算每个个体的累积概率：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>P</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mi>C</mi><msub><mi>P</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">CP_0=0 \\CP_i=\sum_{j=1}^iP_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>对于如下一个示例：</p><table><thead><tr><th>指标 \ 个体</th><th>x1</th><th>x2</th><th>x3</th><th>x4</th><th>x5</th><th>x6</th></tr></thead><tbody><tr><td>适应度 (F)</td><td>100</td><td>60</td><td>60</td><td>40</td><td>30</td><td>20</td></tr><tr><td>概率 §</td><td>0.322</td><td>0.194</td><td>0.194</td><td>0.129</td><td>0.097</td><td>0.064</td></tr><tr><td>累积概率 (CP)</td><td>0.322</td><td>0.516</td><td>0.71</td><td>0.839</td><td>0.936</td><td>1</td></tr></tbody></table><p>每次选择时，随机生成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo>∈</mo><mi>U</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">rand∈U(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>P</mi><mrow><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow></msub><mo>≤</mo><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo>≤</mo><mi>C</mi><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">CP_{i−1}≤rand≤CP_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 时，选择个体 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。选择的过程如同在下图的轮盘上安装一个指针并随机旋转，每次指针停止的位置的即为选择的个体。</p><p><img src= "/img/loading.gif" data-src="https://d33wubrfki0l68.cloudfront.net/2a0f423e15b3b2f3acba1e81815f35f1ca26dde8/7b543/images/cn/2019-04-05-heuristic-algorithms/ga-roulette-wheel.png" alt="GA-Roulette-Wheel" /></p><p> </p><p> </p><h2 id="四-交叉"><a class="markdownIt-Anchor" href="#四-交叉"></a> 四、交叉</h2><p>交叉运算类似于染色体之间的交叉，常用的方法有单点交叉，多点交叉和均匀交叉等。</p><ul><li>单点交叉：在染色体中选择一个切点，然后将其中一部分同另一个染色体的对应部分进行交换得到两个新的个体。交叉过程如下图所示：</li></ul><p><img src= "/img/loading.gif" data-src="https://d33wubrfki0l68.cloudfront.net/8d200e6c615cb83a635aaaff56c43b2531658dc1/f9f46/images/cn/2019-04-05-heuristic-algorithms/ga-crossover-one-point.png" alt="" /></p><ul><li>多点交叉：在染色体中选择多个切点，对其任意两个切点之间部分以概率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">P_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 进行交换，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">P_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为一个较大的值，例如  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>m</mi></msub><mo>=</mo><mn>0.9</mn></mrow><annotation encoding="application/x-tex">P_m=0.9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span></span></span></span> 。两点交叉过程如下图所示：</li></ul><p><img src= "/img/loading.gif" data-src="https://d33wubrfki0l68.cloudfront.net/82dff98f294780db9abd9f0da4ccf7ab78845234/8a1b0/images/cn/2019-04-05-heuristic-algorithms/ga-crossover-two-points.png" alt="" /></p><ul><li>均匀交叉：染色体任意对应的位置以一定的概率进行交换得到新的个体。交叉过程如下图所示：</li></ul><p><img src= "/img/loading.gif" data-src="https://d33wubrfki0l68.cloudfront.net/be3600cd728b467447a02ffb693a7f185c453a29/cb43f/images/cn/2019-04-05-heuristic-algorithms/ga-crossover-uniform.png" alt="" /></p><p> </p><p> </p><h2 id="五-变异"><a class="markdownIt-Anchor" href="#五-变异"></a> 五、变异</h2><p>变异即对于一个染色体的任意位置的值以一定的概率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">P_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 发生变化，对于二进制编码来说即反转该位置的值。其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">P_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为一个较小的值，例如 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>m</mi></msub><mo>=</mo><mn>0.05</mn></mrow><annotation encoding="application/x-tex">P_m=0.05</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span></span></span></span>。</p><p> </p><p> </p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>在整个遗传运算的过程中，不同的操作发挥着不同的作用：</p><ol><li>选择：优胜劣汰，适者生存。</li><li>交叉：丰富种群，持续优化。</li><li>变异：随机扰动，避免局部最优。</li></ol><p> </p><p> </p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#这两行代码让输出的图形中显示中文</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] =<span class="literal">False</span> <span class="comment">#减号unicode编码</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initCities</span><span class="params">(firstCity)</span>:</span></span><br><span class="line">    cities = []</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    file=open(<span class="string">"data.txt"</span>,<span class="string">"r"</span>, encoding=<span class="string">'utf-8'</span>)   <span class="comment">#读取文件</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        line = line.replace(<span class="string">"\n"</span>,<span class="string">" "</span>)  <span class="comment">#替换换行符</span></span><br><span class="line">        <span class="comment">#print(line)</span></span><br><span class="line">        line = line.split(<span class="string">","</span>)         <span class="comment">#按逗号分隔</span></span><br><span class="line">        <span class="comment">#print(line)</span></span><br><span class="line">        cities.append([n,float(line[<span class="number">1</span>]),float(line[<span class="number">2</span>]),line[<span class="number">0</span>]] )  <span class="comment">#组装。集合中的每一个元组，第一个元素为城市编号（从0开始），第二三个元素为城市坐标，第四个元素为城市名字</span></span><br><span class="line">        <span class="comment">#print(cities)</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] == firstCity:       <span class="comment">#判断当前城市是否为输入的城市。如果是，则将这个元组和集合的第一个元组互换位置下标，以将他放在旅行的起点</span></span><br><span class="line">            cities[<span class="number">0</span>][<span class="number">0</span>]=n</span><br><span class="line">            cities[n][<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        n+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    cities = [x <span class="keyword">for</span> x <span class="keyword">in</span> sorted(cities)]   <span class="comment">#经过位置互换后，cities集合中的编号序列不再有序，经过排序后才能真正地将输入的城市放在集合首位</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> cities    <span class="comment">#返回城市列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#求出给定个体（基因链条）（路径数组）的首元素绕一圈回到首元素所需要的路径长度   </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(order)</span>:</span></span><br><span class="line">    distance = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(order)<span class="number">-1</span>):   <span class="comment">#对每一组相邻的地点求距离，然后累加</span></span><br><span class="line">        num1, num2 = order[i], order[i + <span class="number">1</span>]</span><br><span class="line">        distance += city_distance[num1][num2]</span><br><span class="line">    distance+=city_distance[num2][<span class="number">0</span>]        <span class="comment">#添加从最后一个城市回到原点的距离</span></span><br><span class="line">    <span class="keyword">return</span> distance         <span class="comment">#返回整圈的距离</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将距离插入到lives中的首元素位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inserted</span><span class="params">(i)</span>:</span></span><br><span class="line">    i.insert(<span class="number">0</span>,distance(i))     </span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#交叉，将所选取的两个个体交叉，也就是一次性交换多个城市的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cross</span><span class="params">(par1,par2)</span>:</span></span><br><span class="line">    par1.pop(<span class="number">0</span>)     <span class="comment">#弹出首元素（此路径总长度）</span></span><br><span class="line">    par2.pop(<span class="number">0</span>)     <span class="comment">#弹出首元素（此路径总长度）</span></span><br><span class="line"></span><br><span class="line">    num1 = random.randint(<span class="number">2</span>,len(par1)<span class="number">-1</span>)  <span class="comment">#选取交叉的起点</span></span><br><span class="line">    num2 = random.randint(num1,len(par2)<span class="number">-1</span>)     <span class="comment">#选取交叉的终点</span></span><br><span class="line">    crossGene = par2[num1:num2]     <span class="comment">#执行交叉的片段</span></span><br><span class="line">    <span class="comment">#判断现在所处的位置</span></span><br><span class="line">    flag = <span class="number">0</span> </span><br><span class="line">    Gene = []</span><br><span class="line">    <span class="keyword">for</span> life <span class="keyword">in</span> par1:</span><br><span class="line">        <span class="keyword">if</span> flag == num1:        <span class="comment">#到交叉的起点时，则直接添加片段crossGene到子代中。这个if语句只会执行一次</span></span><br><span class="line">            Gene.extend(crossGene)</span><br><span class="line">            flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> life <span class="keyword">not</span> <span class="keyword">in</span> crossGene:   <span class="comment">#如果当前元素不属于片段crossGene，则把它加到子代中。这个if语句会执行【个体基因长度（路径长度）-len(crossGene)】次</span></span><br><span class="line">            Gene.append(life)</span><br><span class="line">            flag += <span class="number">1</span></span><br><span class="line">    Gene=inserted(Gene)     <span class="comment">#添加首元素（此路径总长度）</span></span><br><span class="line">    <span class="keyword">return</span> Gene     <span class="comment">#返回下一代的基于（路径信息）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#变异，随机交换两个城市之间的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(Gene)</span>:</span></span><br><span class="line">    gene=Gene.copy()</span><br><span class="line">    num=gene.pop(<span class="number">0</span>)     <span class="comment">#弹出首元素（此路径总长度）</span></span><br><span class="line">    <span class="comment">#随机产生两个被交换的地点，并交换位置</span></span><br><span class="line">    num1 = random.randint(<span class="number">1</span>, len(gene)<span class="number">-1</span>)</span><br><span class="line">    num2 = random.randint(<span class="number">1</span>, len(gene)<span class="number">-1</span>)</span><br><span class="line">    gene[num1],gene[num2] = gene[num2],gene[num1]       <span class="comment">#交换动作</span></span><br><span class="line">    gene=inserted(gene)     <span class="comment">#添加首元素（此路径总长度）</span></span><br><span class="line">    <span class="keyword">if</span> gene[<span class="number">0</span>]&lt;Gene[<span class="number">0</span>]:     <span class="comment">#判断变异的效果。如果距离还没有之前短，则使这次变异无效；如果变异后距离变短了，则使这次变异生效</span></span><br><span class="line">        <span class="keyword">return</span> gene</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Gene</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#物竞天择，弱者死亡</span></span><br><span class="line"><span class="comment">#设置强者的定义概率，即种群前30%为强者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dellist</span><span class="params">(lives)</span>:</span></span><br><span class="line">    retain_rate=<span class="number">0.3</span>     <span class="comment">#前30%的个体绝对不会被淘汰</span></span><br><span class="line">    num=int(retain_rate*len(lives))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num,len(lives)<span class="number">-1</span>):   <span class="comment">#在后70%的个体中随机淘汰三分之二的个体</span></span><br><span class="line">        flag=random.randrange(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> flag&lt;<span class="number">2</span>:       <span class="comment">#因为flag的取值范围是[0,2]，有66.7%的可能性满足这个条件，以此达到三分之二概率的淘汰</span></span><br><span class="line">            <span class="keyword">del</span> lives[num<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> lives</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自然选择算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nature</span><span class="params">(lives)</span>:</span></span><br><span class="line">    var_time=<span class="number">0</span>  <span class="comment">#变异次数</span></span><br><span class="line">    cro_time=<span class="number">0</span>  <span class="comment">#交叉次数（也就是一共产生多少次子代） </span></span><br><span class="line">    newlives1=[]</span><br><span class="line">    newlives2=lives[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    breaktime=<span class="number">0</span></span><br><span class="line">    <span class="comment">#一共遗传1500次，越大效果越好</span></span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> range(<span class="number">1500</span>):</span><br><span class="line">        <span class="keyword">if</span> time == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> lives:</span><br><span class="line">                <span class="keyword">if</span> i != <span class="literal">None</span>:</span><br><span class="line">                    newlives1.append(inserted(i))   <span class="comment">#插入距离</span></span><br><span class="line">        lives=[]</span><br><span class="line">        newlives1=[x <span class="keyword">for</span> x <span class="keyword">in</span> sorted(newlives1)]    <span class="comment">#对newlives1按首元素（路径总长度）排序，使得newlives1[0][0]为这一代的最优路径的总长度</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">#ewlives2[0]初始时为lives[0][0]，一定是0，所以第一次if语句肯定不符合，会转到else中重新赋值，赋值一个上一次的最优路径。第二次判断if语句时，如果和第二次的最优路径一致，则说明出现了一次来连续的最优解</span></span><br><span class="line">        <span class="keyword">if</span> newlives1[<span class="number">0</span>][<span class="number">0</span>]==newlives2[<span class="number">0</span>]:   <span class="comment">#说明两次得到的最优解一致，成为一个连续相同的最优解。</span></span><br><span class="line">            breaktime += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            breaktime = <span class="number">0</span>       <span class="comment">#连续的最优解个数归零</span></span><br><span class="line">            newlives2=newlives1[<span class="number">0</span>]      <span class="comment">#给newlives2赋值一个上一次的最优解（最短路径序列）。这个地方很关键，最开始的时候就纳闷为什么newlives2的值不是0了？</span></span><br><span class="line">        <span class="keyword">if</span> breaktime &gt; <span class="number">100</span> &amp; time &gt;= <span class="number">500</span>:   <span class="comment">#当已经遗传到了500代之后并且有100个连续相同的最优解产生的时候进行break，说明进化的很好，不需要再进行淘汰、交叉、变异</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#进行淘汰</span></span><br><span class="line">        newlives1=dellist(newlives1)  </span><br><span class="line"></span><br><span class="line">        num=count-len(newlives1)</span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#在newlives1中随机选取两个个体进行交叉，最优的不进行</span></span><br><span class="line">            a=random.randrange(<span class="number">1</span>,len(newlives1),<span class="number">1</span>)  <span class="comment">#随机选择两个个体</span></span><br><span class="line">            b=random.randrange(<span class="number">1</span>,len(newlives1),<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> a!=b :</span><br><span class="line">                par1=newlives1[a].copy()    <span class="comment">#备份一下</span></span><br><span class="line">                par2=newlives1[b].copy()    <span class="comment">#备份一下</span></span><br><span class="line">                life=cross(par1,par2)   <span class="comment">#交叉</span></span><br><span class="line">                cro_time += <span class="number">1</span>       <span class="comment">#交叉次数加一</span></span><br><span class="line">                <span class="comment">#对交叉生成的子代进行变异(0.2的概率)</span></span><br><span class="line">                flag=random.randrange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> flag&lt;=<span class="number">1</span>:     <span class="comment">#因为flag的取值范围是[0,9]，只有20%的可能性满足这个条件，以此达到0.2的概率变异</span></span><br><span class="line">                    newlives1.append(mutation(life))        <span class="comment">#变异后再回到种群</span></span><br><span class="line">                    var_time+=<span class="number">1</span>     <span class="comment">#变异次数加一</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    newlives1.append(life)      <span class="comment">#比较幸运，免于变异，重新回到种群中生存</span></span><br><span class="line">            num-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"遗传次数："</span>+str(time+<span class="number">1</span>))</span><br><span class="line">    print(<span class="string">"交叉次数："</span>+str(cro_time))</span><br><span class="line">    print(<span class="string">"变异次数："</span>+str(var_time))</span><br><span class="line">    <span class="keyword">return</span> newlives1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#firstCity=input("请输入出发城市： ")</span></span><br><span class="line">firstCity=<span class="string">'南京'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取城市信息，并计算相互间的距离</span></span><br><span class="line">cities=initCities(firstCity)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">geneLength=len(cities)</span><br><span class="line"><span class="comment">#生成距离矩阵city_distance，方便调用</span></span><br><span class="line">city_distance=np.zeros([geneLength,geneLength])     <span class="comment">#置零，初始化</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(geneLength):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(geneLength):</span><br><span class="line">        city_distance[i][j]=math.sqrt((cities[i][<span class="number">1</span>] - cities[j][<span class="number">1</span>]) ** <span class="number">2</span> +(cities[i][<span class="number">2</span>] - cities[j][<span class="number">2</span>]) ** <span class="number">2</span>)  <span class="comment">#因为是用直角坐标系表示的城市的位置，所以直接使用两点距离公式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚开始时生成300个个体（种群数量为300）。放到大自然中</span></span><br><span class="line">count=<span class="number">300</span></span><br><span class="line">lives=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">    aGene = [ x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,geneLength) ]   <span class="comment">#此时的aGene为一个从1到33的升序的数组，代表该个体的基因链条</span></span><br><span class="line">    random.shuffle(aGene)   <span class="comment">#将数组打乱。这个乱序，就有可能就是将来的旅行路径，当然，中间会经过进化变异</span></span><br><span class="line">    aGene.insert(<span class="number">0</span>,<span class="number">0</span>)       <span class="comment">#在数组的第一个位置插入0，表示开始的位置。此时基因的长度为34，即城市的数量</span></span><br><span class="line">    lives.append(aGene)     <span class="comment">#将该个体的基因保存到基因库中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算算法运行时间</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment">#执行繁衍进程</span></span><br><span class="line">lives=nature(lives)  <span class="comment">#返回的这个lives此时是一个大矩阵，每一行的第2到最后的元素为一条个体的基因链条（即候选的城市游览路线），第1个元素为该路径的长度。     并且第1个元素按列有序，即第一行为最佳路径，长度为最短长度</span></span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"运行时间："</span>+str(end-start)+<span class="string">"s"</span>)</span><br><span class="line">print(<span class="string">"最优路径："</span>+str(lives[<span class="number">0</span>][<span class="number">1</span>:]))</span><br><span class="line">print(<span class="string">"最短距离："</span>+str(lives[<span class="number">0</span>][<span class="number">0</span>]))    <span class="comment">#lives[0][0]代表最优路径的长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将cities按照lives下标的顺序排列。</span></span><br><span class="line">list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lives[<span class="number">0</span>][<span class="number">1</span>:]:    <span class="comment">#lives[0][1:]代表进化完后，适应性最强的那个个体的基因链条（即最优的城市游览路线） ；  lives[0][0]代表最优路径的长度</span></span><br><span class="line">    list.append(cities[i])  <span class="comment">#按照得到的下标，将城市加入到结果list中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n遍历顺序为："</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">    print(i[<span class="number">3</span>],end=<span class="string">' '</span>)     <span class="comment">#第四个元素才为城市的名字，所以为i[3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">p1=[]</span><br><span class="line">p2=[]</span><br><span class="line">p3=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">    p1.append(i[<span class="number">1</span>])     <span class="comment">#横坐标</span></span><br><span class="line">    p2.append(i[<span class="number">2</span>])     <span class="comment">#纵坐标</span></span><br><span class="line">    p3.append(i[<span class="number">3</span>])     <span class="comment">#城市名字</span></span><br><span class="line">p1.append(list[<span class="number">0</span>][<span class="number">1</span>])       <span class="comment">#回到出发的城市，形成闭环</span></span><br><span class="line">p2.append(list[<span class="number">0</span>][<span class="number">2</span>])       <span class="comment">#回到出发的城市，形成闭环</span></span><br><span class="line">plt.title(<span class="string">'以'</span>+firstCity+<span class="string">'为起始点的最短路线图'</span>)</span><br><span class="line">plt.plot(p1,p2)  <span class="comment"># plot绘制折线图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p1)<span class="number">-1</span>):    </span><br><span class="line">    plt.text(p1[i],p2[i],p3[i])     <span class="comment">#在指定的横纵坐标上标注城市名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示绘图</span></span><br><span class="line">plt.draw()  </span><br><span class="line"><span class="comment">#保存图象</span></span><br><span class="line">plt.savefig(<span class="string">'GA_Final.png'</span>)</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure><p><code>data.txt</code>文件内容为中国的34个城市的地理坐标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">北京,116.46,39.92</span><br><span class="line">天津,117.2,39.13</span><br><span class="line">上海,121.48,31.22</span><br><span class="line">重庆,106.54,29.59</span><br><span class="line">拉萨,91.11,29.97</span><br><span class="line">乌鲁木齐,87.68,43.77</span><br><span class="line">银川,106.27,38.47</span><br><span class="line">呼和浩特,111.65,40.82</span><br><span class="line">南宁,108.33,22.84</span><br><span class="line">哈尔滨,126.63,45.75</span><br><span class="line">长春,125.35,43.88</span><br><span class="line">沈阳,123.38,41.8</span><br><span class="line">石家庄,114.48,38.03</span><br><span class="line">太原,112.53,37.87</span><br><span class="line">西宁,101.74,36.56</span><br><span class="line">济南,117,36.65</span><br><span class="line">郑州,113.6,34.76</span><br><span class="line">南京,118.78,32.04</span><br><span class="line">合肥,117.27,31.86</span><br><span class="line">杭州,120.19,30.26</span><br><span class="line">福州,119.3,26.08</span><br><span class="line">南昌,115.89,28.68</span><br><span class="line">长沙,113,28.21</span><br><span class="line">武汉,114.31,30.52</span><br><span class="line">广州,113.23,23.16</span><br><span class="line">台北,121.5,25.05</span><br><span class="line">海口,110.35,20.02</span><br><span class="line">兰州,103.73,36.03</span><br><span class="line">西安,108.95,34.27</span><br><span class="line">成都,104.06,30.67</span><br><span class="line">贵阳,106.71,26.57</span><br><span class="line">昆明,102.73,25.04</span><br><span class="line">香港,114.1,22.2</span><br><span class="line">澳门,113.33,22.13</span><br></pre></td></tr></table></figure><p> </p><p> </p><h2 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h2><p>程序设定出发点为<code>南京</code>，当然，可以自定义。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/04/a0Ddts.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/04/a0ql6K.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Meta-Heuristic Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元启发式搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火算法</title>
      <link href="/2020/08/2698379703.html"/>
      <url>/2020/08/2698379703.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>模拟退火算法来源于固体退火原理。</strong></p><p><strong>物理退火</strong>: 将材料加热后再经特定速率冷却，目的是增大晶粒的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使内能有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。</p><p><strong>模拟退火</strong>: 其原理也和固体退火的原理近似。模拟退火算法从某一较高初温出发，伴随温度参数的不断下降,结合概率突跳特性在解空间中随机寻找目标函数的全局最优解，即在局部最优解能概率性地跳出并最终趋于全局最优。</p><a id="more"></a><h2 id="爬山算法"><a class="markdownIt-Anchor" href="#爬山算法"></a> 爬山算法</h2><p>爬山算法是一种简单的贪心搜索算法，该算法<strong>每次从当前解的临近解空间中选择一个最优解作为当前解，直到达到一个局部最优解</strong>。这种算法思想很单纯，但是也存在一个很大的缺陷。在搜索选择的过程中有可能会陷入局部最优解，<strong>而这个局部最优解不一定是全局最优解</strong>。比如下面这个问题：</p><p>​                                         <img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202008/1534055-20200804182913901-1545346263.png" style="zoom:50%;" /></p><p>假设A是当前解，爬山算法往前继续搜索，当搜索到B这个局部最优解时就会停止搜索了。<strong>因为此时在B点无论是往哪边走都不会得到更优的解了</strong>。但是，全局最优解在C点。</p><p> </p><p> </p><h2 id="模拟退火算法"><a class="markdownIt-Anchor" href="#模拟退火算法"></a> 模拟退火算法</h2><p>爬山法是完完全全的贪心法，这种贪心是很鼠目寸光的，只把眼光放在局部最优解上，因此只能搜索到局部的最优值。<strong>模拟退火其实也是一种贪心算法，只不过与爬山法不同的是，模拟退火算法在搜索过程引入了随机因素。模拟退火算法以一定的概率来接受一个比当前解要差的解，因此有可能会跳出这个局部的最优解，达到全局的最优解</strong>。从上图来说，模拟退火算法在搜索到局部最优解B后，会以一定的概率接受向右的移动。也许经过几次这样的不是局部最优的移动后会到达BC之间的峰点D，这样一来便跳出了局部最优解B，继续往右移动就有可能获得全局最优解C。如下图：</p><p>​<img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202008/1534055-20200804182913901-1545346263.png" style="zoom:50%;" /></p><p>对比上面两种算法，对于模拟退火算法我们提到了一个很important的概念–<code>一定的概率</code>，关于这个一定的概率是如何计算的。这里还是参考了固体的物理退火过程。</p><p>根据热力学的原理，在温度为T时，出现能量差为dE的降温的概率为P(dE)，表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>d</mi><mi>E</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi>d</mi><mi>E</mi></mrow><mrow><mi>k</mi><mi>T</mi></mrow></mfrac></msup></mrow><annotation encoding="application/x-tex">P(dE)=e^{\frac{dE}{kT}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.02902em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.02902em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8800285714285714em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中k是一个常数，exp表示自然指数，且dE&lt;0(温度总是降低的)。这条公式指明了：</p><ol><li>温度越高，出现一次能量差为dE的降温的概率就越大；</li><li>温度越低，则出现降温的概率就越小。<strong>又由于dE总是小于0（不然怎么叫退火），因此dE/kT &lt; 0 ，exp(dE/kT)取值是(0,1),那么P(dE)的函数取值范围是(0,1) 。</strong></li></ol><p>随着温度T的降低，P(dE)会逐渐降低。我们将一次向较差解的移动看做一次温度跳变过程，<strong>我们以概率P(dE)来接受这样的移动</strong>。也就是说，在用固体退火模拟组合优化问题，<strong>将内能E模拟为目标函数值 f，温度T演化成控制参数 t</strong>，即得到解组合优化问题的模拟退火演算法：由初始解 i 和控制参数初值 t 开始，对当前解重复“<strong>产生新解→计算目标函数差→接受或丢弃</strong>”的迭代，并逐步衰减 t 值，算法终止时的当前解即为所得近似最优解。</p><p>因此我们归结起来就是以下几点：</p><ol><li><strong>若f( Y(i+1) ) &lt;= f( Y(i) )</strong>  (即移动后得到更优解)，则总是接受该移动；</li><li><strong>若f( Y(i+1) ) &gt; f( Y(i) )</strong>  (即移动后的解比当前解要差)，则以一定的概率接受移动，而且这个概率随着时间推移逐渐降低（逐渐降低才能趋向稳定）相当于上图中，<strong>从B移向BC之间的小波峰D时，每次右移(即接受一个更糟糕值)的概率在逐渐降低</strong>。如果这个坡特别长，那么很有可能最终我们并不会翻过这个坡。如果它不太长，<strong>这很有可能会翻过它</strong>，这取决于衰减 t 值的设定。</li></ol><p> </p><p> </p><h2 id="算法流程"><a class="markdownIt-Anchor" href="#算法流程"></a> 算法流程</h2><p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202008/1534055-20200803220946106-1945247794.png" alt="" /></p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202008/1534055-20200804184237696-743957545.png" style="zoom:67%;" /><p> </p><p> </p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">num_city=<span class="number">30</span><span class="comment">#城市总数</span></span><br><span class="line">initial_t=<span class="number">120</span><span class="comment">#初始温度</span></span><br><span class="line">lowest_t=<span class="number">0.001</span><span class="comment">#最低温度</span></span><br><span class="line">M=<span class="number">150</span><span class="comment">#当连续多次都不接受新的状态，开始改变温度</span></span><br><span class="line">iteration=<span class="number">300</span><span class="comment">#设置迭代次数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location=np.loadtxt(<span class="string">'./city_location.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"><span class="comment">#对称矩阵，两个城市之间的距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance_p2p_mat</span><span class="params">()</span>:</span></span><br><span class="line">    dis_mat=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        dis_mat_each=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">            dis=math.sqrt(pow(location[i][<span class="number">0</span>]-location[j][<span class="number">0</span>],<span class="number">2</span>)+pow(location[i][<span class="number">1</span>]-location[j][<span class="number">1</span>],<span class="number">2</span>))</span><br><span class="line">            dis_mat_each.append(dis)</span><br><span class="line">        dis_mat.append(dis_mat_each)</span><br><span class="line">   <span class="comment"># print(dis_mat)</span></span><br><span class="line">    <span class="keyword">return</span> dis_mat</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算所有路径对应的距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_newpath</span><span class="params">(dis_mat,path)</span>:</span></span><br><span class="line">    dis=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(num_city<span class="number">-1</span>):</span><br><span class="line">        dis=dis_mat[path[j]][path[j+<span class="number">1</span>]]+dis</span><br><span class="line">    dis=dis_mat[path[<span class="number">29</span>]][path[<span class="number">0</span>]]+dis<span class="comment">#回家</span></span><br><span class="line">    <span class="keyword">return</span> dis</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"><span class="comment">#点对点距离矩阵</span></span><br><span class="line">dis_mat=distance_p2p_mat()</span><br><span class="line"><span class="comment">#初始路径</span></span><br><span class="line">path=list(range(<span class="number">30</span>))</span><br><span class="line"><span class="comment">#初始距离</span></span><br><span class="line">dis=cal_newpath(dis_mat,path)</span><br><span class="line"><span class="comment">#初始温度</span></span><br><span class="line">t_current=initial_t</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (t_current&gt;lowest_t):<span class="comment">#外循环，改变温度</span></span><br><span class="line">    count_m=<span class="number">0</span><span class="comment">#M的计数</span></span><br><span class="line">    count_iter=<span class="number">0</span><span class="comment">#迭代次数计数</span></span><br><span class="line">    <span class="keyword">while</span> (count_m&lt;M <span class="keyword">and</span> count_iter&lt;iteration):<span class="comment">#内循环，连续多次不接受新的状态或者是迭代多次,跳出内循环        </span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(i==j):<span class="comment">#防止随机了同一城市</span></span><br><span class="line">            i=random.randint(<span class="number">1</span>,<span class="number">29</span>)</span><br><span class="line">            j=random.randint(<span class="number">1</span>,<span class="number">29</span>)</span><br><span class="line">        path_new=path.copy()</span><br><span class="line">        path_new[i],path_new[j]=path_new[j],path_new[i]<span class="comment">#任意交换两个城市的位置,产生新解</span></span><br><span class="line">        <span class="comment">#计算新解的距离</span></span><br><span class="line">        dis_new=cal_newpath(dis_mat,path_new)</span><br><span class="line">        <span class="comment">#求差</span></span><br><span class="line">        dis_delta=dis_new-dis</span><br><span class="line">        <span class="comment">#取0-1浮点随机数</span></span><br><span class="line">        rand=random.random()</span><br><span class="line">        <span class="comment">#计算指数函数的值</span></span><br><span class="line">        exp_d=math.exp(-dis_delta/t_current)</span><br><span class="line">        <span class="comment">#选择</span></span><br><span class="line">        <span class="keyword">if</span> dis_delta&lt;<span class="number">0</span>:</span><br><span class="line">            path=path_new</span><br><span class="line">            dis=dis_new</span><br><span class="line">        <span class="keyword">elif</span> exp_d&gt;rand:</span><br><span class="line">            path=path_new</span><br><span class="line">            dis=dis_new    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count_m=count_m+<span class="number">1</span></span><br><span class="line">        count_iter=count_iter+<span class="number">1</span></span><br><span class="line">    t_current=<span class="number">0.99</span>*t_current<span class="comment">#改变温度</span></span><br><span class="line"><span class="comment">#外循环结束</span></span><br><span class="line">dis_min=dis</span><br><span class="line">path_min=path</span><br><span class="line">print(<span class="string">'最短距离：'</span>,dis_min)</span><br><span class="line">print(<span class="string">'最短路径：'</span>,path_min)</span><br></pre></td></tr></table></figure><p><code>city_location.txt</code>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">41 94</span><br><span class="line">37 84</span><br><span class="line">54 67</span><br><span class="line">25 62</span><br><span class="line">7 64</span><br><span class="line">2 99</span><br><span class="line">68 58</span><br><span class="line">71 44</span><br><span class="line">54 62</span><br><span class="line">83 69</span><br><span class="line">64 60</span><br><span class="line">18 54</span><br><span class="line">22 60</span><br><span class="line">83 46</span><br><span class="line">91 38</span><br><span class="line">25 38</span><br><span class="line">24 42</span><br><span class="line">58 69</span><br><span class="line">71 71</span><br><span class="line">74 78</span><br><span class="line">87 76</span><br><span class="line">18 40</span><br><span class="line">13 40</span><br><span class="line">82 7</span><br><span class="line">62 32</span><br><span class="line">58 35</span><br><span class="line">45 21</span><br><span class="line">41 26</span><br><span class="line">44 35</span><br><span class="line">4 50</span><br></pre></td></tr></table></figure><p> </p><p> </p><h2 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h2><p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202008/1534055-20200803221553561-154411210.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Meta-Heuristic Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元启发式搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粒子群算法</title>
      <link href="/2020/08/4262056254.html"/>
      <url>/2020/08/4262056254.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>粒子群算法也称粒子群优化算法PSO（Particle Swarm Optimization），属于进化算法EA（Evolutionary Algorithm）的一种，实现容易、精度高、收敛快，是一种并行算法。它是从随机解出发，通过迭代寻找最优解，也是通过适应度来评价解的品质，它通过追随当前搜索到的最优值来寻找全局最优。</p><a id="more"></a><h2 id="算法原理"><a class="markdownIt-Anchor" href="#算法原理"></a> 算法原理</h2><p>设x为粒子起始位置，v为粒子飞行速度，p为搜索到的粒子的最优位置。</p><p>PSO初始化为一群随机粒子，然后通过迭代找到最优解。在每一次迭代中，粒子通过跟踪两个极值来更新自己：第一个就是粒子本身所找到的最优解，这个解称为个体极值pbest；另一个极值是整个种群目前找到的最优解，这个极值是全局极值gbest。粒子始终跟随这两个极值并在每一次迭代中更新自己的位置和速度，直到找到最优解。</p><p>具体如下：</p><p>假设在一个D维的目标搜索空间中，有N个粒子组成一个群落，其中第i个粒子为一个D维向量：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><msub><mi>i</mi><mn>1</mn></msub></msub><mo separator="true">,</mo><msub><mi>x</mi><msub><mi>i</mi><mn>2</mn></msub></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><msub><mi>i</mi><mi>D</mi></msub></msub><mo stretchy="false">)</mo><mspace width="2em"/><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">X_i=(x_{i_1},x_{i_2},...,x_{i_D}) \qquad i=1,2,...,N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.000305em;vertical-align:-0.250305em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.250305em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>第i个粒子的飞行速度也是一个D维向量：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><msub><mi>i</mi><mn>1</mn></msub></msub><mo separator="true">,</mo><msub><mi>v</mi><msub><mi>i</mi><mn>2</mn></msub></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><msub><mi>i</mi><mi>D</mi></msub></msub><mo stretchy="false">)</mo><mspace width="2em"/><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">V_i=(v_{i_1},v_{i_2},...,v_{i_D}) \qquad i=1,2,...,N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.000305em;vertical-align:-0.250305em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.250305em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>第i个粒子迄今为止搜索到的最优位置，即个体极值Pbest：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>b</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>p</mi><msub><mi>i</mi><mn>1</mn></msub></msub><mo separator="true">,</mo><msub><mi>p</mi><msub><mi>i</mi><mn>2</mn></msub></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>p</mi><msub><mi>i</mi><mi>D</mi></msub></msub><mo stretchy="false">)</mo><mspace width="2em"/><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">P_{best}=(p_{i_1},p_{i_2},...,p_{i_D}) \qquad i=1,2,...,N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.000305em;vertical-align:-0.250305em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.250305em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>整个粒子群迄今为止搜索到的最优位置，即全局极值Gbest：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>b</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>p</mi><msub><mi>g</mi><mn>1</mn></msub></msub><mo separator="true">,</mo><msub><mi>p</mi><msub><mi>g</mi><mn>2</mn></msub></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>p</mi><msub><mi>g</mi><mi>D</mi></msub></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_{best}=(p_{g_1},p_{g_2},...,p_{g_D})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>在找到这两个最优值时，粒子根据如下公式来更新自己的速度和位置：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><msub><mi>i</mi><mi>d</mi></msub></msub><mo>=</mo><mi>w</mi><mo>∗</mo><msub><mi>v</mi><msub><mi>i</mi><mi>d</mi></msub></msub><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>r</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>p</mi><msub><mi>i</mi><mi>d</mi></msub></msub><mo>−</mo><msub><mi>x</mi><msub><mi>i</mi><mi>d</mi></msub></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><msub><mi>r</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>p</mi><msub><mi>g</mi><mi>d</mi></msub></msub><mo>−</mo><msub><mi>x</mi><msub><mi>i</mi><mi>d</mi></msub></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>x</mi><msub><mi>i</mi><mi>d</mi></msub></msub><mo>=</mo><msub><mi>x</mi><msub><mi>i</mi><mi>d</mi></msub></msub><mo>+</mo><msub><mi>v</mi><msub><mi>i</mi><mi>d</mi></msub></msub></mrow><annotation encoding="application/x-tex">v_{i_d}=w*v_{i_d}+c_1r_1(p_{i_d}-x_{i_d})+c_2r_2(p_{g_d}-x_{i_d}) \\ x_{i_d}=x_{i_d}+v_{i_d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68642em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83919em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00586em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00586em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00586em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68642em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83919em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68642em;vertical-align:-0.25586em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.55em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，c1、c2为学习因子，也称加速常数（acceleration constant）；r1、r2为[0,1]范围内的均匀随机数。<br />第一个公式右侧包括三部分，</p><ul><li><p>第1部分为惯性inertia或动量momentum，代表了粒子有维持自己先前速度的趋势；</p></li><li><p>第2部分为认知cognition，反映了粒子对自己历史经验的记忆或回忆，代表粒子有向自身历史最佳位置逼近的趋势；</p></li><li><p>第3部分为社会social，反映了粒子间协同合作与知识共享的群体历史经验，代表粒子有向群体或邻近历史最佳位置逼近的趋势。</p></li></ul><p> </p><p> </p><h2 id="算法流程"><a class="markdownIt-Anchor" href="#算法流程"></a> 算法流程</h2><ol><li>初始化粒子群，包括群体规模N、每个粒子的位置xi和速度vi计算每个粒子的适应度值Fit[i]</li><li>对每个粒子，用它的适应度值Fit[i]和个体极值pbest(i)比较，如果Fit[i]&gt;pbest(i)，则用Fit[i]替换掉   pbest(i)</li><li>对每个粒子，用其适应度Fit[i]和全局极值gbest(i)比较，如果Fit[i]&gt;gbest(i)，则用Fit[i]替换掉gbest(i)</li><li>根据公式更新粒子的位置xi和速度vi</li><li>如果满足结束条件，误差足够好或达到最大循环次数，退出，否则返回2</li></ol><p> </p><p> </p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">******************************目标函数***********************************</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#  目标函数 ， 同时也将他设定为 适应度函数   （一维）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fitness</span><span class="params">(x)</span>:</span></span><br><span class="line">    y = -x**<span class="number">2</span> - <span class="number">8</span>*x <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> y </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">******************************初始化***********************************</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ************************初始化简单参数*************************************</span></span><br><span class="line">w = <span class="number">0.8</span>    <span class="comment">#惯性因子</span></span><br><span class="line">c1 = <span class="number">2</span>     <span class="comment">#自身认知因子</span></span><br><span class="line">c2 = <span class="number">2</span>     <span class="comment">#社会认知因子</span></span><br><span class="line">r1 = <span class="number">0.6</span>  <span class="comment">#自身认知学习率</span></span><br><span class="line">r2 = <span class="number">0.3</span>  <span class="comment">#社会认知学习率</span></span><br><span class="line">pN = <span class="number">100</span>             <span class="comment">#粒子数量</span></span><br><span class="line">dim = <span class="number">1</span>             <span class="comment">#搜索维度  </span></span><br><span class="line">max_iter = <span class="number">1000</span>    <span class="comment">#最大迭代次数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = np.zeros((pN, dim))       <span class="comment">#初始粒子的位置 </span></span><br><span class="line">V = np.zeros((pN, dim))       <span class="comment">#初始粒子的速度 </span></span><br><span class="line">p_best = np.zeros((pN, dim), dtype = float)   <span class="comment">#单个粒子的历史最佳位置</span></span><br><span class="line">g_best = np.zeros((<span class="number">1</span>, dim), dtype = float)    <span class="comment">#全局最佳位置  </span></span><br><span class="line">p_bestfit = np.zeros(pN)      <span class="comment">#单个粒子的历史最佳适应值  </span></span><br><span class="line">g_bestfit = <span class="number">-1e15</span>             <span class="comment">#全局最佳适应值  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *********************初始化个体和全局的最优解********************************</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(pN):  </span><br><span class="line">    <span class="comment">#初始化每一个粒子的位置和速度</span></span><br><span class="line">    X[i] = np.random.uniform(<span class="number">0</span>,<span class="number">5</span>,[<span class="number">1</span>, dim])  </span><br><span class="line">    V[i] = np.random.uniform(<span class="number">0</span>,<span class="number">5</span>,[<span class="number">1</span>, dim]) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到初始时的每一个粒子的历史最佳位置（暂且将第一次给的值定为最佳位置）</span></span><br><span class="line">    p_best[i] = X[i] </span><br><span class="line">    p_bestfit[i] = get_fitness(X[i])  <span class="comment">#得到对应的fit值</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到初始时的全局最佳位置和相应的适应度值（每遍历一个粒子就更新一次）</span></span><br><span class="line">    <span class="comment"># （这里不直接用max函数求最大值是因为不一定下一个粒子比前一个粒子更优，从而导致冗余计算。下面的那个for循环同理）</span></span><br><span class="line">  </span><br><span class="line">g_bestfit = max(p_bestfit)</span><br><span class="line">g_best = max(p_best)  <span class="comment">#得到全局最佳位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">***************************迭代***********************************#</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">fitness = []  <span class="comment">#记录每次迭代的最优解，画图时用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(max_iter):  </span><br><span class="line"></span><br><span class="line">    <span class="comment">#  更新每个粒子的位置和速度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(pN):  </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 更新g_best 和 p_best  </span></span><br><span class="line">        temp = get_fitness(X[i])  <span class="comment">#获得当前位置的适应值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> temp &gt; p_bestfit[i]:      <span class="comment">#先更新个体最优  </span></span><br><span class="line">            p_bestfit[i] = temp  </span><br><span class="line">            p_best[i] = X[i]  </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> p_bestfit[i] &gt; g_bestfit:  <span class="comment">#再更新全局最优  （注意：这里不直接用max函数求最大值是因为最外面还有一层max_iter迭代循环，从而更容易导致冗余计算；而初始化时的那重循环外面再无循环层，所以即使使用max函数也不会造成什么冗余。）</span></span><br><span class="line">                g_best = X[i]  </span><br><span class="line">                g_bestfit = p_bestfit[i]  </span><br><span class="line"></span><br><span class="line">        V[i] = w*V[i] + c1*r1*(p_best[i] - X[i]) + c2*r2*(g_best - X[i])  </span><br><span class="line">        X[i] = X[i] + V[i] </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    #  这样写没错，可以代替上面的那层if语句，但不能这样写，因为最外面还有一重max_iter循环，如果下一次迭代不比当前最优解还好的话，就造成了max函数计算冗余</span></span><br><span class="line"><span class="string">    g_bestfit = max(p_bestfit)</span></span><br><span class="line"><span class="string">    g_best = max(p_best)  </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    fitness.append(g_bestfit)  <span class="comment"># 记录每次迭代后找到的全局最优解</span></span><br><span class="line">    </span><br><span class="line">print(g_best, g_bestfit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">***************************画图***********************************#</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">"Figure1"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"iterators"</span>, size=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"fitness"</span>, size=<span class="number">14</span>)</span><br><span class="line">t = np.array([t <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">0</span>, max_iter)])</span><br><span class="line">fitness = np.array(fitness)</span><br><span class="line">plt.plot(t, fitness, color=<span class="string">'b'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> </p><p> </p><h2 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/03/aaHwdI.png" alt="" /></p><p>很明显对于函数<code>y = -x**2 - 8*x -1</code>，当<code>x=-4</code>时取最大值<code>y=15</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Meta-Heuristic Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元启发式搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLO v4学习总结</title>
      <link href="/2020/07/4258418483.html"/>
      <url>/2020/07/4258418483.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《Optimal Speed and Accuracy of Object Detection》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="http://xxx.itp.ac.cn/abs/2004.10934" target="_blank" rel="noopener external nofollow noreferrer">http://xxx.itp.ac.cn/abs/2004.10934</a></p><p><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/iyURFf05ssb" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/iyURFf05ssb</a></p>    </div></div><p> </p><p> </p><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>想要继续学习yolo系列算法，就不得不提从v4开始其作者便已不再是 J.R 了。年初大神<a href="https://mp.weixin.qq.com/s?__biz=MzUxNjcxMjQxNg==&amp;mid=2247496822&amp;idx=2&amp;sn=89fe4610a3993204c5c21058d9923c5d&amp;chksm=f9a186f9ced60fefd543f86eaa05125b185560e0c6f27598575eaac5045c1b421b86b13421ea&amp;scene=21#wechat_redirect" target="_blank" rel="noopener external nofollow noreferrer">Joseph Redmon宣布推出CV界，坦言无法忽视自己工作带来的负面影响</a>（AI算法用于军事和隐私窥探），此事在工业界和学术界引起了轩然大波，正当大家担忧yolo算法是否会就此“停更”时，俄罗斯开发者 Alexey Bochkovskiy 和两位中国台湾开发者 Chien-Yao Wang、Hong-Yuan Mark Liao扛过大旗，在4月24日联手推出yolo v4，并且获得了Joseph Redmon的承认。</p><p> </p><p>相对于理论创新来说，YOLOv4 更多的是集成许许多多的trick并取得了不错的效果，打造实现了最佳速度与精度平衡的目标检测新基准。我现在的目标就是了解模型运行的流程，然后尽可能地去学习其中的核心trick。</p><p>由于自己水平太低，所以更需要从原论文本身开始学习，了解基本框架后再去寻找一些技术博客加深理解。本文结构参考原论文结构，分析译文并做出一些修改使自己更易于理解。     <font size=2>（just write for myself）</font></p><p> </p><p><font color=brone>译文来源：公众号【计算机视觉联盟】</font><br /><font color=brone>主要参考：公众号【机器之心】、【Cver】、【GiantPandaCV】</font></p><p>可以看出，我整个yolo v4的学习都是基于公众号，这次学习过程除了让我又有了几个”置顶“的公众号外，我还加入几个关于计算机视觉的微信群，群里每天都有大佬发言，群助手会在朋友圈实时发布世界范围内高校或企业的高质量CV论文的相关信息，虽说现在一篇也看不懂，但也很开心，毕竟有那个味儿了！</p><p> </p><p> </p><h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/27/aFbY6K.png" alt="" /></p><p> </p><p> </p><h1 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h1><p>许多特征可以提高 CNN 的准确率，然而真正实行起来还需要在大型数据集上对这些特征组合进行实际测试，并且对测试结果进行理论验证。某些特征仅在特定模型上运行，并且局限于特定的问题，或是只能在小型数据集上运行；而另外有些特征（如批归一化和残差连接）则适用于大多数模型、任务和数据集。</p><p>YOLOv4 使用了以下特征组合，实现了新的 SOTA 结果：</p><ul><li>加权残差连接（WRC）</li><li>Cross-Stage-Partial-connection，CSP</li><li>Cross mini-Batch Normalization，CmBN</li><li>自对抗训练（Self-adversarial-training，SAT）</li><li>Mish 激活（Mish-activation）</li><li>Mosaic 数据增强</li><li>DropBlock 正则化</li><li>CIoU 损失</li></ul><p> </p><p>据介绍，YOLOv4 在 MS COCO 数据集上获得了 43.5% 的 AP 值 (65.7% AP50)，在 Tesla V100 上实现了 ∼65 FPS 的实时速度。</p><p>作者对比了 YOLOv4 和当前最优目标检测器，发现 YOLOv4 在取得与 EfficientDet 同等性能的情况下，速度是 EfficientDet 的二倍！此外，与 YOLOv3 相比，新版本的 AP 和 FPS 分别提高了 10% 和 12%。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/27/aFb2nS.png" style="zoom:60%;" /><p> </p><p> </p><p> </p><h1 id="一-介绍"><a class="markdownIt-Anchor" href="#一-介绍"></a> 一、介绍</h1><p>对于目标检测而言，高准确度早已不是唯一的目标。我们还希望边缘设备也能流畅地运行这些模型。因此，如何使用低成本硬件实时地处理输入视频也成为了一个重要的研究方向。我们的目标是任何人使用传统的单个GPU进行训练和测试，都可以获得实时、高质量和令人信服的目标检测结果。我们的贡献概括如下：</p><ol><li>建立了一个高效强大的目标检测模型。它使得每个人都可以使用 1080Ti 或 2080Ti 的 GPU 来训练一个快速准确的目标检测器。</li><li>验证了当前最优 Bag-of-Freebies 和 Bag-of-Specials 目标检测方法在检测器训练过程中的影响。</li><li>修改了 SOTA 方法，使之更加高效，更适合单 GPU 训练。这些方法包括 CBN、PAN、SAM 等。</li></ol><p> </p><p> </p><p> </p><h1 id="二-目标检测算法object-detection-models"><a class="markdownIt-Anchor" href="#二-目标检测算法object-detection-models"></a> 二、目标检测算法（Object detection models）</h1><p>目标检测算法一般有两部分组成：一个是在ImageNet预训练的骨架（backbone），另一个是用来预测对象类别和边界框的头部。对于头部，通常分为两类，即一级对象检测器和二级对象检测器。</p><p>近年来发展起来的目标探测器经常在主干和头部之间插入一些层，这些层通常用来收集不同阶段的特征图。我们可以称它为物体探测器的颈部。通常，颈部由几个自下而上的路径和几个自上而下的路径组成。具有这种机制的网络包括特征金字塔网络(FPN)、路径聚集网络(PAN)、BiFPN和NAS-FPN。</p><p> </p><p>总而言之，普通的检测器由以下几个部分组成：</p><ul><li>输入：图像，斑块，图像金字塔</li><li>骨架：VGG16，ResNet-50，SpineNet ，EfficientNet-B0 / B7，CSPResNeXt50，CSPDarknet53</li><li>颈部：<ul><li>其他块：SPP，ASPP，RFB，SAM</li><li>路径聚合块：FPN，PAN，NAS-FPN，Fully-connected FPN，BiFPN，ASFF，SFAM</li></ul></li><li>Heads ：<ul><li>密集预测（一阶段）：<ul><li>RPN，SSD，YOLO， RetinaNet（基于锚）</li><li>CornerNet，CenterNet，MatrixNet，FCOS（无锚）</li></ul></li><li>稀疏预测（两阶段）：<ul><li>Faster R-CNN，R-FCN，Mask R-CNN（基于锚）</li><li>RepPoints（无锚）</li></ul></li></ul></li></ul><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/27/aFbJl6.png" style="zoom:60%;" /><p> </p><p> </p><p> </p><h1 id="三-yolo-v4-方法methodology"><a class="markdownIt-Anchor" href="#三-yolo-v4-方法methodology"></a> 三、YOLO V4 方法（Methodology）</h1><p>该研究的主要目标是找出输入网络分辨率、卷积层数量、参数量（滤波器大小、滤波器通道/组）和层输入数量（滤波器）四者之间的最优平衡。次要目标则是挑选能够增加感受野的额外块（additional block），以及针对不同级别的检测器从不同骨干层中挑选最佳的参数聚合方法，如 FPN、PAN、ASFF 和 BiFPN 网络。</p><p> </p><h2 id="31-selection-of-architecture"><a class="markdownIt-Anchor" href="#31-selection-of-architecture"></a> 3.1 Selection of architecture</h2><p>具体而言，YOLOv4 包含以下三部分：</p><ul><li>骨干网络：CSPDarknet53</li><li>Neck：SPP、PAN</li><li>Head：YOLOv3</li></ul><p> </p><p>相比于基于 ResNet 的设计，CSPDarknet53 模型的目标检测准确度更高，不过 ResNet 的分类性能更好一些。但是，借助后文将讨论的 Mish 和其它技术，CSPDarknet53 的分类准确度可以得到提升。</p><p>SPP 模块，因为它能够极大地增加感受野，分离出最显著的上下文特征，并且几乎没有降低网络运行速度。</p><p>针对不同级别的检测器从不同骨干层中挑选 PANet 作为参数聚合方法。</p><p> </p><p> </p><h2 id="32-selection-of-bof-and-bos"><a class="markdownIt-Anchor" href="#32-selection-of-bof-and-bos"></a> 3.2 Selection of BoF and BoS</h2><p>为了提升准确度，可以针对训练过程进行一些优化，比如数据增强、类别不平衡、成本函数、软标注等等，这些改进不会影响推理速度，可被称为<code>「Bag of freebies」</code>。另外还有一些改进可称为<code>「bag of specials」</code>，仅需在推理时间方面做少许牺牲，就能获得优良的性能回报。这类改进包括增大感受野、使用注意力机制、集成跳过连接（skip-connection）或 FPN 等特性、使用非极大值抑制等后处理方法。本文将探讨骨架、头部、颈部的设计方式以及好用的 BoF 和 BoS 改进策略。</p><p>具体而言，YOLO v4 关于BoF 和 BoS和使用情况如下所述</p><h3 id="1-用于骨干部分的-bag-of-freebies"><a class="markdownIt-Anchor" href="#1-用于骨干部分的-bag-of-freebies"></a> 1. 用于骨干部分的 Bag of freebies</h3><ul><li>CutMix 和 Mosaic 数据增强</li><li>DropBlock 正则化</li><li>类别标签平滑化</li></ul><p> </p><h3 id="2-用于骨干部分的-bag-of-specials"><a class="markdownIt-Anchor" href="#2-用于骨干部分的-bag-of-specials"></a> 2. 用于骨干部分的 Bag of Specials</h3><ul><li>Mish 激活</li><li>交叉阶段部分连接（CSP)</li><li>多输入加权的残差连接（MiWRC）</li></ul><p> </p><h3 id="3-用于检测器的-bag-of-freebies"><a class="markdownIt-Anchor" href="#3-用于检测器的-bag-of-freebies"></a> 3. 用于检测器的 Bag of freebies</h3><ul><li>CIoU-loss</li><li>CmBN</li><li>DropBlock 正则化</li><li>Mosaic 数据增强</li><li>自对抗训练</li><li>消除网格敏感度</li><li>针对一个真值使用多个锚</li><li>余弦退火调度器</li><li>使用遗传算法求最优超参数</li><li>随机训练形状</li></ul><p> </p><h3 id="4-用于检测器的-bag-of-specials"><a class="markdownIt-Anchor" href="#4-用于检测器的-bag-of-specials"></a> 4. 用于检测器的 Bag of Specials</h3><ul><li>Mish 激活</li><li>修改版 SPP 模块</li><li>修改版 SAM 模块</li><li>修改版 PAN 路径聚合模块</li><li>DIoU-NMS</li></ul><p> </p><p> </p><h2 id="33-additional-improvements"><a class="markdownIt-Anchor" href="#33-additional-improvements"></a> 3.3 Additional improvements</h2><p>为了使检测器更适合在单个 GPU 上进行训练，研究者还做出了以下额外的设计与改进：</p><ul><li>提出新型数据增强方法 Mosaic 和自对抗训练（SAT）</li><li>在应用遗传算法时选择最优超参数</li><li>修改现有方法，使新方法实现高效训练和检测——modified SAM、modified PAN 和 Cross mini-Batch Normalization (CmBN)</li></ul><p> </p><h3 id="1-mosaic数据增强方法"><a class="markdownIt-Anchor" href="#1-mosaic数据增强方法"></a> 1. Mosaic数据增强方法</h3><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727231418746-1914398146.png" style="zoom:40%;" /><p>这个方法是将4张不同的图片镶嵌到一张图中，其优点是：</p><ul><li>混合四张具有不同语义信息的图片，可以让检测器检测超出常规语境的目标，增强模型的鲁棒性。</li><li>由于BN是从四张图片计算得到的，所以可以减少对大的mini-batch的依赖。</li></ul><p> </p><h3 id="2-self-adversarial-training"><a class="markdownIt-Anchor" href="#2-self-adversarial-training"></a> 2. Self-Adversarial Training</h3><p>自对抗训练也是一种新的数据增强方法，可以一定程度上抵抗对抗攻击。其包括两个阶段，每个阶段进行一次前向传播和一次反向传播。</p><ul><li>第一阶段，CNN通过反向传播改变图片信息，而不是改变网络权值。通过这种方式，CNN可以进行对抗性攻击，改变原始图像，造成图像上没有目标的假象。</li><li>第二阶段，对修改后的图像进行正常的目标检测。</li></ul><p> </p><h3 id="3-cmbn"><a class="markdownIt-Anchor" href="#3-cmbn"></a> 3. CmBN</h3><p>CmBN 是 CBN 的改进版，它仅收集单个批次内 mini-batch 之间的统计数据。</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224722778-778034819.png" style="zoom:45%;" /><p>上图表达的是三种不同的BN方式，理解的时候应该从左往右看，BN是对当前mini-batch进行归一化。CBN是对当前以及当前往前数3个mini-batch的结果进行归一化。而本文提出的CmBN则是仅仅在这个Batch中进行累积。</p><p> </p><h3 id="4-modified-sam"><a class="markdownIt-Anchor" href="#4-modified-sam"></a> 4. modified SAM</h3><p>注意力已经在深度学习设计中得到了广泛的应用。SAM 会为输入特征图分别应用最大池化和平均池化，从而得到两个特征图集合。其结果会被送入一个卷积层，之后再由一个 sigmoid 函数创建出空间注意力。</p><p>​                   <img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224727105-1523051895.png" style="zoom:60%;" /></p><p>这个空间注意力掩码再被应用于输入特征，从而输出经过优化的特征图。</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224751040-1557992066.png" style="zoom:50%;" /><p>YOLOv4 使用了一种修改版的 SAM，其中没有使用最大池化和平均池化，还将 SAM 从空间注意力机制（spatial-wise attention）修改为点注意力机制（point-wise attention）如下图 5、6 所示：</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224749636-1584618757.png" style="zoom:48%;" /><p>modified SAM中没有使用pooling, 而是直接用一个卷积得到的特征图直接使用Sigmoid进行激活, 然后对应点相乘, 所以说改进后的模型是Point-wise Attention.</p><p> </p><h3 id="5-modified-panet"><a class="markdownIt-Anchor" href="#5-modified-panet"></a> 5. modified PANet</h3><p>早期的深度学习的模型设计相对简单。每一层的输入都来自其上一层。更前面的层会提取局部的纹理和图案信息，并构建出后续层所需的语义信息。但是，随着网络向右侧推进，微调优化预测结果时所需的局部信息可能会丢失。</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224747822-1356389215.png" style="zoom:58%;" /><p>在后来的深度学习开发中，层之间的互连方式变得更加复杂。DenseNet 在这方面达到了极致。其中每一层都连接了其前面的所有层。</p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/han-suyu/cdn_others/A%20dense%20block%20with%205%20layers%20and%20growth%20rate%204.jpg"  style="zoom:10%;" /><p>在 FPN 中，来自自底向上和自上而下数据流的邻近层的信息会结合到一起。</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224743481-1047478228.png" style="zoom:58%;" /><p>层之间信息的流动方式变成了模型设计中需要考虑的又一关键事项。</p><p>下图是用于目标检测的路径聚合网络（PAN）。其中，自底向上的路径得到增强，使得低层信息更容易传播到顶部。在 FPN 中，局部空间信息会向上传播，如红色箭头所示。尽管图中可能没有展示清楚，但这条红色路径穿过了大约 100 多层。PAN 引入了一个捷径路径（绿色路径），其仅需 10 层左右就能抵达顶部的 N₅ 层。这个短回路概念使得顶层也能获取到细粒度的局部信息。</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224737921-562581725.png" style="zoom:58%;" /><p>但是，YOLOv4 并没有将邻近层加到一起，而是将特征图连接到一起。</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727224732196-853923805.png" style="zoom:45%;" /><p> </p><h3 id="6-使用遗传算法的超参数选择"><a class="markdownIt-Anchor" href="#6-使用遗传算法的超参数选择"></a> 6. 使用遗传算法的超参数选择</h3><p>进化算法是一种有根据的猜测方法。其遵循「适者生存」的概念。举个例子，如果我们随机选择 100 组超参数。然后使用它们训练 100 个模型。之后，我们从中选出表现最好的 10 个模型。对于每个被选中的模型，都根据原始版本创建 10 个超参数略有不同的变体版本。再使用这些新的超参数重新训练模型，再次选出其中表现最好的。随着我们不断迭代，我们应该可以找到超参数的最佳集合。另外，我们也可以一开始使用默认超参数，然后再执行突变。正如其论文（arXiv: 2004.10934）中写道：</p><blockquote><p>遗传算法使用 YOLOv3-SPP，根据 GIoU 损失进行训练，并为 min-val 5k 数据集搜索 300 epoch。我们为遗传算法实验采用了搜索得到的学习率 0.00261、动量 0.949、用于分配基本真值的 IoU 阈值 0.213 以及损失归一化算子 0.07。</p></blockquote><p> </p><p> </p><p> </p><h1 id="四-实验结果"><a class="markdownIt-Anchor" href="#四-实验结果"></a> 四、实验结果</h1><p>与其他最先进的物体探测器获得的结果比较如图8所示。YOLOv4在速度和准确性方面均优于最快，为最准确的探测器。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/27/aFb66f.png" alt="" /></p><p> </p><p> </p><p> </p><h1 id="五-总结"><a class="markdownIt-Anchor" href="#五-总结"></a> 五、 总结</h1><p>总体来说，yolo v4的内容非常繁杂，涉及到非常非常多的trick，文章提到的Bag of freebies和Bag of specials需要好好整理，系统学习一下。最后放一张参考网上然后自己画出来的更详细的思维导图，留以  后用。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/27/aFbUmD.png" alt="" /></p><p> </p><p> </p><blockquote><p>参考<br /><a href="https://arxiv.org/pdf/2004.10934.pdf" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/pdf/2004.10934.pdf</a><br /><a href="https://my.oschina.net/u/4410124/blog/4334685" target="_blank" rel="noopener external nofollow noreferrer">https://my.oschina.net/u/4410124/blog/4334685</a><br /><a href="https://mp.weixin.qq.com/s/Ia1ZhAeTgt8anXVd4qxE3A" target="_blank" rel="noopener external nofollow noreferrer">https://mp.weixin.qq.com/s/Ia1ZhAeTgt8anXVd4qxE3A</a><br /><a href="https://mp.weixin.qq.com/s/XEPhK81Ms-wdDnoz5oPZgA" target="_blank" rel="noopener external nofollow noreferrer">https://mp.weixin.qq.com/s/XEPhK81Ms-wdDnoz5oPZgA</a><br /><a href="https://mp.weixin.qq.com/s/azMLqnqySOqugW941dS1HQ" target="_blank" rel="noopener external nofollow noreferrer">https://mp.weixin.qq.com/s/azMLqnqySOqugW941dS1HQ</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLO v3学习总结</title>
      <link href="/2020/07/2158053739.html"/>
      <url>/2020/07/2158053739.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《An Incremental Improvement》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="https://arxiv.org/abs/1804.02767" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/abs/1804.02767</a></p><p><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/imidUerlbjc" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/imidUerlbjc</a></p>    </div></div><p> </p><p> </p><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>yolo v3虽说只是之前版本技术与其他经典网络模型优点的结合体，并没有更多新内容，但总体结构还是很复杂的，在学习yolo v3时，如果心中没有一个清晰的结构图，那理解起来绝对很困难（自己深有体会），而作者只在v1的论文里给出了结构图，v2和v3中都没有给出，并且v3的论文相对于v1 v2来说篇幅更短、有用信息更少，这也一定程度上增加了学习的难度。</p><p> </p><p> </p><p> </p><h1 id="一-网络结构"><a class="markdownIt-Anchor" href="#一-网络结构"></a> 一、网络结构</h1><h2 id="11-backbonedarknet-53"><a class="markdownIt-Anchor" href="#11-backbonedarknet-53"></a> 1.1 backbone：Darknet-53</h2><p>backbone部分由Yolov2时期的Darknet-19进化至Darknet-53，加深了网络层数，引入了Resnet中的跨层加和操作。Darknet-19和Darknet-53的网络结构对比见图1。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/21/UTlcee.png" alt="图1：darknet-19与darknet-53的架构区别" style="zoom:50%;" /><p>从图1可以看出，darknet-19是不存在残差结构的，和VGG是同类型的backbone。几种经典网络的性能对比见图2</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/21/UTlyLD.png" alt="图2：Darknet精度性能对比" style="zoom:60%;" /><p>从上表可以看出，Darknet-53处理速度每秒78张图，比Darknet-19慢不少，但是比同精度的ResNet快很多。yolo_v3其实并没有刻意追求速度，而是在保证实时性(fps&gt;36)的基础上追求精度。不过如果你要想更快，可以用一行代码切换到tiny-darknet。搭载tiny-darknet的yolo可以达到state of the art级别，甚至可以与squeezeNet相匹敌，详情可以看图3：<br /><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180912155142706?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xldmlvcGt1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图3：Tiny-Darknet精度性能对比" style="zoom:67%;" /><br />所以，有了yolo v3，就真的用不着yolo v2了，更用不着yolo v1了。这也是<a href="https://pjreddie.com/darknet/" target="_blank" rel="noopener external nofollow noreferrer">yolo官方网站</a>，在v3出来以后，就没提供v1和v2代码下载链接的原因了。</p><p> </p><p> </p><h2 id="12-详细框架"><a class="markdownIt-Anchor" href="#12-详细框架"></a> 1.2 详细框架</h2><p>先奉上总体结构图，来自知乎博主Algernon的文章【<a href="https://zhuanlan.zhihu.com/p/76802514" target="_blank" rel="noopener external nofollow noreferrer">Yolo三部曲解读——Yolov3</a>】</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/21/UT18fI.jpg" alt="图4：YOLOv3数据流程图(1)" /><br /> </p><p>在Yolov3中只有卷积层，不存在池化层和全连接层。通过<strong>调节卷积步长控制输出特征图的尺寸</strong>。所以对于输入图片尺寸没有特别限制。</p><p>上面流程图中，输入样例图片的大小为256x256。总共输出3个特征图，细节如下：</p><ol><li><p><strong>过程</strong>：输入图像经过Darknet-53（无全连接层），再经过Yoloblock(512)生成特征图被当作两用，第一用经过3x3卷积层、1x1卷积层之后生成特征图一；第二用经过1x1卷积层加上采样层，与Darnet-53网络的中间层输出结果进行拼接，经过Yoloblock(256)后再被当作两用，第一用经过3x3卷积层、1x1卷积层之后生成特征图二；第二用经过1x1卷积层加上采样层，与Darnet-53网络的另一中间层输出结果进行拼接，经过Yoloblock(128)后再经过3x3卷积层、1x1卷积层生成特征图三。</p><blockquote><p>SSD直接采用backbone中间层的处理结果作为feature map的输出</p><p>YOLO v3将中间层的处理结果和后面网络层的上采样结果做一个拼接作为feature map的输出</p></blockquote></li><li><p><strong>尺寸</strong>：特征图的输出维度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>∗</mo><mi>N</mi><mo>∗</mo><mo stretchy="false">[</mo><mn>3</mn><mo>∗</mo><mo stretchy="false">(</mo><mn>4</mn><mo>+</mo><mn>1</mn><mo>+</mo><mn>80</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">N*N*[3*(4+1+80)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>∗</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">N*N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 为输出特征图格点数，一共3个Anchor框，每个框有4维预测数值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>h</mi></msub></mrow><annotation encoding="application/x-tex">t_x,t_y,t_w,t_h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，1维预测框置信度，80维预测物体类别。所以第一层特征图的输出维度为 8x8x255。因为第二层、第三层各加入了一次上采样，所以输出维度分别为16x16x255、32x32x255</p></li><li><p><strong>效果</strong>：从输入到输出，第一个特征图下采样32倍，第二个特征图下采样16倍，第三个下采样8倍。</p></li><li><p><strong>目的</strong>：Yolov3借鉴了<code>金字塔特征图</code>思想，使用不同大小的特征图去检测物体，<font color=red>小尺寸特征图用于检测大尺寸物体，而大尺寸特征图检测小尺寸物体。</font></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上采样(upsample)：是将小尺寸特征图通过插值等方法，生成大尺寸图像。例如使用最近邻插值算法，将8x8的图像变换为16x16。上采样层不改变特征图的通道数。</span><br></pre></td></tr></table></figure><p> </p><p><strong>Yolo的整个网络，吸取了Resnet、Densenet、FPN的精髓，可以说是融合了目标检测当前业界最有效的全部技巧。</strong></p><p> </p><p>上图4是以输出结果为结点，以动作为连线，信息多且杂，下面给出一个以动作为结点的<a href="https://blog.csdn.net/leviopku/article/details/82660381" target="_blank" rel="noopener external nofollow noreferrer">流程图</a>，可能看起来会更直观吧。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/21/UT13tA.jpg" alt="图5：YOLOv3数据流程图(2)" /></p><p>对图5做一些补充解释：</p><ul><li><p><strong>DBL</strong>: 就是卷积+BN+Leaky relu。对于v3来说，BN和leaky relu已经是和卷积层不可分离的部分了(最后一层卷积除外)，共同构成了最小组件。</p></li><li><p><strong>Res unit</strong>：借鉴Resnet网络中的残差结构，让网络可以构建的更深。</p></li><li><p><strong>resn</strong>：n代表数字，有res1，res2, … ,res8等等，表示这个res_block里含有多少个res_unit。这是yolo_v3的大组件，yolo_v3开始借鉴了ResNet的残差结构，使用这种结构可以让网络结构更深。对于res_block的解释，可以在图1的右下角直观看到，其基本组件也是DBL。</p></li></ul><p> </p><p>其他基础操作：</p><p><strong>concat</strong>：张量拼接。将darknet中间层和后面的某一层的上采样进行拼接。拼接的操作和残差层add的操作是不一样的，加和操作来源于ResNet，将输入的特征图，与输出特征图对应维度进行相加，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y=f(x)+x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> ；而concat操作源于DenseNet，将特征图按照通道维度直接进行拼接，例如8x8x16的特征图与8x8x32的特征图拼接后生成8x8x48的特征图。</p><p> </p><p> </p><p> </p><h1 id="二-yolo输出特征图解码前向过程"><a class="markdownIt-Anchor" href="#二-yolo输出特征图解码前向过程"></a> 二、Yolo输出特征图解码（前向过程）</h1><p>yolo v3输出了3个不同尺度的feature map，这也是v3论文中提到的改进点：predictions across scales。这个借鉴了<strong>FPN</strong>，采用上采样的方法来实现这种多尺度的feature map，对不同size的目标进行检测，越精细的grid cell就可以检测出越精细的物体。</p><p>在Yolov3的设计中，每个特征图的每个格子中，都配置3个不同的先验框，所以最后三个特征图，这里暂且reshape为13 × 13 × 3 × 85、26 × 26 × 3 × 85、52 × 52 × 3 × 85，这样更容易理解，在代码中也是reshape成这样之后更容易操作。如图6所示。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/UvFVOS.png" alt="图6：映射细节" style="zoom:40%;" /><p>三张特征图就是整个Yolo输出的检测结果，检测框位置（4维）、检测置信度（1维）、类别（80维）都在其中，加起来正好是85维。特征图最后的维度85，代表的就是这些信息，而特征图其他维度N × N × 3，N × N代表了检测框的参考位置信息，3是3个不同尺度的先验框。下面详细描述怎么将检测信息解码出来（类似于v2）：</p><ul><li><p>先验框</p><p>在Yolov1中，网络直接回归检测框的宽、高，这样效果有限。所以在Yolov2中，改为了回归基于先验框的变化值，这样网络的学习难度降低，整体精度提升不小。Yolov3沿用了Yolov2中关于先验框的技巧，并且使用k-means对数据集中的标签框进行聚类，得到类别中心点的9个框，作为先验框。9个anchor会被三个输出张量平分的。根据大中小三种size各自取自己的anchor。另外，作者使用了logistic回归来对每个anchor包围的内容进行了一个目标性评分(objectness score)。 根据目标性评分来选择anchor prior进行predict，而不是所有anchor prior都会有输出。</p><p><code>注：先验框只与检测框的w、h有关，与x、y无关。</code></p></li></ul><p> </p><ul><li><p>检测框解码</p><p>有了先验框与输出特征图，就可以解码检测框 x，y，w，h。</p></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>x</mi></msub><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>c</mi><mi>x</mi></msub><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>y</mi></msub><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>c</mi><mi>y</mi></msub><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>w</mi></msub><mo>=</mo><msub><mi>p</mi><mi>w</mi></msub><msup><mi>e</mi><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>w</mi></msub><mo stretchy="false">)</mo></mrow></msup><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>h</mi></msub><mo>=</mo><msub><mi>p</mi><mi>h</mi></msub><msup><mi>e</mi><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>h</mi></msub><mo stretchy="false">)</mo></mrow></msup><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">b_x=\sigma(t_x)+c_x\\b_y=\sigma(t_y)+c_y\\b_w=p_we^{(t_w)}\\b_h=p_he^{(t_h)}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span></span></span></span></p><p>​如图7所示，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma(t_x),\sigma(t_y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>  是基于矩形框中心点左上角格点坐标的偏移量， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span> 是<strong>激活函数</strong>，论文中作者使用    sigmoid。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>p</mi><mi>h</mi></msub></mrow><annotation encoding="application/x-tex">p_w,p_h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  是先验框的宽、高，通过上述公式，计算出实际预测框的宽高 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>b</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>h</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(b_w,b_h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U85Yzn.png" alt="图7：检测框解码" style="zoom:45%;" /><p>​举个具体的例子，假设对于第二个特征图16 × 16 × 3 × 85中的第[5，4，2]维，上图中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">c_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为5， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">c_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为4，第  二个特征图对应的先验框为(30×61)，(62×45)，(59× 119)，prior_box的index为2，那么取最后一个59，119    作为先验w、先验h。这样计算之后的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">b_x,b_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 还需要乘以特征图二的采样率16，得到真实的检测框x,y。</p><p> </p><ul><li><p>检测置信度解码</p><p>物体的检测置信度，在Yolo设计中非常重要，关系到算法的检测正确率与召回率。置信度在输出85维中占固定一位，由sigmoid函数解码即可，解码之后数值区间在[0，1]中。</p></li></ul><p> </p><ul><li><p>类别解码</p><p>COCO数据集有80个类别，所以类别数在85维输出中占了80维，每一维独立代表一个类别的置信度。使用sigmoid激活函数替代了Yolov2中的softmax，取消了类别之间的互斥，可以使网络更加灵活。</p></li></ul><p> </p><p>三个特征图一共可以解码出 8 × 8 × 3 + 16 × 16 × 3 + 32 × 32 × 3 = 4032 个box以及相应的类别、置信度。这4032个box，在训练和推理时，使用方法不一样：</p><ol><li>训练时4032个box全部送入打标签函数，进行后一步的标签以及损失函数的计算。</li><li>推理时，选取一个置信度阈值，过滤掉低阈值box，再经过nms（非极大值抑制），就可以输出整个网络的预测结果了。</li></ol><p> </p><p> </p><p> </p><h1 id="三-训练策略与损失函数反向过程"><a class="markdownIt-Anchor" href="#三-训练策略与损失函数反向过程"></a> 三、训练策略与损失函数（反向过程）</h1><h2 id="31-训练策略"><a class="markdownIt-Anchor" href="#31-训练策略"></a> 3.1 训练策略</h2><p>Yolov3论文中给出的训练策略</p><blockquote><p>YOLOv3 predicts an objectness score for each bounding box using logistic regression. This should be 1 if the bounding box prior overlaps a ground truth object by more than any other bounding box prior. If the bounding box prior is not the best but does overlap a ground truth object by more than some threshold we ignore the prediction, following [17]. We use the threshold of .5. Unlike [17] our system only assigns one bounding box prior for each ground truth object. If a bounding box prior is not assigned to a ground truth object it incurs no loss for coordinate or class predictions, only objectness.</p></blockquote><p>总结如下：</p><ol><li>预测框一共分为三种情况：正例（positive）、负例（negative）、忽略样例（ignore）。</li><li>正例：任取一个ground truth，与4032个框全部计算IOU，IOU最大的预测框，即为正例。并且一个预测框，只能分配给一个ground truth。例如第一个ground truth已经匹配了一个正例检测框，那么下一个ground truth，就在余下的4031个检测框中，寻找IOU最大的检测框作为正例。ground truth的先后顺序可忽略。正例产生置信度loss、检测框loss、类别loss。预测框为对应的ground truth box标签（需要反向编码，使用真实的x、y、w、h计算出  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>h</mi></msub></mrow><annotation encoding="application/x-tex">t_x,t_y,t_w,t_h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ；类别标签对应类别为1，其余为0；置信度标签为1。</li><li>忽略样例：正例除外，与任意一个ground truth的IOU大于阈值（论文中使用0.5），则为忽略样例。忽略样例不产生任何loss。</li><li>负例：正例除外（与ground truth计算后IOU最大的检测框，但是IOU小于阈值，仍为正例），与全部ground truth的IOU都小于阈值（0.5），则为负例。负例只有置信度产生loss，置信度标签为0。</li></ol><p> </p><p><font color=blue>训练策略的一些疑难点：</font></p><ul><li><p>ground truth为什么不按照中心点分配对应的预测box？</p><p>在Yolov3的训练策略中，不再像Yolov1那样，每个cell负责中心落在该cell中的ground truth。原因是Yolov3一共产生3个特征图，3个特征图上的cell，中心是有重合的。训练时，可能最契合的是特征图1的第3个box，但是推理的时候特征图2的第1个box置信度最高。所以Yolov3的训练，不再按照ground truth中心点，严格分配指定cell，而是根据预测值寻找IOU最大的预测框作为正例。</p></li><li><p>Yolov1中的置信度标签，就是预测框与真实框的IOU，Yolov3为什么是1？</p><p>置信度意味着该预测框是或者不是一个真实物体，是一个二分类，所以标签是1、0更加合理。</p></li><li><p>为什么有忽略样例？</p><p>忽略样例是Yolov3中的点睛之笔。由于Yolov3使用了多尺度特征图，不同尺度的特征图之间会有重合检测部分。比如有一个真实物体，在训练时被分配到的检测框是特征图1的第三个box，IOU达0.98，此时恰好特征图2的第一个box与该ground truth的IOU达0.95，也检测到了该ground truth，如果此时给其置信度强行打0的标签，网络学习效果会不理想。</p></li></ul><p> </p><p> </p><h2 id="32-loss函数"><a class="markdownIt-Anchor" href="#32-loss函数"></a> 3.2 Loss函数</h2><p>图1的Yolov3的损失函数抽象表达式如下：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/21/UTlWFA.png"  style="zoom:50%;"/><p>Yolov3 Loss为三个特征图Loss之和：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>s</mi><msub><mi>s</mi><msub><mi>N</mi><mn>1</mn></msub></msub><mo>+</mo><mi>l</mi><mi>o</mi><mi>s</mi><msub><mi>s</mi><msub><mi>N</mi><mn>2</mn></msub></msub><mo>+</mo><mi>l</mi><mi>o</mi><mi>s</mi><msub><mi>s</mi><msub><mi>N</mi><mn>3</mn></msub></msub></mrow><annotation encoding="application/x-tex">Loss =loss_{N_1}+loss_{N_2}+loss_{N_3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9445399999999999em;vertical-align:-0.2501em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9445399999999999em;vertical-align:-0.2501em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9445399999999999em;vertical-align:-0.2501em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 为权重常数，控制检测框Loss、obj置信度Loss、noobj置信度Loss之间的比例，通常负例的个数是正例的几十倍以上，可以通过权重超参控制检测效果。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1_{ij}^{obj}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> 若是正例则输出1，否则为0；   <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mi>n</mi><mi>o</mi><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1_{ij}^{noobj}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> 若是负例则输出1，否则为0；忽略样例都输出0。</li><li>x、y、w、h使用MSE作为损失函数，也可以使用smooth L1 loss（出自Faster R-CNN）作为损失函数。smooth L1可以使训练更加平滑。置信度、类别标签由于是0，1二分类，所以使用<strong>二值交叉熵</strong>作为损失函数。</li></ul><p> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xy_loss = object_mask * box_loss_scale * K.binary_crossentropy(raw_true_xy, raw_pred[..., <span class="number">0</span>:<span class="number">2</span>],</span><br><span class="line">                                                                       from_logits=<span class="literal">True</span>)</span><br><span class="line">wh_loss = object_mask * box_loss_scale * <span class="number">0.5</span> * K.square(raw_true_wh - raw_pred[..., <span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">confidence_loss = object_mask * K.binary_crossentropy(object_mask, raw_pred[..., <span class="number">4</span>:<span class="number">5</span>], from_logits=<span class="literal">True</span>) + \</span><br><span class="line">                          (<span class="number">1</span> - object_mask) * K.binary_crossentropy(object_mask, raw_pred[..., <span class="number">4</span>:<span class="number">5</span>],</span><br><span class="line">                                                                    from_logits=<span class="literal">True</span>) * ignore_mask</span><br><span class="line">class_loss = object_mask * K.binary_crossentropy(true_class_probs, raw_pred[..., <span class="number">5</span>:], from_logits=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">xy_loss = K.sum(xy_loss) / mf</span><br><span class="line">wh_loss = K.sum(wh_loss) / mf</span><br><span class="line">confidence_loss = K.sum(confidence_loss) / mf</span><br><span class="line">class_loss = K.sum(class_loss) / mf</span><br><span class="line">loss += xy_loss + wh_loss + confidence_loss + class_loss</span><br></pre></td></tr></table></figure><p>以上是一段keras框架描述的yolo v3 的loss_function代码。忽略恒定系数不看，可以从上述代码看出：除了w, h的损失函数依然采用总方误差之外，其他部分的损失函数用的是二值交叉熵(binary_crossentropy),最后加到一起。关于binary_crossentropy的公式详情可参考博文<a href="https://blog.csdn.net/legalhighhigh/article/details/81409551" target="_blank" rel="noopener external nofollow noreferrer">《常见的损失函数》</a>。</p><p> </p><p> </p><p> </p><h1 id="四-精度与性能"><a class="markdownIt-Anchor" href="#四-精度与性能"></a> 四、精度与性能</h1><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727232944334-1585239940.png" alt="图8：精度对比图(on coco)" style="zoom:50%;" /><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727232825488-415229885.png" alt="图9：性能对比图(on coco)" style="zoom:30%;" /><p>由以上两图可以得到结论：Yolov3精度与SSD相比略有小优，与Faster R-CNN相比略有逊色，几乎持平，比RetinaNet差。但是速度是SSD、RetinaNet、Faster R-CNN至少2倍以上。输入尺寸为320*320的Yolov3，单张图片处理仅需22ms，简化后的Yolov3 tiny可以更快。</p><p> </p><p> </p><p> </p><h1 id="五-代码实现"><a class="markdownIt-Anchor" href="#五-代码实现"></a> 五、代码实现</h1><h2 id="51-权重文件准备"><a class="markdownIt-Anchor" href="#51-权重文件准备"></a> 5.1 权重文件准备</h2><ol><li><p>第一步：下载权重文件</p><ul><li>git clone <a href="https://github.com/mystic123/tensorflow-yolo-v3.git" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/mystic123/tensorflow-yolo-v3.git</a></li></ul></li><li><p>第二步：权重文件格式转换</p><ul><li><p>切换到tensorflow-yolo-v3目录，保证在这个文件夹下面有<code>coco.names</code>和<code>yolov3.weights</code>两个文件</p></li><li><p>在当前目录打开TF1.14环境的Anaconda Prompt ，执行如下转换程序</p><ul><li><p><strong>转换成ckpt文件格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python convert_weights.py --class_names coco.names --data_format NHWC --weights_file yolov3.weights</span><br></pre></td></tr></table></figure><p>效果：　默认在当前文件夹下新建一个saved_model文件夹，里面是转换生成的文件</p></li><li><p><strong>转换成pb文件格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python convert_weights_pb.py --class_names coco.names --data_format NHWC --weights_file yolov3.weights</span><br></pre></td></tr></table></figure><p>效果：默认在当前文件夹下生成一个<code>frozen_darknet_yolov3_model.pb</code>文件</p></li></ul></li></ul></li></ol><p><font color=orange>如果是转换自己训练的数据集，则将coco.names和yolov3.weights替换成自己相应的文件就可以了。　</font></p><p> </p><p> </p><h2 id="52-代码结构"><a class="markdownIt-Anchor" href="#52-代码结构"></a> 5.2 代码结构</h2><p>tensorflow版本为1.14 。代码结构如图10所示。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/28/akGifU.png" alt="图10：代码结构" style="zoom:80%;" /><p>工程只有三个程序文件，其中<code>v3_model.py</code>为模型骨架，因为过于复杂，把它单独分离出来。<code>v3_pic.py</code>和<code>v3_video.py</code>分别是检测图片和检测视频的程序。</p><p>model文件夹中存放转化好的权重文件；output文件夹存放视频检测后输出的每一帧图片；test文件夹存放测试样例；font文件夹存放字体。</p><p> </p><p> </p><h2 id="53-公共模型"><a class="markdownIt-Anchor" href="#53-公共模型"></a> 5.3 公共模型</h2><p><font color=red>v3_model.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">slim = tf.contrib.slim</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义darknet块：一个短链接加一个同尺度卷积再加一个下采样卷积</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_darknet53_block</span><span class="params">(inputs, filters)</span>:</span></span><br><span class="line">    shortcut = inputs</span><br><span class="line">    inputs = slim.conv2d(inputs, filters, <span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line">    inputs = slim.conv2d(inputs, filters * <span class="number">2</span>, <span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line"></span><br><span class="line">    inputs = inputs + shortcut</span><br><span class="line">    <span class="keyword">return</span> inputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_conv2d_fixed_padding</span><span class="params">(inputs, filters, kernel_size, strides=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> strides&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    inputs = _fixed_padding(inputs, kernel_size)<span class="comment">#外围填充0，好支持valid卷积</span></span><br><span class="line">    inputs = slim.conv2d(inputs, filters, kernel_size, stride=strides, padding= <span class="string">'VALID'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inputs</span><br><span class="line"></span><br><span class="line"><span class="comment">#对指定输入填充0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_fixed_padding</span><span class="params">(inputs, kernel_size, *args, mode=<span class="string">'CONSTANT'</span>, **kwargs)</span>:</span></span><br><span class="line">    pad_total = kernel_size - <span class="number">1</span></span><br><span class="line">    pad_beg = pad_total // <span class="number">2</span></span><br><span class="line">    pad_end = pad_total - pad_beg</span><br><span class="line"></span><br><span class="line">    <span class="comment">#inputs 【b,h,w,c】  pad  b,c不变。h和w上下左右，填充0.kernel = 3 ，则上下左右各加一趟0</span></span><br><span class="line">    padded_inputs = tf.pad(inputs, [[<span class="number">0</span>, <span class="number">0</span>], [pad_beg, pad_end],</span><br><span class="line">                                    [pad_beg, pad_end], [<span class="number">0</span>, <span class="number">0</span>]], mode=mode)</span><br><span class="line">    <span class="keyword">return</span> padded_inputs</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Darknet-53 模型.返回3个不同尺度的特征</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">darknet53</span><span class="params">(inputs)</span>:</span></span><br><span class="line">    inputs = slim.conv2d(inputs, <span class="number">32</span>, <span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line">    inputs = _conv2d_fixed_padding(inputs, <span class="number">64</span>, <span class="number">3</span>, strides=<span class="number">2</span>)<span class="comment">#需要填充,并使用了'VALID' (-1, 208, 208, 64)</span></span><br><span class="line">    </span><br><span class="line">    inputs = _darknet53_block(inputs, <span class="number">32</span>)<span class="comment">#darknet块</span></span><br><span class="line">    inputs = _conv2d_fixed_padding(inputs, <span class="number">128</span>, <span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        inputs = _darknet53_block(inputs, <span class="number">64</span>)</span><br><span class="line">    inputs = _conv2d_fixed_padding(inputs, <span class="number">256</span>, <span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        inputs = _darknet53_block(inputs, <span class="number">128</span>)</span><br><span class="line">    route_1 = inputs  <span class="comment">#特征1 (-1, 52, 52, 128)</span></span><br><span class="line"></span><br><span class="line">    inputs = _conv2d_fixed_padding(inputs, <span class="number">512</span>, <span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        inputs = _darknet53_block(inputs, <span class="number">256</span>)</span><br><span class="line">    route_2 = inputs<span class="comment">#特征2  (-1, 26, 26, 256)</span></span><br><span class="line"></span><br><span class="line">    inputs = _conv2d_fixed_padding(inputs, <span class="number">1024</span>, <span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        inputs = _darknet53_block(inputs, <span class="number">512</span>)<span class="comment">#特征3 (-1, 13, 13, 512)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> route_1, route_2, inputs<span class="comment">#在原有的darknet53，还会跟一个全局池化。这里没有使用。所以其实是只有52层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_BATCH_NORM_DECAY = <span class="number">0.9</span></span><br><span class="line">_BATCH_NORM_EPSILON = <span class="number">1e-05</span></span><br><span class="line">_LEAKY_RELU = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义候选框，来自coco数据集</span></span><br><span class="line">_ANCHORS = [(<span class="number">10</span>, <span class="number">13</span>), (<span class="number">16</span>, <span class="number">30</span>), (<span class="number">33</span>, <span class="number">23</span>), (<span class="number">30</span>, <span class="number">61</span>), (<span class="number">62</span>, <span class="number">45</span>), (<span class="number">59</span>, <span class="number">119</span>), (<span class="number">116</span>, <span class="number">90</span>), (<span class="number">156</span>, <span class="number">198</span>), (<span class="number">373</span>, <span class="number">326</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#yolo检测块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_yolo_block</span><span class="params">(inputs, filters)</span>:</span></span><br><span class="line">    inputs = slim.conv2d(inputs, filters, <span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line">    inputs = slim.conv2d(inputs, filters * <span class="number">2</span>, <span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line">    inputs = slim.conv2d(inputs, filters, <span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line">    inputs = slim.conv2d(inputs, filters * <span class="number">2</span>, <span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积 </span></span><br><span class="line">    inputs = slim.conv2d(inputs, filters, <span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line">    route = inputs</span><br><span class="line">    inputs = slim.conv2d(inputs, filters * <span class="number">2</span>, <span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积 </span></span><br><span class="line">    <span class="keyword">return</span> route, inputs</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_detection_layer</span><span class="params">(inputs, num_classes, anchors, img_size, data_format)</span>:</span></span><br><span class="line">    print(inputs.get_shape())</span><br><span class="line">    num_anchors = len(anchors)<span class="comment">#候选框个数</span></span><br><span class="line">    predictions = slim.conv2d(inputs, num_anchors * (<span class="number">5</span> + num_classes), <span class="number">1</span>, stride=<span class="number">1</span>, normalizer_fn=<span class="literal">None</span>,</span><br><span class="line">                              activation_fn=<span class="literal">None</span>, biases_initializer=tf.zeros_initializer())</span><br><span class="line"></span><br><span class="line">    shape = predictions.get_shape().as_list()</span><br><span class="line">    print(<span class="string">"shape"</span>,shape)<span class="comment">#三个尺度的形状分别为：[1, 13, 13, 3*(5+c)]、[1, 26, 26, 3*(5+c)]、[1, 52, 52, 3*(5+c)]</span></span><br><span class="line">    grid_size = shape[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">#去 NHWC中的HW</span></span><br><span class="line">    dim = grid_size[<span class="number">0</span>] * grid_size[<span class="number">1</span>]<span class="comment">#每个格子所包含的像素</span></span><br><span class="line">    bbox_attrs = <span class="number">5</span> + num_classes</span><br><span class="line"></span><br><span class="line">    predictions = tf.reshape(predictions, [<span class="number">-1</span>, num_anchors * dim, bbox_attrs])<span class="comment">#把h和w展开成dim</span></span><br><span class="line"></span><br><span class="line">    stride = (img_size[<span class="number">0</span>] // grid_size[<span class="number">0</span>], img_size[<span class="number">1</span>] // grid_size[<span class="number">1</span>])<span class="comment">#缩放参数 32（416/13）</span></span><br><span class="line"></span><br><span class="line">    anchors = [(a[<span class="number">0</span>] / stride[<span class="number">0</span>], a[<span class="number">1</span>] / stride[<span class="number">1</span>]) <span class="keyword">for</span> a <span class="keyword">in</span> anchors]<span class="comment">#将候选框的尺寸同比例缩小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#将包含边框的单元属性拆分</span></span><br><span class="line">    box_centers, box_sizes, confidence, classes = tf.split(predictions, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, num_classes], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    box_centers = tf.nn.sigmoid(box_centers)</span><br><span class="line">    confidence = tf.nn.sigmoid(confidence)</span><br><span class="line"></span><br><span class="line">    grid_x = tf.range(grid_size[<span class="number">0</span>], dtype=tf.float32)<span class="comment">#定义网格索引0,1,2...n</span></span><br><span class="line">    grid_y = tf.range(grid_size[<span class="number">1</span>], dtype=tf.float32)<span class="comment">#定义网格索引0,1,2,...m</span></span><br><span class="line">    a, b = tf.meshgrid(grid_x, grid_y)<span class="comment">#生成网格矩阵 a0，a1.。。an（共M行）  ， b0，b0，。。。b0（共n个），第二行为b1</span></span><br><span class="line"></span><br><span class="line">    x_offset = tf.reshape(a, (<span class="number">-1</span>, <span class="number">1</span>))<span class="comment">#展开 一共dim个</span></span><br><span class="line">    y_offset = tf.reshape(b, (<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    x_y_offset = tf.concat([x_offset, y_offset], axis=<span class="number">-1</span>)<span class="comment">#连接----[dim,2]</span></span><br><span class="line">    x_y_offset = tf.reshape(tf.tile(x_y_offset, [<span class="number">1</span>, num_anchors]), [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>])<span class="comment">#按候选框的个数复制xy（【1，n】代表第0维一次，第1维n次）</span></span><br><span class="line"></span><br><span class="line">    box_centers = box_centers + x_y_offset<span class="comment">#box_centers为0-1，x_y为具体网格的索引，相加后，就是真实位置(0.1+4=4.1，第4个网格里0.1的偏移)</span></span><br><span class="line">    box_centers = box_centers * stride<span class="comment">#真实尺寸像素点</span></span><br><span class="line"></span><br><span class="line">    anchors = tf.tile(anchors, [dim, <span class="number">1</span>])</span><br><span class="line">    box_sizes = tf.exp(box_sizes) * anchors<span class="comment">#计算边长：hw</span></span><br><span class="line">    box_sizes = box_sizes * stride<span class="comment">#真实边长</span></span><br><span class="line"></span><br><span class="line">    detections = tf.concat([box_centers, box_sizes, confidence], axis=<span class="number">-1</span>)</span><br><span class="line">    classes = tf.nn.sigmoid(classes)</span><br><span class="line">    predictions = tf.concat([detections, classes], axis=<span class="number">-1</span>)<span class="comment">#将转化后的结果合起来</span></span><br><span class="line">    print(predictions.get_shape())<span class="comment">#三个尺度的形状分别为：[1, 507（13*13*3）, 5+c]、[1, 2028, 5+c]、[1, 8112, 5+c]</span></span><br><span class="line">    <span class="keyword">return</span> predictions<span class="comment">#返回预测值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义上采样函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_upsample</span><span class="params">(inputs, out_shape)</span>:</span></span><br><span class="line">    <span class="comment">#由于上采样的填充方式不同，tf.image.resize_bilinear会对结果影响很大</span></span><br><span class="line">    inputs = tf.image.resize_nearest_neighbor(inputs, (out_shape[<span class="number">1</span>], out_shape[<span class="number">2</span>]))</span><br><span class="line">    inputs = tf.identity(inputs, name=<span class="string">'upsampled'</span>)</span><br><span class="line">    <span class="keyword">return</span> inputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义yolo函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yolo_v3</span><span class="params">(inputs, num_classes, is_training=False, data_format=<span class="string">'NHWC'</span>, reuse=False)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> data_format==<span class="string">'NHWC'</span></span><br><span class="line">    </span><br><span class="line">    img_size = inputs.get_shape().as_list()[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">#获得输入图片大小</span></span><br><span class="line"></span><br><span class="line">    inputs = inputs / <span class="number">255</span>    <span class="comment">#归一化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义批量归一化参数</span></span><br><span class="line">    batch_norm_params = &#123;</span><br><span class="line">        <span class="string">'decay'</span>: _BATCH_NORM_DECAY,</span><br><span class="line">        <span class="string">'epsilon'</span>: _BATCH_NORM_EPSILON,</span><br><span class="line">        <span class="string">'scale'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'is_training'</span>: is_training,</span><br><span class="line">        <span class="string">'fused'</span>: <span class="literal">None</span>,  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义yolo网络.</span></span><br><span class="line">    <span class="keyword">with</span> slim.arg_scope([slim.conv2d, slim.batch_norm], data_format=data_format, reuse=reuse):</span><br><span class="line">        <span class="keyword">with</span> slim.arg_scope([slim.conv2d], normalizer_fn=slim.batch_norm, normalizer_params=batch_norm_params,</span><br><span class="line">                            biases_initializer=<span class="literal">None</span>, activation_fn=<span class="keyword">lambda</span> x: tf.nn.leaky_relu(x, alpha=_LEAKY_RELU)):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'darknet-53'</span>):</span><br><span class="line">                route_1, route_2, inputs = darknet53(inputs)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'yolo-v3'</span>):</span><br><span class="line">                route, inputs = _yolo_block(inputs, <span class="number">512</span>)<span class="comment">#(-1, 13, 13, 1024)</span></span><br><span class="line">                <span class="comment">#使用候选框参数来辅助识别</span></span><br><span class="line">                detect_1 = _detection_layer(inputs, num_classes, _ANCHORS[<span class="number">6</span>:<span class="number">9</span>], img_size, data_format)</span><br><span class="line">                detect_1 = tf.identity(detect_1, name=<span class="string">'detect_1'</span>)</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                inputs = slim.conv2d(route, <span class="number">256</span>, <span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积 </span></span><br><span class="line">                upsample_size = route_2.get_shape().as_list()</span><br><span class="line">                inputs = _upsample(inputs, upsample_size)</span><br><span class="line">                inputs = tf.concat([inputs, route_2], axis=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">                route, inputs = _yolo_block(inputs, <span class="number">256</span>)<span class="comment">#(-1, 26, 26, 512)</span></span><br><span class="line">                detect_2 = _detection_layer(inputs, num_classes, _ANCHORS[<span class="number">3</span>:<span class="number">6</span>], img_size, data_format)</span><br><span class="line">                detect_2 = tf.identity(detect_2, name=<span class="string">'detect_2'</span>)</span><br><span class="line"></span><br><span class="line">                inputs = slim.conv2d(route, <span class="number">128</span>, <span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="string">'SAME'</span>)<span class="comment">#正常卷积</span></span><br><span class="line">                upsample_size = route_1.get_shape().as_list()</span><br><span class="line">                inputs = _upsample(inputs, upsample_size)</span><br><span class="line">                inputs = tf.concat([inputs, route_1], axis=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">                _, inputs = _yolo_block(inputs, <span class="number">128</span>)<span class="comment">#(-1, 52, 52, 256)</span></span><br><span class="line"></span><br><span class="line">                detect_3 = _detection_layer(inputs, num_classes, _ANCHORS[<span class="number">0</span>:<span class="number">3</span>], img_size, data_format)</span><br><span class="line">                detect_3 = tf.identity(detect_3, name=<span class="string">'detect_3'</span>)</span><br><span class="line"></span><br><span class="line">                detections = tf.concat([detect_1, detect_2, detect_3], axis=<span class="number">1</span>)</span><br><span class="line">                detections = tf.identity(detections, name=<span class="string">'detections'</span>)</span><br><span class="line">                <span class="keyword">return</span> detections<span class="comment">#返回了3个尺度。每个尺度里又包含3个结果(-1, 10647（ 507 +2028 + 8112）, 5+c)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''--------Test--------'''</span></span><br><span class="line"><span class="comment"># if __name__ == "__main__":</span></span><br><span class="line"><span class="comment">#     tf.reset_default_graph()</span></span><br><span class="line"><span class="comment">#     import cv2</span></span><br><span class="line"><span class="comment">#     data = cv2.imread('test.jpg')</span></span><br><span class="line"><span class="comment">#     data = cv2.cvtColor( data, cv2.COLOR_BGR2RGB )</span></span><br><span class="line"><span class="comment">#     data = cv2.resize( data, ( 416, 416 ) )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     data = tf.cast( tf.expand_dims( tf.constant( data ), 0 ), tf.float32 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     detections = yolo_v3( data,3,data_format='NHWC' )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     with tf.Session() as sess:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         sess.run( tf.global_variables_initializer() )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         print( sess.run( detections ).shape )</span></span><br></pre></td></tr></table></figure><p> </p><p> </p><h2 id="54-基于图片的目标检测"><a class="markdownIt-Anchor" href="#54-基于图片的目标检测"></a> 5.4 基于图片的目标检测</h2><p><font color=red>v3_pic.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line">my_model = __import__(<span class="string">"v3_model"</span>)</span><br><span class="line">yolo_v3 = my_model.yolo_v3</span><br><span class="line"></span><br><span class="line">size = <span class="number">416</span></span><br><span class="line">input_img =<span class="string">'D:\\计算机视觉\\已完成的代码\\yolo\\test\\6.jpg'</span></span><br><span class="line">output_img = <span class="string">'out.jpg'</span></span><br><span class="line">class_names = <span class="string">'D:\\计算机视觉\\已完成的代码\\yolo\\model\\v3\\coco.names'</span></span><br><span class="line">weights_file = <span class="string">'D:\\计算机视觉\\已完成的代码\\yolo\\model\\v3\\yolov3.weights'</span></span><br><span class="line">conf_threshold = <span class="number">0.5</span> <span class="comment">#置信度阈值</span></span><br><span class="line">iou_threshold = <span class="number">0.4</span>  <span class="comment">#重叠区域阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数：将中心点、高、宽坐标 转化为[x0, y0, x1, y1]坐标形式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detections_boxes</span><span class="params">(detections)</span>:</span></span><br><span class="line">    center_x, center_y, width, height, attrs = tf.split(detections, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>], axis=<span class="number">-1</span>)</span><br><span class="line">    w2 = width / <span class="number">2</span></span><br><span class="line">    h2 = height / <span class="number">2</span></span><br><span class="line">    x0 = center_x - w2</span><br><span class="line">    y0 = center_y - h2</span><br><span class="line">    x1 = center_x + w2</span><br><span class="line">    y1 = center_y + h2</span><br><span class="line"></span><br><span class="line">    boxes = tf.concat([x0, y0, x1, y1], axis=<span class="number">-1</span>)</span><br><span class="line">    detections = tf.concat([boxes, attrs], axis=<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> detections</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数计算两个框的内部重叠情况（IOU）box1，box2为左上、右下的坐标[x0, y0, x1, x2]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_iou</span><span class="params">(box1, box2)</span>:</span></span><br><span class="line"></span><br><span class="line">    b1_x0, b1_y0, b1_x1, b1_y1 = box1</span><br><span class="line">    b2_x0, b2_y0, b2_x1, b2_y1 = box2</span><br><span class="line"></span><br><span class="line">    int_x0 = max(b1_x0, b2_x0)</span><br><span class="line">    int_y0 = max(b1_y0, b2_y0)</span><br><span class="line">    int_x1 = min(b1_x1, b2_x1)</span><br><span class="line">    int_y1 = min(b1_y1, b2_y1)</span><br><span class="line"></span><br><span class="line">    int_area = (int_x1 - int_x0) * (int_y1 - int_y0)</span><br><span class="line"></span><br><span class="line">    b1_area = (b1_x1 - b1_x0) * (b1_y1 - b1_y0)</span><br><span class="line">    b2_area = (b2_x1 - b2_x0) * (b2_y1 - b2_y0)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#分母加个1e-05，避免除数为 0</span></span><br><span class="line">    iou = int_area / (b1_area + b2_area - int_area + <span class="number">1e-05</span>)</span><br><span class="line">    <span class="keyword">return</span> iou</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用NMS方法，对结果去重</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_max_suppression</span><span class="params">(predictions_with_boxes, confidence_threshold, iou_threshold=<span class="number">0.4</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    conf_mask = np.expand_dims((predictions_with_boxes[:, :, <span class="number">4</span>] &gt; confidence_threshold), <span class="number">-1</span>)</span><br><span class="line">    predictions = predictions_with_boxes * conf_mask</span><br><span class="line"></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, image_pred <span class="keyword">in</span> enumerate(predictions):</span><br><span class="line">        shape = image_pred.shape</span><br><span class="line">        <span class="comment">#print("shape1",shape)</span></span><br><span class="line">        non_zero_idxs = np.nonzero(image_pred)</span><br><span class="line">        image_pred = image_pred[non_zero_idxs[<span class="number">0</span>]]</span><br><span class="line">        <span class="comment">#print("shape2",image_pred.shape)</span></span><br><span class="line">        image_pred = image_pred.reshape(<span class="number">-1</span>, shape[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">        bbox_attrs = image_pred[:, :<span class="number">5</span>]</span><br><span class="line">        classes = image_pred[:, <span class="number">5</span>:]</span><br><span class="line">        classes = np.argmax(classes, axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        unique_classes = list(set(classes.reshape(<span class="number">-1</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cls <span class="keyword">in</span> unique_classes:</span><br><span class="line">            cls_mask = classes == cls</span><br><span class="line">            cls_boxes = bbox_attrs[np.nonzero(cls_mask)]</span><br><span class="line">            cls_boxes = cls_boxes[cls_boxes[:, <span class="number">-1</span>].argsort()[::<span class="number">-1</span>]]</span><br><span class="line">            cls_scores = cls_boxes[:, <span class="number">-1</span>]</span><br><span class="line">            cls_boxes = cls_boxes[:, :<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> len(cls_boxes) &gt; <span class="number">0</span>:</span><br><span class="line">                box = cls_boxes[<span class="number">0</span>]</span><br><span class="line">                score = cls_scores[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cls <span class="keyword">in</span> result:</span><br><span class="line">                    result[cls] = []</span><br><span class="line">                result[cls].append((box, score))</span><br><span class="line">                cls_boxes = cls_boxes[<span class="number">1</span>:]</span><br><span class="line">                ious = np.array([_iou(box, x) <span class="keyword">for</span> x <span class="keyword">in</span> cls_boxes])</span><br><span class="line">                iou_mask = ious &lt; iou_threshold</span><br><span class="line">                cls_boxes = cls_boxes[np.nonzero(iou_mask)]</span><br><span class="line">                cls_scores = cls_scores[np.nonzero(iou_mask)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载权重</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_weights</span><span class="params">(var_list, weights_file)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(weights_file, <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        _ = np.fromfile(fp, dtype=np.int32, count=<span class="number">5</span>)<span class="comment">#跳过前5个int32</span></span><br><span class="line">        weights = np.fromfile(fp, dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    ptr = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    assign_ops = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(var_list) - <span class="number">1</span>:</span><br><span class="line">        var1 = var_list[i]</span><br><span class="line">        var2 = var_list[i + <span class="number">1</span>]</span><br><span class="line">        <span class="comment">#找到卷积项</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Conv'</span> <span class="keyword">in</span> var1.name.split(<span class="string">'/'</span>)[<span class="number">-2</span>]:</span><br><span class="line">            <span class="comment"># 找到BN参数项</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'BatchNorm'</span> <span class="keyword">in</span> var2.name.split(<span class="string">'/'</span>)[<span class="number">-2</span>]:</span><br><span class="line">                <span class="comment"># 加载批量归一化参数</span></span><br><span class="line">                gamma, beta, mean, var = var_list[i + <span class="number">1</span>:i + <span class="number">5</span>]</span><br><span class="line">                batch_norm_vars = [beta, gamma, mean, var]</span><br><span class="line">                <span class="keyword">for</span> var <span class="keyword">in</span> batch_norm_vars:</span><br><span class="line">                    shape = var.shape.as_list()</span><br><span class="line">                    num_params = np.prod(shape)</span><br><span class="line">                    var_weights = weights[ptr:ptr + num_params].reshape(shape)</span><br><span class="line">                    ptr += num_params</span><br><span class="line">                    assign_ops.append(tf.assign(var, var_weights, validate_shape=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">                i += <span class="number">4</span><span class="comment">#已经加载了4个变量，指针移动4</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'Conv'</span> <span class="keyword">in</span> var2.name.split(<span class="string">'/'</span>)[<span class="number">-2</span>]:</span><br><span class="line">                bias = var2</span><br><span class="line">                bias_shape = bias.shape.as_list()</span><br><span class="line">                bias_params = np.prod(bias_shape)</span><br><span class="line">                bias_weights = weights[ptr:ptr + bias_params].reshape(bias_shape)</span><br><span class="line">                ptr += bias_params</span><br><span class="line">                assign_ops.append(tf.assign(bias, bias_weights, validate_shape=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">                i += <span class="number">1</span><span class="comment">#移动指针</span></span><br><span class="line"></span><br><span class="line">            shape = var1.shape.as_list()</span><br><span class="line">            num_params = np.prod(shape)</span><br><span class="line">            <span class="comment">#加载权重</span></span><br><span class="line">            var_weights = weights[ptr:ptr + num_params].reshape((shape[<span class="number">3</span>], shape[<span class="number">2</span>], shape[<span class="number">0</span>], shape[<span class="number">1</span>]))</span><br><span class="line">            var_weights = np.transpose(var_weights, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">            ptr += num_params</span><br><span class="line">            assign_ops.append(tf.assign(var1, var_weights, validate_shape=<span class="literal">True</span>))</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> assign_ops</span><br><span class="line"></span><br><span class="line"><span class="comment">#将级别结果显示在图片上</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_boxes</span><span class="params">(boxes, img, cls_names, detection_size)</span>:</span></span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cls, bboxs <span class="keyword">in</span> boxes.items():</span><br><span class="line">        color = tuple(np.random.randint(<span class="number">0</span>, <span class="number">256</span>, <span class="number">3</span>))     <span class="comment">#为每一个识别到的物体各设置一种颜色</span></span><br><span class="line">        <span class="keyword">for</span> box, score <span class="keyword">in</span> bboxs:</span><br><span class="line">            box = convert_to_original_size(box, np.array(detection_size), np.array(img.size))</span><br><span class="line">            draw.rectangle(box, outline=color, width=<span class="number">3</span>)</span><br><span class="line">         </span><br><span class="line">            <span class="comment">#fontText = ImageFont.truetype("./font/simhei.ttf", textSize, encoding="utf-8")</span></span><br><span class="line">            fontText = ImageFont.truetype(<span class="string">'./font/simhei.ttf'</span>, <span class="number">30</span>)  <span class="comment">#设置字体大小</span></span><br><span class="line">            draw.text(box[:<span class="number">2</span>], <span class="string">'&#123;&#125; &#123;:.2f&#125;%'</span>.format(cls_names[cls], score * <span class="number">100</span>), fill=color,font=fontText)</span><br><span class="line"></span><br><span class="line">            print(cls_names[cls].replace(<span class="string">'\n'</span>, <span class="string">''</span>) , <span class="string">'&#123;:.2f&#125;%'</span>.format( score * <span class="number">100</span>),box[:<span class="number">2</span>])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_original_size</span><span class="params">(box, size, original_size)</span>:</span></span><br><span class="line">    ratio = original_size / size</span><br><span class="line">    box = box.reshape(<span class="number">2</span>, <span class="number">2</span>) * ratio</span><br><span class="line">    <span class="keyword">return</span> list(box.reshape(<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载数据集标签名称</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_coco_names</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    names = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> id, name <span class="keyword">in</span> enumerate(f):</span><br><span class="line">            names[id] = name</span><br><span class="line">    <span class="keyword">return</span> names</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span></span><br><span class="line">    tf.reset_default_graph()</span><br><span class="line">    img = Image.open(input_img)</span><br><span class="line">    img_resized = img.resize(size=(size, size))</span><br><span class="line"></span><br><span class="line">    classes = load_coco_names(class_names)      <span class="comment">#这里的读取到的名字，都跟着一个换行符，可以使用.replace('\n', '')删掉它</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义输入占位符</span></span><br><span class="line">    inputs = tf.placeholder(tf.float32, [<span class="literal">None</span>, size, size, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'detector'</span>):</span><br><span class="line">        detections = yolo_v3(inputs, len(classes), data_format=<span class="string">'NHWC'</span>)<span class="comment">#定义网络结构</span></span><br><span class="line">        <span class="comment">#加载权重</span></span><br><span class="line">        load_ops = load_weights(tf.global_variables(scope=<span class="string">'detector'</span>), weights_file)</span><br><span class="line"></span><br><span class="line">    boxes = detections_boxes(detections)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(load_ops)</span><br><span class="line"></span><br><span class="line">        detected_boxes = sess.run(boxes, feed_dict=&#123;inputs: [np.array(img_resized, dtype=np.float32)]&#125;)</span><br><span class="line">    <span class="comment">#对10647个预测框进行去重</span></span><br><span class="line">    filtered_boxes = non_max_suppression(detected_boxes, confidence_threshold=conf_threshold,</span><br><span class="line">                                         iou_threshold=iou_threshold)</span><br><span class="line"></span><br><span class="line">    draw_boxes(filtered_boxes, img, classes, (size, size))</span><br><span class="line"></span><br><span class="line">    img.save(output_img)</span><br><span class="line">    img.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>测试1：</strong></p><p>先来一张合影照片，效果还不错。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uv8J8f.png" alt="" /></p><p><strong>测试2：</strong></p><p>当然，有一张图片在v1、v2中都检测失败了，这次肯定还要拿出来试一试，很开心在v3的实验中检测到了一些东西，虽说把电动三轮车识别成了truck和bus…</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/24/Uv8GPP.png" alt="" /></p><p> </p><p> </p><h2 id="55-基于视频的目标检测"><a class="markdownIt-Anchor" href="#55-基于视频的目标检测"></a> 5.5 基于视频的目标检测</h2><p><font color=red>v3_video.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line">my_model = __import__(<span class="string">"v3_model"</span>)</span><br><span class="line">yolo_v3 = my_model.yolo_v3</span><br><span class="line"></span><br><span class="line">size = <span class="number">416</span></span><br><span class="line">input_video =<span class="string">'D:\\计算机视觉\\已完成的代码\\yolo\\test\\3.mp4'</span></span><br><span class="line">class_names = <span class="string">'D:\\计算机视觉\\已完成的代码\\yolo\\model\\v3\\coco.names'</span></span><br><span class="line">weights_file = <span class="string">'D:\\计算机视觉\\已完成的代码\\yolo\\model\\v3\\yolov3.weights'</span></span><br><span class="line">conf_threshold = <span class="number">0.5</span> <span class="comment">#置信度阈值</span></span><br><span class="line">iou_threshold = <span class="number">0.4</span>  <span class="comment">#重叠区域阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数：将中心点、高、宽坐标 转化为[x0, y0, x1, y1]坐标形式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detections_boxes</span><span class="params">(detections)</span>:</span></span><br><span class="line">    center_x, center_y, width, height, attrs = tf.split(detections, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>], axis=<span class="number">-1</span>)</span><br><span class="line">    w2 = width / <span class="number">2</span></span><br><span class="line">    h2 = height / <span class="number">2</span></span><br><span class="line">    x0 = center_x - w2</span><br><span class="line">    y0 = center_y - h2</span><br><span class="line">    x1 = center_x + w2</span><br><span class="line">    y1 = center_y + h2</span><br><span class="line"></span><br><span class="line">    boxes = tf.concat([x0, y0, x1, y1], axis=<span class="number">-1</span>)</span><br><span class="line">    detections = tf.concat([boxes, attrs], axis=<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> detections</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数计算两个框的内部重叠情况（IOU）box1，box2为左上、右下的坐标[x0, y0, x1, x2]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_iou</span><span class="params">(box1, box2)</span>:</span></span><br><span class="line"></span><br><span class="line">    b1_x0, b1_y0, b1_x1, b1_y1 = box1</span><br><span class="line">    b2_x0, b2_y0, b2_x1, b2_y1 = box2</span><br><span class="line"></span><br><span class="line">    int_x0 = max(b1_x0, b2_x0)</span><br><span class="line">    int_y0 = max(b1_y0, b2_y0)</span><br><span class="line">    int_x1 = min(b1_x1, b2_x1)</span><br><span class="line">    int_y1 = min(b1_y1, b2_y1)</span><br><span class="line"></span><br><span class="line">    int_area = (int_x1 - int_x0) * (int_y1 - int_y0)</span><br><span class="line"></span><br><span class="line">    b1_area = (b1_x1 - b1_x0) * (b1_y1 - b1_y0)</span><br><span class="line">    b2_area = (b2_x1 - b2_x0) * (b2_y1 - b2_y0)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#分母加个1e-05，避免除数为 0</span></span><br><span class="line">    iou = int_area / (b1_area + b2_area - int_area + <span class="number">1e-05</span>)</span><br><span class="line">    <span class="keyword">return</span> iou</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用NMS方法，对结果去重</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_max_suppression</span><span class="params">(predictions_with_boxes, confidence_threshold, iou_threshold=<span class="number">0.4</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    conf_mask = np.expand_dims((predictions_with_boxes[:, :, <span class="number">4</span>] &gt; confidence_threshold), <span class="number">-1</span>)</span><br><span class="line">    predictions = predictions_with_boxes * conf_mask</span><br><span class="line"></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, image_pred <span class="keyword">in</span> enumerate(predictions):</span><br><span class="line">        shape = image_pred.shape</span><br><span class="line">        <span class="comment">#print("shape1",shape)</span></span><br><span class="line">        non_zero_idxs = np.nonzero(image_pred)</span><br><span class="line">        image_pred = image_pred[non_zero_idxs[<span class="number">0</span>]]</span><br><span class="line">        <span class="comment">#print("shape2",image_pred.shape)</span></span><br><span class="line">        image_pred = image_pred.reshape(<span class="number">-1</span>, shape[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">        bbox_attrs = image_pred[:, :<span class="number">5</span>]</span><br><span class="line">        classes = image_pred[:, <span class="number">5</span>:]</span><br><span class="line">        classes = np.argmax(classes, axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        unique_classes = list(set(classes.reshape(<span class="number">-1</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cls <span class="keyword">in</span> unique_classes:</span><br><span class="line">            cls_mask = classes == cls</span><br><span class="line">            cls_boxes = bbox_attrs[np.nonzero(cls_mask)]</span><br><span class="line">            cls_boxes = cls_boxes[cls_boxes[:, <span class="number">-1</span>].argsort()[::<span class="number">-1</span>]]</span><br><span class="line">            cls_scores = cls_boxes[:, <span class="number">-1</span>]</span><br><span class="line">            cls_boxes = cls_boxes[:, :<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> len(cls_boxes) &gt; <span class="number">0</span>:</span><br><span class="line">                box = cls_boxes[<span class="number">0</span>]</span><br><span class="line">                score = cls_scores[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cls <span class="keyword">in</span> result:</span><br><span class="line">                    result[cls] = []</span><br><span class="line">                result[cls].append((box, score))</span><br><span class="line">                cls_boxes = cls_boxes[<span class="number">1</span>:]</span><br><span class="line">                ious = np.array([_iou(box, x) <span class="keyword">for</span> x <span class="keyword">in</span> cls_boxes])</span><br><span class="line">                iou_mask = ious &lt; iou_threshold</span><br><span class="line">                cls_boxes = cls_boxes[np.nonzero(iou_mask)]</span><br><span class="line">                cls_scores = cls_scores[np.nonzero(iou_mask)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载权重</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_weights</span><span class="params">(var_list, weights_file)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(weights_file, <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        _ = np.fromfile(fp, dtype=np.int32, count=<span class="number">5</span>)<span class="comment">#跳过前5个int32</span></span><br><span class="line">        weights = np.fromfile(fp, dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    ptr = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    assign_ops = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(var_list) - <span class="number">1</span>:</span><br><span class="line">        var1 = var_list[i]</span><br><span class="line">        var2 = var_list[i + <span class="number">1</span>]</span><br><span class="line">        <span class="comment">#找到卷积项</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Conv'</span> <span class="keyword">in</span> var1.name.split(<span class="string">'/'</span>)[<span class="number">-2</span>]:</span><br><span class="line">            <span class="comment"># 找到BN参数项</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'BatchNorm'</span> <span class="keyword">in</span> var2.name.split(<span class="string">'/'</span>)[<span class="number">-2</span>]:</span><br><span class="line">                <span class="comment"># 加载批量归一化参数</span></span><br><span class="line">                gamma, beta, mean, var = var_list[i + <span class="number">1</span>:i + <span class="number">5</span>]</span><br><span class="line">                batch_norm_vars = [beta, gamma, mean, var]</span><br><span class="line">                <span class="keyword">for</span> var <span class="keyword">in</span> batch_norm_vars:</span><br><span class="line">                    shape = var.shape.as_list()</span><br><span class="line">                    num_params = np.prod(shape)</span><br><span class="line">                    var_weights = weights[ptr:ptr + num_params].reshape(shape)</span><br><span class="line">                    ptr += num_params</span><br><span class="line">                    assign_ops.append(tf.assign(var, var_weights, validate_shape=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">                i += <span class="number">4</span><span class="comment">#已经加载了4个变量，指针移动4</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'Conv'</span> <span class="keyword">in</span> var2.name.split(<span class="string">'/'</span>)[<span class="number">-2</span>]:</span><br><span class="line">                bias = var2</span><br><span class="line">                bias_shape = bias.shape.as_list()</span><br><span class="line">                bias_params = np.prod(bias_shape)</span><br><span class="line">                bias_weights = weights[ptr:ptr + bias_params].reshape(bias_shape)</span><br><span class="line">                ptr += bias_params</span><br><span class="line">                assign_ops.append(tf.assign(bias, bias_weights, validate_shape=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">                i += <span class="number">1</span><span class="comment">#移动指针</span></span><br><span class="line"></span><br><span class="line">            shape = var1.shape.as_list()</span><br><span class="line">            num_params = np.prod(shape)</span><br><span class="line">            <span class="comment">#加载权重</span></span><br><span class="line">            var_weights = weights[ptr:ptr + num_params].reshape((shape[<span class="number">3</span>], shape[<span class="number">2</span>], shape[<span class="number">0</span>], shape[<span class="number">1</span>]))</span><br><span class="line">            var_weights = np.transpose(var_weights, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">            ptr += num_params</span><br><span class="line">            assign_ops.append(tf.assign(var1, var_weights, validate_shape=<span class="literal">True</span>))</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> assign_ops</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将级别结果显示在图片上</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_boxes</span><span class="params">(j,boxes, img, cls_names, detection_size)</span>:</span></span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    f = open(<span class="string">'./output/final_v3.txt'</span>, <span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cls, bboxs <span class="keyword">in</span> boxes.items():</span><br><span class="line">        <span class="comment">#color = tuple(np.random.randint(0, 256, 3))     #为每一个识别到的物体各设置一种颜色</span></span><br><span class="line">        <span class="keyword">for</span> box, score <span class="keyword">in</span> bboxs:</span><br><span class="line">            box = convert_to_original_size(box, np.array(detection_size), np.array(img.size))</span><br><span class="line">            draw.rectangle(box, outline=(<span class="number">30</span>,<span class="number">148</span>,<span class="number">147</span>), width=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            fontText = ImageFont.truetype(<span class="string">'./font/simhei.ttf'</span>, <span class="number">15</span>)  <span class="comment">#设置字体大小</span></span><br><span class="line">            draw.text(box[:<span class="number">2</span>], <span class="string">'&#123;&#125; &#123;:.2f&#125;%'</span>.format(cls_names[cls], score * <span class="number">100</span>), fill=(<span class="number">30</span>,<span class="number">148</span>,<span class="number">147</span>),font=fontText)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#print(cls_names[cls].replace('\n', '') , '&#123;:.2f&#125;%'.format( score * 100),box[:2])</span></span><br><span class="line">            </span><br><span class="line">            f.write(str(cls_names[cls].replace(<span class="string">'\n'</span>, <span class="string">''</span>)) +<span class="string">'    '</span>+ <span class="string">'&#123;:.2f&#125;%'</span>.format( score * <span class="number">100</span>) +<span class="string">'    '</span>+ str(box[:<span class="number">2</span>])+<span class="string">'\n'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#cv2.imwrite(address,draw)</span></span><br><span class="line">        address = <span class="string">'./output/'</span> + str(j)+ <span class="string">'.png'</span></span><br><span class="line">        img.save(address)</span><br><span class="line">        </span><br><span class="line">        f.write(<span class="string">'\n'</span>)    <span class="comment">#把每一个框分开</span></span><br><span class="line">    f.write(<span class="string">'\n\n\n\n\n\n\n\n\n\n\n\n'</span>)    <span class="comment">#把每一帧分开</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_original_size</span><span class="params">(box, size, original_size)</span>:</span></span><br><span class="line">    ratio = original_size / size</span><br><span class="line">    box = box.reshape(<span class="number">2</span>, <span class="number">2</span>) * ratio</span><br><span class="line">    <span class="keyword">return</span> list(box.reshape(<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载数据集标签名称</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_coco_names</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    names = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> id, name <span class="keyword">in</span> enumerate(f):</span><br><span class="line">            names[id] = name</span><br><span class="line">    <span class="keyword">return</span> names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span></span><br><span class="line">    tf.reset_default_graph()</span><br><span class="line">    classes = load_coco_names(class_names)      <span class="comment">#这里的读取到的名字，都跟着一个换行符，可以使用.replace('\n', '')删掉它</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义输入占位符</span></span><br><span class="line">    inputs = tf.placeholder(tf.float32, [<span class="literal">None</span>, size, size, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'detector'</span>):</span><br><span class="line">        detections = yolo_v3(inputs, len(classes), data_format=<span class="string">'NHWC'</span>)<span class="comment">#定义网络结构</span></span><br><span class="line">        <span class="comment">#加载权重</span></span><br><span class="line">        load_ops = load_weights(tf.global_variables(scope=<span class="string">'detector'</span>), weights_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    boxes = detections_boxes(detections)</span><br><span class="line"></span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    sess.run(load_ops)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取视频文件</span></span><br><span class="line">    cap = cv2.VideoCapture(input_video)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读帧</span></span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        frame = Image.fromarray(cv2.cvtColor(frame,cv2.COLOR_BGR2RGB))      <span class="comment">#将cv2类型的图片转化为PIL类型的。参考：https://zhuanlan.zhihu.com/p/87441580</span></span><br><span class="line">        img_resized = frame.resize(size=(size, size))</span><br><span class="line"></span><br><span class="line">        detected_boxes = sess.run(boxes, feed_dict=&#123;inputs: [np.array(img_resized, dtype=np.float32)]&#125;)</span><br><span class="line">        <span class="comment">#对10647个预测框进行去重</span></span><br><span class="line">        filtered_boxes = non_max_suppression(detected_boxes, confidence_threshold=conf_threshold,iou_threshold=iou_threshold)</span><br><span class="line"></span><br><span class="line">        draw_boxes(j,filtered_boxes, frame, classes, (size, size))</span><br><span class="line">        </span><br><span class="line">        j=j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>测试视频时，运行速度非常慢，我人工数了一下，几乎每输出一帧处理后的图片都需要8秒，这比v1慢的多很多（不到1秒就能1帧，v2最快，肉眼可见的快）。经过反复的修改后发现，时间浪费在了程序的冗余计算上，比如sess的闭合，要把sess.run(load_ops)  放在迭代程序之外，并且提前定义sess = tf.Session()    不能在迭代程序里一次次的使用with结构。最终的程序速度可以达到快于v1但慢于v2的状态，大概在1秒两帧的样子（当然，由于硬件差异，与作者给出的性能肯定是有差距，但和作者给出的性能对比是吻合的）。</p><p> </p><p>另外，在单张图片识别时，我用随机的不同的颜色描述不同种类的物体有助于区分，视觉体验较好；但在处理视频时，这种方式就会使结果显得很杂乱，因为连续的两张图中，同一个物体被标注了不同颜色就感觉很奇怪，所以就把随机颜色的功能删掉，改成固定颜色（青色）。</p><p> </p><p>还是老样子，取视频的第30帧做展示，输出视频（共208帧）已上传到蓝奏云网盘。</p><p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200727233022429-398110743.png" alt="" /></p><p> </p><p> </p><div class="note success">            <p>原视频 。见：<a href="https://wwa.lanzous.com/ivijLej0vmb" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>处理后的视频（因上传大小限制，分成了两段视频。）见：<a href="https://wwa.lanzous.com/i4Rvaey7gcd" target="_blank" rel="noopener external nofollow noreferrer">传送门1</a>  <a href="https://wwa.lanzous.com/iH8gaey7hmj" target="_blank" rel="noopener external nofollow noreferrer">传送门2</a></p><p>另外，检测到的bbox位置也特别多，无法截图展示，我就把信息全部写入到了txt文本中。注意：连续的三个为三个框，分别由一个换行符隔开；每一帧图片再由12个换行符隔开。见：<a href="https://cdn.jsdelivr.net/gh/han-suyu/cdn_others/final_v3.txt" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p>          </div><p> </p><p> </p><p> </p><blockquote><p><strong>参考：</strong><br /><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener external nofollow noreferrer">https://pjreddie.com/darknet/yolo/</a><br /><a href="https://zhuanlan.zhihu.com/p/76802514" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/76802514</a><br /><a href="https://www.jianshu.com/p/af8a9c83e530" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/af8a9c83e530</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决安装hexo-renderer-sass失败的问题</title>
      <link href="/2020/07/2746093957.html"/>
      <url>/2020/07/2746093957.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>报错：Cannot download<br /><a href="https://github.com/sass/node-sass/releases/download/v4.14.1/win32-ia32-64_binding.node" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/sass/node-sass/releases/download/v4.14.1/win32-ia32-64_binding.node</a></p></blockquote><p> </p><p> </p><h5 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步：</h5><p>方法1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><p>方法2：</p><p>使用vpn，复制链接https://github.com/sass/node-sass/releases/download/v4.14.1/win32-ia32-64_binding.node下载<code>win32-ia32-64_binding.node</code></p><p> </p><blockquote><p>保证将<code>win32-ia32-64_binding.node</code>放到<code>C:\Users\Seven\AppData\Roaming\npm-cache\node-sass\4.14.1</code>文件夹中</p></blockquote><p> </p><p> </p><h5 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步:</h5><p>新建环境变量</p><p>系统变量名称:SASS_BINARY_PATH</p><p>系统变量值：C:\Users\Seven\AppData\Roaming\npm-cache\node-sass\4.14.1\win32-ia32-64_binding.node</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Experience </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLO v2学习总结</title>
      <link href="/2020/07/2054167626.html"/>
      <url>/2020/07/2054167626.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《You Only Look Once Unified，Real-Time Object Detection》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/abs/1612.08242</a></p><p><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/ihv6Geja7qb" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/ihv6Geja7qb</a></p>    </div></div><p> </p><p> </p><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>YOLO的升级版有两种：YOLOv2和YOLO9000。作者采用了一系列的方法优化了YOLO的模型结构，产生了YOLOv2，在快速的同时准确率达到目前最好的结果（state of the art）。然后，作者提出了一种目标分类与检测的联合训练方法，通过WordTree来混合检测数据集与识别数据集之中的数据，同时在COCO和ImageNet数据集中进行训练得到YOLO9000，实现9000多种物体的实时检测。</p><p> </p><p>YOLO V2是原作者在V1基础上做出改进后提出的，论文的名称就已经表达了作者的工作内容：</p><ul><li>Better 指的是和YOLO相比，YOLO V2有更好的精度</li><li>Faster 指的是修改了网络结构，其检测更快</li><li>Stronger 指的就是YOLO 9000,使用联合训练的方法，同时使用目标检测和图像分类的数据集，训练YOLO V2，训练出来的模型能够实时的识别多达9000种目标，所以也称为YOLO9000。</li></ul><p> </p><p>遵循原论文的结构，本文将从Better，Faster和Stronger三个方面对YOLO V2进行解读。</p><p> </p><p> </p><p> </p><h1 id="一-better"><a class="markdownIt-Anchor" href="#一-better"></a> 一、Better</h1><p>在YOLO V1的基础上，作者提出了不少的改进来进一步提升算法的性能（mAP），主要改进措施包括网络结构的改进（第1，3，5，6条）和Anchor Box的引进（第3，4，5条）以及训练方法（第2，7条）。</p><p> </p><h2 id="11-引入bn层batch-normalization"><a class="markdownIt-Anchor" href="#11-引入bn层batch-normalization"></a> 1.1 引入BN层（Batch Normalization）</h2><p>Batch Normalization能够加快模型收敛，并提供一定的正则化。作者在每个conv层都加上了了BN层，同时去掉了原来模型中的drop out部分，实验证明可以提高2%的mAP。</p><p>BN层进行如下变换：①对该批样本的各特征量（对于中间层来说，就是每一个神经元）分别进行归一化处理，分别使每个特征的数据分布变换为均值0，方差1。从而使得每一批训练样本在每一层都有类似的分布。这一变换不需要引入额外的参数。②对上一步的输出再做一次线性变换，假设上一步的输出为Z，则Z1=γZ + β。这里γ、β是可以训练的参数。增加这一变换是因为上一步骤中强制改变了特征数据的分布，可能影响了原有数据的信息表达能力。增加的线性变换使其有机会恢复其原本的信息。</p><p>关于批规一化的更多信息可以参考 <a href="https://zhuanlan.zhihu.com/p/34879333" target="_blank" rel="noopener external nofollow noreferrer">Batch Normalization原理与实战</a>。</p><p> </p><p> </p><h2 id="12-高分辨率分类器high-resolution-classifier"><a class="markdownIt-Anchor" href="#12-高分辨率分类器high-resolution-classifier"></a> 1.2 高分辨率分类器（High Resolution Classifier）</h2><p>这里要先清楚相比图像的分类任务，目标检测需要更高的图像分辨率。另外，训练网络时一般都不会从随机初始化所有的参数来开始的，一般都是用预训练好的网络来fine-tuning自己的网络，预训练的网络一般是在ImageNet上训练好的分类网络。</p><ul><li>YOLOV1预训练的时候使用224x224的输入，检测的时候采用的是448x448的输入，这会导致分类切换到检测的时候，模型需要适应图像分辨率的改变。</li><li>YOLOV2中将预训练分成两步：①：先用224x224的输入来训练大概160个epoch，然后再把输入调整到448x448再训练10个epoch，然后再与训练好的模型上进行fine-tuning，检测的时候用448x448就可以顺利过渡了。</li></ul><p>这个方法提高了3.7%的mAP.</p><p> </p><p> </p><h2 id="13-引入先验框anchor-box"><a class="markdownIt-Anchor" href="#13-引入先验框anchor-box"></a> 1.3 引入先验框（Anchor Box）</h2><p>在YOLO中在最后网络的全连接层直接预测目标边框的坐标，在YOLO V2中借鉴 Fast R-CNN中的Anchor的思想。</p><ul><li>去掉了YOLO网络的全连接层和最后的池化层，使提取特征的网络能够得到更高分辨率的特征。</li><li>使用416×416代替448×448作为网络的输入。这是因为希望得到的特征图的尺寸为奇数。奇数大小的宽和高会使得每个特征图在划分cell的时候就只有一个center cell（比如可以划分成7x7或9x9个cell，center cell只有一个，如果划分成8x8或10x10的，center cell就有4个）。为什么希望只有一个center cell呢？因为大的object一般会占据图像的中心，所以希望用一个center cell去预测，而不是4个center cell去预测。网络最终将416x416的输入变成13x13大小的feature map输出，也就是缩小比例为32。（5个池化层，每个池化层将输入的尺寸缩小1/2）。</li><li><strong>Anchor Boxes</strong> 在YOLO中，每个grid cell只预测两个bbox，最终只能预测98个bbox（7×7×2=98），而在Faster RCNN在输入大小为1000×600时的boxes数量大概是6000，在SSD300中boxes数量是8732。显然增加box数量是为了提高object的定位准确率。 过少的bbox显然影响了YOLO的定位的精度，在YOLO V2中引入了Anchor Boxes的思想，其预测的bbox则会超过千个（以输出的feature map为13×13为例，每个grid cell有9个anchor box的话，其预测的bbox数量为13×13×9=1521个）。</li></ul><p>引入anchor box之后，相对YOLO1的81%的召回率，YOLO2的召回率大幅提升到88%。同时mAP有0.2%的轻微下降。</p><p> </p><p> </p><h2 id="14-引入聚类提取先验框尺度dimension-cluster"><a class="markdownIt-Anchor" href="#14-引入聚类提取先验框尺度dimension-cluster"></a> 1.4 引入聚类提取先验框尺度（Dimension Cluster）</h2><p>在引入anchor box后，一个问题就是如何确定anchor的位置和大小？Faster RCNN中是手工选定的，每隔stride设定一个anchor，并根据不同的面积比例和长宽比例产生9个(3种大小，3种形状共9种)anchor box。设想能否一开始就选择了更好的、更有代表性的先验Boxes维度，那么网络就应该更容易学到准确的预测位置。作者的解决办法就是统计学习中的K-means聚类方法，通过对数据集中的Ground True Box做聚类，找到Ground True Box的统计规律。以聚类个数k为Anchor Boxs个数，以k个聚类中心Box的宽高维度为Anchor Box的维度。</p><p> </p><p>如果按照标准K-means使用欧式距离函数，大Boxes比小Boxes产生更多Error。但是，我们真正想要的是产生好的IOU得分的Boxes（与Box的大小无关）。因此采用了如下距离度量：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mi>o</mi><mi>x</mi><mo separator="true">,</mo><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>i</mi><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">−</mi><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>b</mi><mi>o</mi><mi>x</mi><mo separator="true">,</mo><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>i</mi><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d(box,centroid)=1−IoU(box,centroid)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span></span></p><p>图1是在VOC和COCO上的聚类结果：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U85NMq.png" alt="图1：Clustering dimensions on VOC and COCO" style="zoom:67%;" /><p>实验结论：</p><ol><li>采用聚类分析得到的先验框比手动设置的平均的IOU值更高，模型更容易训练和学习。</li><li>随着K的增加，平均的IOU是增加的。但是为了综合考虑模型的复杂度和召回率。最终选择K=5。使用5个聚类框就已经达到61 Avg IOU，相当于9个手工设置的先验框60.9 Avg IOU。</li></ol><p> </p><p>作者还发现：The cluster centroids are significantly different than hand-picked anchor boxes. There are fewer short, wide boxes and more tall, thin boxes.这个是个无关紧要的结论了。</p><p> </p><p> </p><h2 id="15-直接位置预测direct-location-prediction"><a class="markdownIt-Anchor" href="#15-直接位置预测direct-location-prediction"></a> 1.5 直接位置预测（Direct Location Prediction）</h2><p>在引入anchor box后，另一个问题就是模型不稳定，特别是在训练前期，作者认为这种不稳定是因为边界框（bounding box）中心位置的预测不够成功。</p><p>基于候选框的网络一般是通过预测相对于anchor box中心的偏移值来预测边界框的的中心坐标。公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo>∗</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>x</mi><mi>a</mi></msub><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>t</mi><mi>y</mi></msub><mo>∗</mo><msub><mi>h</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>y</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x=(t_x*w_a)+x_a\\y=(t_y*h_a)+y_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>a</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_a,y_a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 是anchor box的中心坐标，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>a</mi></msub><mi mathvariant="normal">、</mi><msub><mi>h</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">w_a、h_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是anchor box的宽和高， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(t_x,t_y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 表示预测的偏移值， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 表示预测的边界框的中心坐标，这个公式对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(t_x,t_y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 没有限制，这就表示预测的边界框容易向任何一个方向偏移，比如当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>x</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">t_x=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 时，边界框就会向右偏移一个anchor box的宽度。所以，每一个预测的边界框可能处于图片中的任意位置，这就导致了模型的不稳定。</p><p>YOLI V2沿用了V1中的做法，预测边界框的中心点相对于对应网格左上角的偏移值，每个网格有5个anchor box来预测5个边界框，每个边界框预测得到5个值：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>h</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">t_x,t_y,t_w,t_h,t_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，前四个是边界框的坐标和边长信息，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">t_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 则类似于YOLO V1中的置信度，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>c</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>c</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(c_x,c_y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 是当前网格相对于图像左上角的坐标，anchor box的先验宽度和高度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>p</mi><mi>h</mi></msub></mrow><annotation encoding="application/x-tex">p_w,p_h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，那么参照图10，预测的公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>x</mi></msub><mo>=</mo><mi>δ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>c</mi><mi>x</mi></msub><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>y</mi></msub><mo>=</mo><mi>δ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>c</mi><mi>y</mi></msub><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>w</mi></msub><mo>=</mo><msub><mi>p</mi><mi>w</mi></msub><msup><mi>e</mi><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>w</mi></msub><mo stretchy="false">)</mo></mrow></msup><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>h</mi></msub><mo>=</mo><msub><mi>p</mi><mi>h</mi></msub><msup><mi>e</mi><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>h</mi></msub><mo stretchy="false">)</mo></mrow></msup><mspace linebreak="newline"></mspace><mi>P</mi><mi>r</mi><mo stretchy="false">(</mo><mi>o</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>I</mi><mi>O</mi><mi>U</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>o</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b_x=\delta(t_x)+c_x\\b_y=\delta(t_y)+c_y\\b_w=p_we^{(t_w)}\\b_h=p_he^{(t_h)}\\Pr(object)*IOU(b,object)=\sigma(t_o)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>为了将边界框的中心约束到当前网格中，利用sigmoid函数将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">t_x,t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 进行归一化处理，使得模型更加稳定。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U85Yzn.png" alt="图2：Bounding boxes with dimension priors and location prediction" style="zoom: 50%;" /><p>通过对比实验发现，采用维度聚类与直接位置预测比单纯使用anchor box的方法在精度能多出5%。</p><p> </p><p> </p><h2 id="16-细粒度特征fine-gained-features"><a class="markdownIt-Anchor" href="#16-细粒度特征fine-gained-features"></a> 1.6 细粒度特征（Fine-Gained Features）</h2><p>YOLO V2最后一层卷积层输出的是13x13的特征图，检测时也是遵循的这个分辨率。这个分辨率对于大尺寸目标的检测是足够了，但是对于小目标则需要更细粒度的特征，因为越小的物体在经过层层池化后，体现在最终特征图中的可能性越小。</p><p>Faser R-CNN和SSD都在不同层次的特征图上产生区域建议以获得多尺度的适应性，YOLO V2则开创性地引入了直通层(passthrough layer)，这个直通层有点类似ResNet的dentity mappings结构，将浅层和深层两种不同尺寸的特征连接起来。在这里是将前一层高分辨率的特征图连接到低分辨率的特征图上：前一层的特征图的维度为26x26x512，在最后一个pooling之前将其1拆4形成4个13x13x512大小的特征图，然后将其与最后一层特征图（13x13x1024）连接成13x13x(1024+2048)的特征图，最后在此特征图上进行卷积预测（详细过程见下图3）。相当于做了一次特征融合，有利于检测小目标。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U85JRs.png" alt="图3：Passthrough Layer" style="zoom: 58%;" /><p> </p><p> </p><h2 id="17-多尺度训练multi-scale-training"><a class="markdownIt-Anchor" href="#17-多尺度训练multi-scale-training"></a> 1.7 多尺度训练（Multi-Scale Training）</h2><p>在实际应用时，输入的图像大小有可能是变化的。我们也将这一点考虑进来。因为我们的网络是全卷积神经网络，只有conv和pooling层，没有全连接层，这样就可以处理任意尺寸的图像。为了应对不同尺寸的图像，YOLO V2中在训练的时候使用不同的尺寸图像。</p><p>具体来说，在训练的时候，每隔一定的epoch（例如10）后就会微调网络，随机改变网络的输入图像大小。YOLO V2共进行5次最大池化，即最终的降采样参数为32，所以随机生成的图像大小为32的倍数，即{320,352,…,608}，最终最小的尺寸为320×320，最大的尺寸为608×608。</p><p>该训练规则强迫模型取适应不同的输入分辨率。模型对于小尺寸的输入处理速度更快，因此YOLOv2可以按照需求调节速度和准确率。在低分辨率情况下（288×288），YOLOv2可以在保持和Fast R-CNN持平的准确率的情况下，处理速度可以达到90FPS。在高分辨率情况下，YOLOv2在VOC2007数据集上准确率可以达到state of the art（78.6mAP）</p><p>对于目前流行的检测方法（Faster RCNN，SSD，YOLO）的精度和帧率之间的关系，见下图4。可以看到，作者在30fps处画了一条竖线，这是算法能否达到实时处理的分水岭。Faster RCNN败下阵来，而YOLO V2的不同点代表了不同输入图像分辨率下算法的表现。对于详细数据，见表格1对比（VOC 2007上进行测试）。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U85GGj.png" alt="图4：YOLOv2与其它模型在VOC 2007数据集上的正确率与速度对比" style="zoom:38%;" /><p> </p><p>​                    <img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U858iQ.png" alt="表1：YOLOv2与其它模型在VOC 2007数据集上的性能对比" style="zoom:43%;" /><br /> </p><p> </p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>YOLO V2针对YOLO定位不准确以及召回率低的问题，进行一些改变。 主要是借鉴Faster R-CNN的思想，引入了Anchor box。并且使用k-means的方法，通过聚类得到每个Anchor应该生成的Anchor box的的大小和形状。为了是提取到的特征有更细的粒度，其网络中借鉴ResNet的思想，将浅层的高分辨率特征和深层的特征进行了融合，这样能够更好的检测小的目标。 最后，由于YOLO V2的网络是全卷积网络，能够处理任意尺寸的图像，在训练的时候使用不同尺度的图像，以应对图像尺寸的变换。</p><p> </p><p>在Better这部分的末尾，作者给出了一个表格，指出了主要提升性能的措施。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U85Us0.png" alt="表2：不同改进措施的影响" style="zoom:55%;" /><p> </p><p> </p><p> </p><h1 id="二-faster"><a class="markdownIt-Anchor" href="#二-faster"></a> 二、Faster</h1><p>为了精度与速度并重，作者在速度上也作了一些改进措施。大多数检测网络依赖于VGG-16作为特征提取网络，VGG-16是一个强大而准确的分类网络，但是确过于复杂。224*224的图片进行一次前向传播，其卷积层就需要多达306.9亿次浮点数运算。</p><p>YOLO使用的是基于Googlenet的自定制网络，比VGG-16更快，一次前向传播仅需85.2亿次运算，不过它的精度要略低于VGG-16。224*224图片取Single-Crop, Top-5 Accuracy，YOLO的定制网络得到88%（VGG-16得到90%）。</p><p> </p><h2 id="21-darknet-19"><a class="markdownIt-Anchor" href="#21-darknet-19"></a> 2.1 Darknet-19</h2><p>YOLOv2使用了一个新的分类网络作为特征提取部分，参考了前人的工作经验。类似于VGG，网络使用了较多的3<em>3卷积核，在每一次池化操作后把通道数翻倍。借鉴了Network In Network的思想，网络使用了全局平均池化（Global Average Pooling）做预测，把1</em>1的卷积核置于3*3的卷积核之间，用来压缩特征。使用Batch Normalization稳定模型训练，加速收敛，正则化模型。</p><p>最终得出的基础模型就是Darknet-19，包含19个卷积层、5个最大值池化层（Max Pooling Layers ）。Darknet-19处理一张照片需要55.8亿次运算，Imagenet的Top-1准确率为72.9%，Top-5准确率为91.2%。具体的网络结构见表3。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U85aLV.png" alt="表3：Darknet-19的网络结构" style="zoom:50%;" /><p> </p><p> </p><h2 id="22-分类任务训练training-for-classification"><a class="markdownIt-Anchor" href="#22-分类任务训练training-for-classification"></a> 2.2 分类任务训练（Training For Classiﬁcation）</h2><p>作者采用ImageNet1000类数据集来训练分类模型。训练过程中，采用了 random crops, rotations, and hue, saturation, and exposure shifts等data augmentation方法。预训练后，作者采用高分辨率图像（448×448）对模型进行finetune。高分辨率下训练的分类网络Top-1准确率76.5%，Top-5准确率93.3%。</p><p> </p><p> </p><h2 id="23-检测任务训练training-for-detection"><a class="markdownIt-Anchor" href="#23-检测任务训练training-for-detection"></a> 2.3 检测任务训练（Training For Detection）</h2><p>为了把分类网络改成检测网络，作者将分类模型的最后一层卷积层去除，替换为三层卷积层（3×3,1024 filters），最后一层为1×1卷积层，输出维度filters为需要检测的数目。对于VOC数据集，预测5种Boxes，每个Box包含5个坐标值和20个类别，所以总共是5 * （5+20）= 125个输出维度。因此，输出为125（5x20+5x5） filters。最后还加入了passthough 层，从最后3 x 3 x 512的卷积层连到倒数第二层，使模型有了细粒度特征。</p><p> </p><p> </p><p> </p><h1 id="三-stronger"><a class="markdownIt-Anchor" href="#三-stronger"></a> 三、Stronger</h1><p>如之前所说，物体分类，是对整张图片打标签，比如这张图片中含有人，另一张图片中的物体为狗；而物体检测不仅对物体的类别进行预测，同时需要框出物体在图片中的位置。物体分类的数据集，最著名的ImageNet，物体类别有上万个，而物体检测数据集，例如coco，只有80个类别，因为物体检测、分割的打标签成本比物体分类打标签成本要高很多。所以在这里，作者提出了分类、检测训练集联合训练的方案。</p><p> </p><h2 id="31-joint-classification-and-detection联合分类和检测"><a class="markdownIt-Anchor" href="#31-joint-classification-and-detection联合分类和检测"></a> 3.1 Joint Classification And Detection（联合分类和检测）</h2><p>使用检测数据集的图片去学习检测相关的信息，例如Bounding Box 坐标预测，是否包含物体以及属于各个物体的概率。使用仅有类别标签的分类数据集图片去扩展可以检测的种类。训练过程中把监测数据和分类数据混合在一起。**基本的思路是，如果是检测样本，训练时其Loss包括分类误差和定位误差，如果是分类样本，则Loss只包括分类误差。**当然，一般的训练策略为，先在检测数据集上训练一定的epoch，待预测框的loss基本稳定后，再联合分类数据集、检测数据集进行交替训练，同时为了分类、检测数据量平衡，作者对coco数据集进行了上采样，使得coco数据总数和ImageNet大致相同。</p><p>联合分类与检测数据集，这里不同于将网络的backbone在ImageNet上进行预训练，预训练只能提高卷积核的鲁棒性，而分类检测数据集联合，可以扩充识别物体种类。比如狗，ImageNet上就包含超过100多类品种的狗。如果要联合训练，需要将这些标签进行合并。</p><p>大部分分类方法采用softmax输出所有类别的概率。采用softmax的前提假设是类别之间不相互包含（比如，犬和牧羊犬就是相互包含）。因此，我们需要一个多标签的模型来综合数据集，使类别之间不相互包含。</p><p>作者最后采用WordTree来整合数据集，解决了ImageNet与coco之间的类别问题。</p><p> </p><p> </p><h2 id="32-dataset-combination-with-wordtree"><a class="markdownIt-Anchor" href="#32-dataset-combination-with-wordtree"></a> 3.2 Dataset combination with WordTree</h2><p>可以使用WordTree把多个数据集整合在一起。只需要把数据集中的类别映射到树结构中的同义词集合（Synsets）。使用WordTree整合ImageNet和COCO的标签如图5所示：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U850dU.png" alt="图5：WordTree for COCO and ImageNet" style="zoom: 68%;" /><p>树结构表示物体之间的从属关系非常合适，第一个大类，物体，物体之下有动物、人工制品、自然物体等，动物中又有更具体的分类。此时，在类别中，不对所有的类别进行softmax操作，而对同一层级的类别进行softmax：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/U8oRUO.png" alt="图6：类别softmax" style="zoom: 50%;" /><p>如图6中所示，同一颜色的位置，进行softmax操作，使得同一颜色中只有一个类别预测分值最大。在预测时，从树的根节点开始向下检索，每次选取预测分值最高的子节点，直到所有选择的节点预测分值连乘后小于某一阈值时停止。在训练时，如果标签为人，那么只对人这个节点以及其所有的父节点进行loss计算，而其子节点，男人、女人、小孩等，不进行loss计算。</p><p>最后的结果是，Yolo v2可以识别超过9000个物体，作者美其名曰Yolo9000。当然原文中也提到，只有当父节点在检测集中出现过，子节点的预测才会有效。如果子节点是裤子、T恤、裙子等，而父节点衣服在检测集中没有出现过，那么整条预测类别支路几乎都是检测失效的状态。这也合理，给神经网络看的都是狗，让它去预测猫，目前神经网络还没有这么智能。</p><p> </p><p> </p><p> </p><h1 id="四-代码实现"><a class="markdownIt-Anchor" href="#四-代码实现"></a> 四、代码实现</h1><p>tensorflow版本为1.14 。代码结构如图7所示。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/28/akGAl4.png" alt="图7：代码结构" style="zoom:80%;" /><p> </p><p><strong>训练图集为COOC数据集，为了方便，我直接使用的yolo2_coco_checkpoint权重文件。</strong></p><p> </p><h2 id="41-基于图片的目标检测"><a class="markdownIt-Anchor" href="#41-基于图片的目标检测"></a> 4.1 基于图片的目标检测</h2><p><font color=red>yolo_pic</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> cv2 <span class="keyword">as</span> cv2</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaky_relu</span><span class="params">(x)</span>:</span>    <span class="comment">#leaky relu激活函数，leaky_relu激活函数一般用在比较深层次神经网络中</span></span><br><span class="line">    <span class="keyword">return</span> tf.maximum(<span class="number">0.1</span>*x,x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yolov2</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,cls_name)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.anchor_size = [[<span class="number">0.57273</span>, <span class="number">0.677385</span>], <span class="comment">#coco</span></span><br><span class="line">                           [<span class="number">1.87446</span>, <span class="number">2.06253</span>],</span><br><span class="line">                           [<span class="number">3.33843</span>, <span class="number">5.47434</span>],</span><br><span class="line">                           [<span class="number">7.88282</span>, <span class="number">3.52778</span>],</span><br><span class="line">                           [<span class="number">9.77052</span>, <span class="number">9.16828</span>]]</span><br><span class="line">        self.num_anchors = len(self.anchor_size)</span><br><span class="line">        <span class="keyword">if</span> cls_name == <span class="string">'coco'</span>:</span><br><span class="line">            self.CLASS = [<span class="string">'person'</span>, <span class="string">'bicycle'</span>, <span class="string">'car'</span>, <span class="string">'motorbike'</span>, <span class="string">'aeroplane'</span>, <span class="string">'bus'</span>, <span class="string">'train'</span>,</span><br><span class="line">                          <span class="string">'truck'</span>, <span class="string">'boat'</span>, <span class="string">'traffic light'</span>, <span class="string">'fire hydrant'</span>, <span class="string">'stop sign'</span>,</span><br><span class="line">                          <span class="string">'parking meter'</span>, <span class="string">'bench'</span>, <span class="string">'bird'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'horse'</span>, <span class="string">'sheep'</span>,</span><br><span class="line">                          <span class="string">'cow'</span>, <span class="string">'elephant'</span>, <span class="string">'bear'</span>, <span class="string">'zebra'</span>, <span class="string">'giraffe'</span>, <span class="string">'backpack'</span>, <span class="string">'umbrella'</span>,</span><br><span class="line">                          <span class="string">'handbag'</span>, <span class="string">'tie'</span>, <span class="string">'suitcase'</span>, <span class="string">'frisbee'</span>, <span class="string">'skis'</span>, <span class="string">'snowboard'</span>, <span class="string">'sports ball'</span>,</span><br><span class="line">                          <span class="string">'kite'</span>, <span class="string">'baseball bat'</span>, <span class="string">'baseball glove'</span>, <span class="string">'skateboard'</span>, <span class="string">'surfboard'</span>,</span><br><span class="line">                          <span class="string">'tennis racket'</span>, <span class="string">'bottle'</span>, <span class="string">'wine glass'</span>, <span class="string">'cup'</span>, <span class="string">'fork'</span>, <span class="string">'knife'</span>, <span class="string">'spoon'</span>,</span><br><span class="line">                          <span class="string">'bowl'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'sandwich'</span>, <span class="string">'orange'</span>, <span class="string">'broccoli'</span>, <span class="string">'carrot'</span>,</span><br><span class="line">                          <span class="string">'hot dog'</span>, <span class="string">'pizza'</span>, <span class="string">'donut'</span>, <span class="string">'cake'</span>, <span class="string">'chair'</span>, <span class="string">'sofa'</span>, <span class="string">'pottedplant'</span>,</span><br><span class="line">                          <span class="string">'bed'</span>, <span class="string">'diningtable'</span>, <span class="string">'toilet'</span>, <span class="string">'tvmonitor'</span>, <span class="string">'laptop'</span>, <span class="string">'mouse'</span>,</span><br><span class="line">                          <span class="string">'remote'</span>, <span class="string">'keyboard'</span>, <span class="string">'cell phone'</span>, <span class="string">'microwave'</span>, <span class="string">'oven'</span>, <span class="string">'toaster'</span>,</span><br><span class="line">                          <span class="string">'sink'</span>, <span class="string">'refrigerator'</span>, <span class="string">'book'</span>, <span class="string">'clock'</span>, <span class="string">'vase'</span>, <span class="string">'scissors'</span>, <span class="string">'teddy bear'</span>,</span><br><span class="line">                          <span class="string">'hair drier'</span>, <span class="string">'toothbrush'</span>]  <span class="comment">#coco</span></span><br><span class="line">            self.f_num = <span class="number">425</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.CLASS = [<span class="string">"aeroplane"</span>, <span class="string">"bicycle"</span>, <span class="string">"bird"</span>, <span class="string">"boat"</span>, <span class="string">"bottle"</span>, <span class="string">"bus"</span>, <span class="string">"car"</span>, <span class="string">"cat"</span>, <span class="string">"chair"</span>, <span class="string">"cow"</span>, <span class="string">"diningtable"</span>, <span class="string">"dog"</span>, <span class="string">"horse"</span>, <span class="string">"motorbike"</span>, <span class="string">"person"</span>, <span class="string">"pottedplant"</span>, <span class="string">"sheep"</span>, <span class="string">"sofa"</span>, <span class="string">"train"</span>, <span class="string">"tvmonitor"</span>]</span><br><span class="line">            self.f_num = <span class="number">125</span></span><br><span class="line"></span><br><span class="line">        self.num_class = len(self.CLASS)</span><br><span class="line">        self.feature_map_size = (<span class="number">13</span>,<span class="number">13</span>)</span><br><span class="line">        self.object_scale = <span class="number">5.</span> <span class="comment">#'物体位于gird cell时计算置信度的修正系数'</span></span><br><span class="line">        self.no_object_scale = <span class="number">1.</span>   <span class="comment">#'物体位于gird cell时计算置信度的修正系数'</span></span><br><span class="line">        self.class_scale = <span class="number">1.</span>  <span class="comment">#'计算分类损失的修正系数'</span></span><br><span class="line">        self.coordinates_scale = <span class="number">1.</span>  <span class="comment">#'计算坐标损失的修正系数'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#################################NewWork</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(self,x,filters_num,filters_size,pad_size=<span class="number">0</span>,stride=<span class="number">1</span>,batch_normalize=True,activation=leaky_relu,use_bias=False,name=<span class="string">'conv2d'</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pad_size &gt; <span class="number">0</span>:</span><br><span class="line">            x = tf.pad(x,[[<span class="number">0</span>,<span class="number">0</span>],[pad_size,pad_size],[pad_size,pad_size],[<span class="number">0</span>,<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">        out = tf.layers.conv2d(x,filters=filters_num,kernel_size=filters_size,strides=stride,padding=<span class="string">'VALID'</span>,activation=<span class="literal">None</span>,use_bias=use_bias,name=name)</span><br><span class="line">        <span class="comment"># BN应该在卷积层conv和激活函数activation之间,</span></span><br><span class="line">        <span class="comment"># (后面有BN层的conv就不用偏置bias，并激活函数activation在后)</span></span><br><span class="line">        <span class="keyword">if</span> batch_normalize:</span><br><span class="line">            out = tf.layers.batch_normalization(out,axis=<span class="number">-1</span>,momentum=<span class="number">0.9</span>,training=<span class="literal">False</span>,name=name+<span class="string">'_bn'</span>)</span><br><span class="line">        <span class="keyword">if</span> activation:</span><br><span class="line">            out = activation(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxpool</span><span class="params">(self,x, size=<span class="number">2</span>, stride=<span class="number">2</span>, name=<span class="string">'maxpool'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.layers.max_pooling2d(x, pool_size=size, strides=stride,name=name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># passthrough</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">passthrough</span><span class="params">(self,x, stride)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.space_to_depth(x, block_size=stride)</span><br><span class="line">        <span class="comment">#或者tf.extract_image_patches</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">darknet</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        x = tf.placeholder(dtype=tf.float32,shape=[<span class="literal">None</span>,<span class="number">416</span>,<span class="number">416</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(x, filters_num=<span class="number">32</span>, filters_size=<span class="number">3</span>, pad_size=<span class="number">1</span>,</span><br><span class="line">                     name=<span class="string">'conv1'</span>)</span><br><span class="line">        net = self.maxpool(net, size=<span class="number">2</span>, stride=<span class="number">2</span>, name=<span class="string">'pool1'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">64</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv2'</span>)</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool2'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">128</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv3_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv3_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">128</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv3_3'</span>)</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool3'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv4_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">128</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv4_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv4_3'</span>)</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool4'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv5_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv5_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv5_3'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv5_4'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv5_5'</span>)  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这一层特征图，要进行后面passthrough</span></span><br><span class="line">        shortcut = net</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool5'</span>)  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv6_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv6_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv6_3'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv6_4'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv6_5'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练检测网络时去掉了分类网络的网络最后一个卷积层，</span></span><br><span class="line">        <span class="comment"># 在后面增加了三个卷积核尺寸为3 * 3，卷积核数量为1024的卷积层，并在这三个卷积层的最后一层后面跟一个卷积核尺寸为1 * 1</span></span><br><span class="line">        <span class="comment"># 的卷积层，卷积核数量是（B * （5 + C））。</span></span><br><span class="line">        <span class="comment"># 对于VOC数据集，卷积层输入图像尺寸为416 * 416</span></span><br><span class="line">        <span class="comment"># 时最终输出是13 * 13</span></span><br><span class="line">        <span class="comment"># 个栅格，每个栅格预测5种boxes大小，每个box包含5个坐标值和20个条件类别概率，所以输出维度是13 * 13 * 5 * （5 + 20）= 13 * 13 * 125。</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># 检测网络加入了passthrough layer，从最后一个输出为26 * 26 * 512</span></span><br><span class="line">        <span class="comment"># 的卷积层连接到新加入的三个卷积核尺寸为3 * 3</span></span><br><span class="line">        <span class="comment"># 的卷积层的第二层，使模型有了细粒度特征。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面这部分主要是training for detection</span></span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv7_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv7_2'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># shortcut增加了一个中间卷积层，先采用64个1*1卷积核进行卷积，然后再进行passthrough处理</span></span><br><span class="line">        <span class="comment"># 这样26*26*512 -&gt; 26*26*64 -&gt; 13*13*256的特征图</span></span><br><span class="line">        shortcut = self.conv2d(shortcut, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv_shortcut'</span>)</span><br><span class="line">        shortcut = self.passthrough(shortcut, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接之后，变成13*13*（1024+256）</span></span><br><span class="line">        net = tf.concat([shortcut, net],<span class="number">-1</span>)  <span class="comment"># channel整合到一起，concatenated with the original features，passthrough层与ResNet网络的shortcut类似，以前面更高分辨率的特征图为输入，然后将其连接到后面的低分辨率特征图上，</span></span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># detection layer: 最后用一个1*1卷积去调整channel，该层没有BN层和激活函数，变成: S*S*(B*(5+C))，在这里为：13*13*425</span></span><br><span class="line">        output = self.conv2d(net, filters_num=self.f_num, filters_size=<span class="number">1</span>, batch_normalize=<span class="literal">False</span>, activation=<span class="literal">None</span>,</span><br><span class="line">                        use_bias=<span class="literal">True</span>, name=<span class="string">'conv_dec'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output,x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成anchor  ---&gt;  decode</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self,net)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.anchor_size = tf.constant(self.anchor_size , dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">        net = tf.reshape(net, [<span class="number">-1</span>, <span class="number">13</span> * <span class="number">13</span>, self.num_anchors, self.num_class + <span class="number">5</span>]) <span class="comment">#[batch,169,5,85]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 偏移量、置信度、类别</span></span><br><span class="line">        <span class="comment">#中心坐标相对于该cell坐上角的偏移量，sigmoid函数归一化到(0,1)</span></span><br><span class="line">        xy_offset = tf.nn.sigmoid(net[:, :, :, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        wh_offset = tf.exp(net[:, :, :, <span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">        obj_probs = tf.nn.sigmoid(net[:, :, :, <span class="number">4</span>])  <span class="comment"># 置信度,这个东西就是相当于v1中的confidence</span></span><br><span class="line">        class_probs = tf.nn.softmax(net[:, :, :, <span class="number">5</span>:])  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在feature map对应坐标生成anchors，每个坐标五个</span></span><br><span class="line">        height_index = tf.range(self.feature_map_size[<span class="number">0</span>], dtype=tf.float32)</span><br><span class="line">        width_index = tf.range(self.feature_map_size[<span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">        x_cell, y_cell = tf.meshgrid(height_index, width_index)</span><br><span class="line">        x_cell = tf.reshape(x_cell, [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>])  <span class="comment"># 和上面[H*W,num_anchors,num_class+5]对应</span></span><br><span class="line">        y_cell = tf.reshape(y_cell, [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># decode</span></span><br><span class="line">        bbox_x = (x_cell + xy_offset[:, :, :, <span class="number">0</span>]) / <span class="number">13</span></span><br><span class="line">        bbox_y = (y_cell + xy_offset[:, :, :, <span class="number">1</span>]) / <span class="number">13</span></span><br><span class="line">        bbox_w = (self.anchor_size[:, <span class="number">0</span>] * wh_offset[:, :, :, <span class="number">0</span>]) / <span class="number">13</span></span><br><span class="line">        bbox_h = (self.anchor_size[:, <span class="number">1</span>] * wh_offset[:, :, :, <span class="number">1</span>]) / <span class="number">13</span></span><br><span class="line"></span><br><span class="line">        bboxes = tf.stack([bbox_x - bbox_w / <span class="number">2</span>, bbox_y - bbox_h / <span class="number">2</span>, bbox_x + bbox_w / <span class="number">2</span>, bbox_y + bbox_h / <span class="number">2</span>],</span><br><span class="line">                          axis=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bboxes, obj_probs, class_probs</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将边界框超出整张图片(0,0)—(415,415)的部分cut掉</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_cut</span><span class="params">(self,bbox_min_max, bboxes)</span>:</span></span><br><span class="line">        bboxes = np.copy(bboxes)</span><br><span class="line">        bboxes = np.transpose(bboxes)</span><br><span class="line">        bbox_min_max = np.transpose(bbox_min_max)</span><br><span class="line">        <span class="comment"># cut the box</span></span><br><span class="line">        bboxes[<span class="number">0</span>] = np.maximum(bboxes[<span class="number">0</span>], bbox_min_max[<span class="number">0</span>])  <span class="comment"># xmin</span></span><br><span class="line">        bboxes[<span class="number">1</span>] = np.maximum(bboxes[<span class="number">1</span>], bbox_min_max[<span class="number">1</span>])  <span class="comment"># ymin</span></span><br><span class="line">        bboxes[<span class="number">2</span>] = np.minimum(bboxes[<span class="number">2</span>], bbox_min_max[<span class="number">2</span>])  <span class="comment"># xmax</span></span><br><span class="line">        bboxes[<span class="number">3</span>] = np.minimum(bboxes[<span class="number">3</span>], bbox_min_max[<span class="number">3</span>])  <span class="comment"># ymax</span></span><br><span class="line">        bboxes = np.transpose(bboxes)</span><br><span class="line">        <span class="keyword">return</span> bboxes</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_sort</span><span class="params">(self,classes, scores, bboxes, top_k=<span class="number">400</span>)</span>:</span></span><br><span class="line">        index = np.argsort(-scores)</span><br><span class="line">        classes = classes[index][:top_k]</span><br><span class="line">        scores = scores[index][:top_k]</span><br><span class="line">        bboxes = bboxes[index][:top_k]</span><br><span class="line">        <span class="keyword">return</span> classes, scores, bboxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_iou</span><span class="params">(self,bboxes1, bboxes2)</span>:</span></span><br><span class="line">        bboxes1 = np.transpose(bboxes1)</span><br><span class="line">        bboxes2 = np.transpose(bboxes2)</span><br><span class="line"></span><br><span class="line">        int_ymin = np.maximum(bboxes1[<span class="number">0</span>], bboxes2[<span class="number">0</span>])</span><br><span class="line">        int_xmin = np.maximum(bboxes1[<span class="number">1</span>], bboxes2[<span class="number">1</span>])</span><br><span class="line">        int_ymax = np.minimum(bboxes1[<span class="number">2</span>], bboxes2[<span class="number">2</span>])</span><br><span class="line">        int_xmax = np.minimum(bboxes1[<span class="number">3</span>], bboxes2[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        int_h = np.maximum(int_ymax - int_ymin, <span class="number">0.</span>)</span><br><span class="line">        int_w = np.maximum(int_xmax - int_xmin, <span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算IOU</span></span><br><span class="line">        int_vol = int_h * int_w  <span class="comment"># 交集面积</span></span><br><span class="line">        vol1 = (bboxes1[<span class="number">2</span>] - bboxes1[<span class="number">0</span>]) * (bboxes1[<span class="number">3</span>] - bboxes1[<span class="number">1</span>])  <span class="comment"># bboxes1面积</span></span><br><span class="line">        vol2 = (bboxes2[<span class="number">2</span>] - bboxes2[<span class="number">0</span>]) * (bboxes2[<span class="number">3</span>] - bboxes2[<span class="number">1</span>])  <span class="comment"># bboxes2面积</span></span><br><span class="line">        IOU = int_vol / (vol1 + vol2 - int_vol)  <span class="comment"># IOU=交集/并集</span></span><br><span class="line">        <span class="keyword">return</span> IOU</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NMS，或者用tf.image.non_max_suppression</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_nms</span><span class="params">(self,classes, scores, bboxes, nms_threshold=<span class="number">0.2</span>)</span>:</span></span><br><span class="line">        keep_bboxes = np.ones(scores.shape, dtype=np.bool)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(scores.size - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> keep_bboxes[i]:</span><br><span class="line">                overlap = self.bboxes_iou(bboxes[i], bboxes[(i + <span class="number">1</span>):])</span><br><span class="line">                keep_overlap = np.logical_or(overlap &lt; nms_threshold,</span><br><span class="line">                                             classes[(i + <span class="number">1</span>):] != classes[i])  <span class="comment"># IOU没有超过0.5或者是不同的类则保存下来</span></span><br><span class="line">                keep_bboxes[(i + <span class="number">1</span>):] = np.logical_and(keep_bboxes[(i + <span class="number">1</span>):], keep_overlap)</span><br><span class="line"></span><br><span class="line">        idxes = np.where(keep_bboxes)</span><br><span class="line">        <span class="keyword">return</span> classes[idxes], scores[idxes], bboxes[idxes]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postprocess</span><span class="params">(self,bboxes, obj_probs, class_probs, image_shape=<span class="params">(<span class="number">416</span>, <span class="number">416</span>)</span>, threshold=<span class="number">0.5</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        bboxes = np.reshape(bboxes, [<span class="number">-1</span>, <span class="number">4</span>])</span><br><span class="line">        <span class="comment"># 将所有box还原成图片中真实的位置</span></span><br><span class="line">        bboxes[:, <span class="number">0</span>:<span class="number">1</span>] *= float(image_shape[<span class="number">1</span>])</span><br><span class="line">        bboxes[:, <span class="number">1</span>:<span class="number">2</span>] *= float(image_shape[<span class="number">0</span>])</span><br><span class="line">        bboxes[:, <span class="number">2</span>:<span class="number">3</span>] *= float(image_shape[<span class="number">1</span>])</span><br><span class="line">        bboxes[:, <span class="number">3</span>:<span class="number">4</span>] *= float(image_shape[<span class="number">0</span>])</span><br><span class="line">        bboxes = bboxes.astype(np.int32)  <span class="comment"># 转int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bbox_min_max = [<span class="number">0</span>, <span class="number">0</span>, image_shape[<span class="number">1</span>] - <span class="number">1</span>, image_shape[<span class="number">0</span>] - <span class="number">1</span>]</span><br><span class="line">        bboxes = self.bboxes_cut(bbox_min_max, bboxes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj_probs = np.reshape(obj_probs, [<span class="number">-1</span>])  <span class="comment"># 13*13*5</span></span><br><span class="line">        class_probs = np.reshape(class_probs, [len(obj_probs), <span class="number">-1</span>])  <span class="comment"># (13*13*5,80)</span></span><br><span class="line">        class_max_index = np.argmax(class_probs, axis=<span class="number">1</span>)  <span class="comment"># max类别概率对应的index</span></span><br><span class="line">        class_probs = class_probs[np.arange(len(obj_probs)), class_max_index]</span><br><span class="line">        scores = obj_probs * class_probs  <span class="comment"># 置信度*max类别概率=类别置信度scores</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 类别置信度scores&gt;threshold的边界框bboxes留下</span></span><br><span class="line">        keep_index = scores &gt; threshold</span><br><span class="line">        class_max_index = class_max_index[keep_index]</span><br><span class="line">        scores = scores[keep_index]</span><br><span class="line">        bboxes = bboxes[keep_index]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (2)排序top_k(默认为400)</span></span><br><span class="line">        class_max_index, scores, bboxes = self.bboxes_sort(class_max_index, scores, bboxes)</span><br><span class="line">        <span class="comment"># (3)NMS</span></span><br><span class="line">        class_max_index, scores, bboxes = self.bboxes_nms(class_max_index, scores, bboxes)</span><br><span class="line">        <span class="keyword">return</span> bboxes, scores, class_max_index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess_image</span><span class="params">(self,image, image_size=<span class="params">(<span class="number">416</span>, <span class="number">416</span>)</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        image_cp = np.copy(image).astype(np.float32)</span><br><span class="line">        image_rgb = cv2.cvtColor(image_cp, cv2.COLOR_BGR2RGB)</span><br><span class="line">        image_resized = cv2.resize(image_rgb, image_size)</span><br><span class="line">        image_normalized = image_resized.astype(np.float32) / <span class="number">225.0</span></span><br><span class="line">        image_expanded = np.expand_dims(image_normalized, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> image_expanded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    train part</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess_true_boxes</span><span class="params">(self,true_box,anchors,img_size = <span class="params">(<span class="number">416</span>,<span class="number">416</span>)</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param true_box:实际框的位置和类别,2D TENSOR:(batch,5)</span></span><br><span class="line"><span class="string">        :param anchors:anchors : 实际anchor boxes 的值，论文中使用了五个。[w,h]，都是相对于gird cell 的比值。</span></span><br><span class="line"><span class="string">                2d</span></span><br><span class="line"><span class="string">            第二个维度：[w,h]，w,h,都是相对于gird cell长宽的比值。</span></span><br><span class="line"><span class="string">           [1.08, 1.19], [3.42, 4.41], [6.63, 11.38], [9.42, 5.11], [16.62, 10.52]</span></span><br><span class="line"><span class="string">        :param img_size:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">           -detectors_mask: 取值是0或者1，这里的shape是[13,13,5,1]</span></span><br><span class="line"><span class="string">                第四个维度：0/1。1的就是用于预测改true boxes 的 anchor boxes</span></span><br><span class="line"><span class="string">           -matching_true_boxes:这里的shape是[13,13,5,5]。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        w,h = img_size</span><br><span class="line">        feature_w = w // <span class="number">32</span></span><br><span class="line">        feature_h = h // <span class="number">32</span></span><br><span class="line"></span><br><span class="line">        num_box_params = true_box.shape[<span class="number">1</span>]</span><br><span class="line">        detectors_mask = np.zeros((feature_h,feature_w,self.num_anchors,<span class="number">1</span>),dtype=np.float32)</span><br><span class="line">        matching_true_boxes = np.zeros((feature_h,feature_w,self.num_anchors,num_box_params),dtype=np.float32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> true_box:</span><br><span class="line">            <span class="comment">#提取类别信息，属于哪类</span></span><br><span class="line">            box_class = i[<span class="number">4</span>:<span class="number">5</span>]</span><br><span class="line">            <span class="comment">#换算成相对于gird cell的值</span></span><br><span class="line">            box = i[<span class="number">0</span>:<span class="number">4</span>] * np.array([feature_w, feature_h, feature_w, feature_h])</span><br><span class="line">            k = np.floor(box[<span class="number">1</span>]).astype(<span class="string">'int'</span>) <span class="comment">#y方向上属于第几个gird cell</span></span><br><span class="line">            j = np.floor(box[<span class="number">0</span>]).astype(<span class="string">'int'</span>) <span class="comment">#x方向上属于第几个gird cell</span></span><br><span class="line">            best_iou = <span class="number">0</span></span><br><span class="line">            best_anchor = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#计算anchor boxes 和 true boxes的iou ，一个true box一个best anchor</span></span><br><span class="line">            <span class="keyword">for</span> m,anchor <span class="keyword">in</span> enumerate(anchors):</span><br><span class="line">                box_maxes = box[<span class="number">2</span>:<span class="number">4</span>] / <span class="number">2.</span></span><br><span class="line">                box_mins = -box_maxes</span><br><span class="line">                anchor_maxes = (anchor / <span class="number">2.</span>)</span><br><span class="line">                anchor_mins = -anchor_maxes</span><br><span class="line"></span><br><span class="line">                intersect_mins = np.maximum(box_mins, anchor_mins)</span><br><span class="line">                intersect_maxes = np.minimum(box_maxes, anchor_maxes)</span><br><span class="line">                intersect_wh = np.maximum(intersect_maxes - intersect_mins, <span class="number">0.</span>)</span><br><span class="line">                intersect_area = intersect_wh[<span class="number">0</span>] * intersect_wh[<span class="number">1</span>]</span><br><span class="line">                box_area = box[<span class="number">2</span>] * box[<span class="number">3</span>]</span><br><span class="line">                anchor_area = anchor[<span class="number">0</span>] * anchor[<span class="number">1</span>]</span><br><span class="line">                iou = intersect_area / (box_area + anchor_area - intersect_area)</span><br><span class="line">                <span class="keyword">if</span> iou &gt; best_iou:</span><br><span class="line">                    best_iou = iou</span><br><span class="line">                    best_anchor = m</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> best_iou &gt; <span class="number">0</span>:</span><br><span class="line">                detectors_mask[k, j, best_anchor] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                adjusted_box = np.array(  <span class="comment">#找到最佳预测anchor boxes</span></span><br><span class="line">                    [</span><br><span class="line">                        box[<span class="number">0</span>] - j, box[<span class="number">1</span>] - k, <span class="comment">#'x,y都是相对于gird cell的位置，左上角[0,0]，右下角[1,1]'</span></span><br><span class="line">                        np.log(box[<span class="number">2</span>] / anchors[best_anchor][<span class="number">0</span>]), <span class="comment">#'对应实际框w,h和anchor boxes w,h的比值取log函数'</span></span><br><span class="line">                        np.log(box[<span class="number">3</span>] / anchors[best_anchor][<span class="number">1</span>]), box_class <span class="comment">#'class实际框的物体是属于第几类'</span></span><br><span class="line">                    ],</span><br><span class="line">                    dtype=np.float32)</span><br><span class="line">                matching_true_boxes[k, j, best_anchor] = adjusted_box</span><br><span class="line">            <span class="keyword">return</span> detectors_mask, matching_true_boxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">yolo_head</span><span class="params">(self,feature_map, anchors, num_classes)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        这个函数是输入yolo的输出层的特征，转化成相对于gird cell坐标的x,y，相对于gird cell长宽的w,h，</span></span><br><span class="line"><span class="string">        pred_confidence是判断否存在物体的概率，pred_class_prob是sofrmax后各个类别分别的概率</span></span><br><span class="line"><span class="string">        :param feats:  网络最后一层输出 [none,13,13,125]/[none,13,13,425]</span></span><br><span class="line"><span class="string">        :param anchors:[5,n]</span></span><br><span class="line"><span class="string">        :param num_classes:类别数</span></span><br><span class="line"><span class="string">        :return:x,y,w,h在loss function中计算iou，然后计算iou损失。</span></span><br><span class="line"><span class="string">                然后和pred_confidence计算confidence_loss，pred_class_prob用于计算classification_loss。</span></span><br><span class="line"><span class="string">                box_xy : 每张图片的每个gird cell中的每个pred_boxes中心点x,y相对于其所在gird cell的坐标值，左上顶点为[0,0],右下顶点为[1,1]。</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,2].</span></span><br><span class="line"><span class="string">                box_wh : 每张图片的每个gird cell中的每个pred_boxes的w,h都是相对于gird cell的比值</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,2].</span></span><br><span class="line"><span class="string">                box_confidence : 每张图片的每个gird cell中的每个pred_boxes的，判断是否存在可检测物体的概率。</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,1]。各维度信息同上。</span></span><br><span class="line"><span class="string">                box_class_pred : 每张图片的每个gird cell中的每个pred_boxes所框起来的各个类别分别的概率(经过了softmax)。</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,20/80]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">        anchors = tf.reshape(tf.constant(anchors,dtype=tf.float32),[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,self.num_anchors,<span class="number">2</span>])</span><br><span class="line">        num_gird_cell = tf.shape(feature_map)[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#[13,13]</span></span><br><span class="line">        conv_height_index = K.arange(<span class="number">0</span>,stop=num_gird_cell[<span class="number">0</span>])</span><br><span class="line">        conv_width_index = K.arange(<span class="number">0</span>,stop=num_gird_cell[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        conv_height_index = tf.tile(conv_height_index, [num_gird_cell[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        conv_width_index = tf.tile(</span><br><span class="line">            tf.expand_dims(conv_width_index, <span class="number">0</span>), [num_gird_cell[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        conv_width_index = K.flatten(K.transpose(conv_width_index))</span><br><span class="line">        conv_index = K.transpose(K.stack([conv_height_index,conv_width_index]))</span><br><span class="line">        conv_index = K.reshape(conv_index,[<span class="number">1</span>,num_gird_cell[<span class="number">0</span>],num_gird_cell[<span class="number">1</span>],<span class="number">1</span>,<span class="number">2</span>])<span class="comment">#[1，13，13，1，2]</span></span><br><span class="line">        conv_index = K.cast(conv_index,K.dtype(feature_map))</span><br><span class="line">        <span class="comment">#[[0,0][0,1]....[0,12],[1,0]...]</span></span><br><span class="line">        feature_map = K.reshape(feature_map,[<span class="number">-1</span>,num_gird_cell[<span class="number">0</span>],num_gird_cell[<span class="number">1</span>],self.num_anchors,self.num_class + <span class="number">5</span>])</span><br><span class="line">        num_gird_cell = K.cast(K.reshape(num_gird_cell,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]),K.dtype(feature_map))</span><br><span class="line"></span><br><span class="line">        box_xy = K.sigmoid(feature_map[...,:<span class="number">2</span>])</span><br><span class="line">        box_wh = K.exp(feature_map[...,<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">        confidence = K.sigmoid(feature_map[...,<span class="number">4</span>:<span class="number">5</span>])</span><br><span class="line">        cls_prob = K.softmax(feature_map[...,<span class="number">5</span>:])</span><br><span class="line"></span><br><span class="line">        xy = (box_xy + conv_index) / num_gird_cell</span><br><span class="line">        wh = box_wh * anchors / num_gird_cell</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xy,wh,confidence,cls_prob</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">             net,</span></span></span><br><span class="line"><span class="function"><span class="params">             true_boxes,</span></span></span><br><span class="line"><span class="function"><span class="params">             detectors_mask,</span></span></span><br><span class="line"><span class="function"><span class="params">             matching_true_boxes,</span></span></span><br><span class="line"><span class="function"><span class="params">             anchors,</span></span></span><br><span class="line"><span class="function"><span class="params">             num_classes)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        IOU损失，分类损失，坐标损失</span></span><br><span class="line"><span class="string">        confidence_loss：</span></span><br><span class="line"><span class="string">                共有845个anchor_boxes，与true_boxes匹配的用于预测pred_boxes，</span></span><br><span class="line"><span class="string">                未与true_boxes匹配的anchor_boxes用于预测background。在未与true_boxes匹配的anchor_boxes中，</span></span><br><span class="line"><span class="string">                与true_boxes的IOU小于0.6的被标记为background，这部分预测正确，未造成损失。</span></span><br><span class="line"><span class="string">                但未与true_boxes匹配的anchor_boxes中，若与true_boxes的IOU大于0.6的我们需要计算其损失，</span></span><br><span class="line"><span class="string">                因为它未能准确预测background，与true_boxes重合度过高，就是no_objects_loss。</span></span><br><span class="line"><span class="string">                而objects_loss则是与true_boxes匹配的anchor_boxes的预测误差。与YOLOv1不同的是修正系数的改变，</span></span><br><span class="line"><span class="string">                YOLOv1中no_objects_loss和objects_loss分别是0.5和1，而YOLOv2中则是1和5。</span></span><br><span class="line"><span class="string">        classification_loss:</span></span><br><span class="line"><span class="string">                经过softmax（）后，20维向量（数据集中分类种类为20种）的均方误差。</span></span><br><span class="line"><span class="string">        coordinates_loss：</span></span><br><span class="line"><span class="string">                计算x,y的误差由相对于整个图像（416x416）的offset坐标误差的均方改变为相对于gird cell的offset（这个offset是取sigmoid函数得到的处于（0,1）的值）坐标误差的均方。</span></span><br><span class="line"><span class="string">                也将修正系数由5改为了1 。计算w,h的误差由w,h平方根的差的均方误差变为了，</span></span><br><span class="line"><span class="string">                w,h与对true_boxes匹配的anchor_boxes的长宽的比值取log函数，</span></span><br><span class="line"><span class="string">                和YOLOv1的想法一样，对于相等的误差值，降低对大物体误差的惩罚，加大对小物体误差的惩罚。同时也将修正系数由5改为了1。</span></span><br><span class="line"><span class="string">        :param net:[batch_size,13,13,125],网络最后一层输出</span></span><br><span class="line"><span class="string">        :param true_boxes:实际框的位置和类别 [batch,5]</span></span><br><span class="line"><span class="string">        :param detectors_mask:取值是0或者1，[ batch_size，13,13,5,1]</span></span><br><span class="line"><span class="string">                1的就是用于预测改true boxes 的 anchor boxes</span></span><br><span class="line"><span class="string">        :param matching_true_boxes:[-1,13,13,5,5]</span></span><br><span class="line"><span class="string">        :param anchors:</span></span><br><span class="line"><span class="string">        :param num_classes:20</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line">        xy, wh, confidence, cls_prob = self.yolo_head(net,anchors,num_classes)</span><br><span class="line">        shape = tf.shape(net)</span><br><span class="line">        feature_map = tf.reshape(net,[<span class="number">-1</span>,shape[<span class="number">1</span>],shape[<span class="number">2</span>],self.num_anchors,num_classes + <span class="number">5</span>])</span><br><span class="line">        <span class="comment">#用于和matching_true_boxes计算坐标损失</span></span><br><span class="line">        pred_box = tf.concat([K.sigmoid(feature_map[...,<span class="number">0</span>:<span class="number">2</span>]),feature_map[...,<span class="number">2</span>:<span class="number">4</span>]],<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        pred_xy = tf.to_float(tf.expand_dims(xy,<span class="number">4</span>))<span class="comment">#[-1,13,13,5,2]--&gt;[-1,13,13,5,1,2]</span></span><br><span class="line">        pred_wh = tf.to_float(tf.expand_dims(wh,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        pred_min = tf.to_float(pred_xy - pred_wh / <span class="number">2.0</span>)</span><br><span class="line">        pred_max = tf.to_float(pred_xy + pred_wh / <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">        true_box_shape = K.shape(true_boxes)</span><br><span class="line">        print(true_box_shape)</span><br><span class="line">        true_boxes = K.reshape(true_boxes,[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,true_box_shape[<span class="number">1</span>], <span class="number">5</span>])</span><br><span class="line">        <span class="comment">#[-1,1,1,1,-1,5],batch, conv_height, conv_width, num_anchors, num_true_boxes, box_params'</span></span><br><span class="line"></span><br><span class="line">        true_xy = tf.to_float(true_boxes[...,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        true_wh = tf.to_float(true_boxes[...,<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">        true_min = tf.to_float(true_xy - true_wh / <span class="number">2.0</span>)</span><br><span class="line">        true_max = tf.to_float(true_xy + true_wh / <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#计算所以abox和tbox的iou</span></span><br><span class="line">        intersect_mins = tf.maximum(pred_min, true_min)</span><br><span class="line">        intersect_maxes = tf.minimum(pred_max, true_max)</span><br><span class="line">        intersect_wh = tf.maximum(intersect_maxes - intersect_mins, <span class="number">0.</span>)</span><br><span class="line">        intersect_areas = tf.to_float(intersect_wh[..., <span class="number">0</span>] * intersect_wh[..., <span class="number">1</span>])</span><br><span class="line">        pred_areas = pred_wh[..., <span class="number">0</span>] * pred_wh[..., <span class="number">1</span>]</span><br><span class="line">        true_areas = true_wh[..., <span class="number">0</span>] * true_wh[..., <span class="number">1</span>]</span><br><span class="line">        union_areas = pred_areas + true_areas - intersect_areas</span><br><span class="line">        iou_scores = intersect_areas / union_areas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#可能会有多个tbox落在同一个cell ，只去iou最大的</span></span><br><span class="line">        <span class="comment"># tf.argmax(iou_scores,4)</span></span><br><span class="line">        best_ious = K.max(iou_scores, axis=<span class="number">4</span>)</span><br><span class="line">        best_ious = tf.expand_dims(best_ious,axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#选出IOU大于0.6的，若IOU小于0.6的被标记为background，</span></span><br><span class="line">        obj_dec = tf.cast(best_ious &gt; <span class="number">0.6</span>,dtype=K.dtype(best_ious))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#IOU loss</span></span><br><span class="line">        no_obj_w = (self.no_object_scale * obj_dec * detectors_mask) <span class="comment">#</span></span><br><span class="line">        no_obj_loss = no_obj_w * tf.square(-confidence)</span><br><span class="line">        obj_loss = self.object_scale * detectors_mask * tf.square(<span class="number">1</span> - confidence)</span><br><span class="line">        confidence_loss = no_obj_loss + obj_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#class loss</span></span><br><span class="line">        match_cls = tf.cast(matching_true_boxes[...,<span class="number">4</span>],dtype=tf.int32)</span><br><span class="line">        match_cls = tf.one_hot(match_cls,num_classes)</span><br><span class="line"></span><br><span class="line">        class_loss = (self.class_scale * detectors_mask * tf.square(match_cls - cls_prob))</span><br><span class="line"></span><br><span class="line">        <span class="comment">#坐标loss</span></span><br><span class="line">        match_box = matching_true_boxes[...,<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">        coord_loss = self.coordinates_scale * detectors_mask * tf.square(match_box - pred_box)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        confidence_loss_sum = K.sum(confidence_loss)</span><br><span class="line">        class_loss_sum = K.sum(class_loss)</span><br><span class="line">        coord_loss_sum = K.sum(coord_loss)</span><br><span class="line">        all_loss = <span class="number">0.5</span> * (confidence_loss_sum + class_loss_sum + coord_loss_sum)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> all_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_detection</span><span class="params">(self,im, bboxes, scores, cls_inds, labels)</span>:</span></span><br><span class="line"></span><br><span class="line">        imgcv = np.copy(im)</span><br><span class="line">        h, w, _ = imgcv.shape</span><br><span class="line">        <span class="keyword">for</span> i, box <span class="keyword">in</span> enumerate(bboxes):</span><br><span class="line">            cls_indx = cls_inds[i]</span><br><span class="line">            thick = int((h + w) / <span class="number">1000</span>)</span><br><span class="line">            cv2.rectangle(imgcv, (box[<span class="number">0</span>], box[<span class="number">1</span>]), (box[<span class="number">2</span>], box[<span class="number">3</span>]), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thick)</span><br><span class="line">            print(<span class="string">"[x, y, w, h]=[%d, %d, %d, %d]"</span> % (box[<span class="number">0</span>], box[<span class="number">1</span>], box[<span class="number">2</span>], box[<span class="number">3</span>]))</span><br><span class="line">            mess = <span class="string">'%s: %.3f'</span> % (labels[cls_indx], scores[i])</span><br><span class="line">            text_loc = (box[<span class="number">0</span>], box[<span class="number">1</span>] - <span class="number">10</span>)</span><br><span class="line">            cv2.putText(imgcv, mess, text_loc, cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1e-3</span> * h, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thick)</span><br><span class="line">        <span class="comment"># return imgcv</span></span><br><span class="line">        cv2.imshow(<span class="string">"detection_results"</span>, imgcv)  <span class="comment"># 显示图片</span></span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#v1 - v2 , v2 - v3</span></span><br><span class="line"><span class="comment"># 1、加入BN层 批次归一化   input --&gt; 均值为0方差为1正太分布</span></span><br><span class="line"><span class="comment">#    ---》白化  --&gt; 对‘input 变换到 均值0单位方差内的分布</span></span><br><span class="line"><span class="comment"># #使用：input * w --&gt;bn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    network = yolov2(<span class="string">'coco'</span>)</span><br><span class="line"></span><br><span class="line">    net,x = network.darknet()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    ckpt_path = <span class="string">'./model/v2/yolo2_coco.ckpt'</span></span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    saver.restore(sess,ckpt_path)</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(<span class="string">'./test/3.jpg'</span>)</span><br><span class="line">    <span class="comment">#shape = img.shape[:2]</span></span><br><span class="line">    img_r = network.preprocess_image(img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bboxes, obj_probs, class_probs = network.decode(net)</span><br><span class="line">    bboxes, obj_probs, class_probs = sess.run([bboxes, obj_probs, class_probs],feed_dict=&#123;x:img_r&#125;)</span><br><span class="line">    bboxes, scores, class_max_index = network.postprocess(bboxes, obj_probs, class_probs)</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    print(<span class="string">'置信度：'</span>,end=<span class="string">""</span>)</span><br><span class="line">    print(scores)</span><br><span class="line">    print(<span class="string">'类别信息：'</span>,end=<span class="string">""</span>)</span><br><span class="line">    print(class_max_index)</span><br><span class="line"></span><br><span class="line">    img_detection = network.draw_detection(cv2.resize(img,(<span class="number">416</span>,<span class="number">416</span>)), bboxes, scores, class_max_index, network.CLASS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> yi、</span></span><br><span class="line"><span class="string">    第一大层  :conv maxpoiling</span></span><br><span class="line"><span class="string">    第2大层:3个卷积，maxpool</span></span><br><span class="line"><span class="string">    3:3个卷积，maxpool</span></span><br><span class="line"><span class="string">    4：3卷积，maxpool</span></span><br><span class="line"><span class="string">    5:5卷积，maxpool   -----------</span></span><br><span class="line"><span class="string">    6:5卷积                       | + add</span></span><br><span class="line"><span class="string">    7三个卷积---------------------</span></span><br><span class="line"><span class="string">    conv  </span></span><br><span class="line"><span class="string"> er:</span></span><br><span class="line"><span class="string">    ahchors生成和decode</span></span><br><span class="line"><span class="string"> san:</span></span><br><span class="line"><span class="string">    裁剪、选出前TOP_K，NMS </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p> </p><p><font color=red>运行结果：</font></p><h4 id="测试1"><a class="markdownIt-Anchor" href="#测试1"></a> 测试1：</h4><p>对同一张测试图片分别做V1和V2版本的目标检测，对比图如下。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/11/U1Zy9J.jpg" alt="图8：YOLO V1图片检测结果" style="zoom: 60%;" /><p> </p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/UG9A2t.png" alt="图9：YOLO V2图片检测结果" style="zoom:63%;" /><p>从对比图中可以看出：在YOLO V1中，对于本张测试图片，程序只检测出了人和猫两个物体，并且它们的置信度只有0.249和0.504；而在V2版本中，不仅检测到了更多的物体，人和猫的检测置信度也高达0.778和0.797，说明准确率也在提高。此外，程序在显示多个boungding box的同时也输出了他们的坐标以及大小信息。</p><p> </p><h4 id="测试2"><a class="markdownIt-Anchor" href="#测试2"></a> 测试2：</h4><p>当然，在V1中有一个失败的测试，即那个行人、车辆都很密集且都尺寸比较小的图片，很遗憾在V2的版本中也没有检测到任何物体。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/11/U1mTOI.jpg" alt="图10：YOLO V2图片检测结果（失败）" style="zoom:63%;" /><p> </p><h4 id="测试3"><a class="markdownIt-Anchor" href="#测试3"></a> 测试3：</h4><p>最后，以我的女神tsy与她剧组的合照作为测试的结尾，效果还是很好的。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/12/UG9ExP.png" alt="图11：YOLO V2图片检测结果（成功）" /></p><p> </p><p> </p><h2 id="42-基于视频的目标检测"><a class="markdownIt-Anchor" href="#42-基于视频的目标检测"></a> 4.2 基于视频的目标检测</h2><p><font color=red>yolo_video</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> cv2 <span class="keyword">as</span> cv2</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaky_relu</span><span class="params">(x)</span>:</span>    <span class="comment">#leaky relu激活函数，leaky_relu激活函数一般用在比较深层次神经网络中</span></span><br><span class="line">    <span class="keyword">return</span> tf.maximum(<span class="number">0.1</span>*x,x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yolov2</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,cls_name)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.anchor_size = [[<span class="number">0.57273</span>, <span class="number">0.677385</span>], <span class="comment">#coco</span></span><br><span class="line">                           [<span class="number">1.87446</span>, <span class="number">2.06253</span>],</span><br><span class="line">                           [<span class="number">3.33843</span>, <span class="number">5.47434</span>],</span><br><span class="line">                           [<span class="number">7.88282</span>, <span class="number">3.52778</span>],</span><br><span class="line">                           [<span class="number">9.77052</span>, <span class="number">9.16828</span>]]</span><br><span class="line">        self.num_anchors = len(self.anchor_size)</span><br><span class="line">        <span class="keyword">if</span> cls_name == <span class="string">'coco'</span>:</span><br><span class="line">            self.CLASS = [<span class="string">'person'</span>, <span class="string">'bicycle'</span>, <span class="string">'car'</span>, <span class="string">'motorbike'</span>, <span class="string">'aeroplane'</span>, <span class="string">'bus'</span>, <span class="string">'train'</span>,</span><br><span class="line">                          <span class="string">'truck'</span>, <span class="string">'boat'</span>, <span class="string">'traffic light'</span>, <span class="string">'fire hydrant'</span>, <span class="string">'stop sign'</span>,</span><br><span class="line">                          <span class="string">'parking meter'</span>, <span class="string">'bench'</span>, <span class="string">'bird'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'horse'</span>, <span class="string">'sheep'</span>,</span><br><span class="line">                          <span class="string">'cow'</span>, <span class="string">'elephant'</span>, <span class="string">'bear'</span>, <span class="string">'zebra'</span>, <span class="string">'giraffe'</span>, <span class="string">'backpack'</span>, <span class="string">'umbrella'</span>,</span><br><span class="line">                          <span class="string">'handbag'</span>, <span class="string">'tie'</span>, <span class="string">'suitcase'</span>, <span class="string">'frisbee'</span>, <span class="string">'skis'</span>, <span class="string">'snowboard'</span>, <span class="string">'sports ball'</span>,</span><br><span class="line">                          <span class="string">'kite'</span>, <span class="string">'baseball bat'</span>, <span class="string">'baseball glove'</span>, <span class="string">'skateboard'</span>, <span class="string">'surfboard'</span>,</span><br><span class="line">                          <span class="string">'tennis racket'</span>, <span class="string">'bottle'</span>, <span class="string">'wine glass'</span>, <span class="string">'cup'</span>, <span class="string">'fork'</span>, <span class="string">'knife'</span>, <span class="string">'spoon'</span>,</span><br><span class="line">                          <span class="string">'bowl'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'sandwich'</span>, <span class="string">'orange'</span>, <span class="string">'broccoli'</span>, <span class="string">'carrot'</span>,</span><br><span class="line">                          <span class="string">'hot dog'</span>, <span class="string">'pizza'</span>, <span class="string">'donut'</span>, <span class="string">'cake'</span>, <span class="string">'chair'</span>, <span class="string">'sofa'</span>, <span class="string">'pottedplant'</span>,</span><br><span class="line">                          <span class="string">'bed'</span>, <span class="string">'diningtable'</span>, <span class="string">'toilet'</span>, <span class="string">'tvmonitor'</span>, <span class="string">'laptop'</span>, <span class="string">'mouse'</span>,</span><br><span class="line">                          <span class="string">'remote'</span>, <span class="string">'keyboard'</span>, <span class="string">'cell phone'</span>, <span class="string">'microwave'</span>, <span class="string">'oven'</span>, <span class="string">'toaster'</span>,</span><br><span class="line">                          <span class="string">'sink'</span>, <span class="string">'refrigerator'</span>, <span class="string">'book'</span>, <span class="string">'clock'</span>, <span class="string">'vase'</span>, <span class="string">'scissors'</span>, <span class="string">'teddy bear'</span>,</span><br><span class="line">                          <span class="string">'hair drier'</span>, <span class="string">'toothbrush'</span>]  <span class="comment">#coco</span></span><br><span class="line">            self.f_num = <span class="number">425</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.CLASS = [<span class="string">"aeroplane"</span>, <span class="string">"bicycle"</span>, <span class="string">"bird"</span>, <span class="string">"boat"</span>, <span class="string">"bottle"</span>, <span class="string">"bus"</span>, <span class="string">"car"</span>, <span class="string">"cat"</span>, <span class="string">"chair"</span>, <span class="string">"cow"</span>, <span class="string">"diningtable"</span>, <span class="string">"dog"</span>, <span class="string">"horse"</span>, <span class="string">"motorbike"</span>, <span class="string">"person"</span>, <span class="string">"pottedplant"</span>, <span class="string">"sheep"</span>, <span class="string">"sofa"</span>, <span class="string">"train"</span>, <span class="string">"tvmonitor"</span>]</span><br><span class="line">            self.f_num = <span class="number">125</span></span><br><span class="line"></span><br><span class="line">        self.num_class = len(self.CLASS)</span><br><span class="line">        self.feature_map_size = (<span class="number">13</span>,<span class="number">13</span>)</span><br><span class="line">        self.object_scale = <span class="number">5.</span> <span class="comment">#'物体位于gird cell时计算置信度的修正系数'</span></span><br><span class="line">        self.no_object_scale = <span class="number">1.</span>   <span class="comment">#'物体位于gird cell时计算置信度的修正系数'</span></span><br><span class="line">        self.class_scale = <span class="number">1.</span>  <span class="comment">#'计算分类损失的修正系数'</span></span><br><span class="line">        self.coordinates_scale = <span class="number">1.</span>  <span class="comment">#'计算坐标损失的修正系数'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  NewWork</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(self,x,filters_num,filters_size,pad_size=<span class="number">0</span>,stride=<span class="number">1</span>,batch_normalize=True,activation=leaky_relu,use_bias=False,name=<span class="string">'conv2d'</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pad_size &gt; <span class="number">0</span>:</span><br><span class="line">            x = tf.pad(x,[[<span class="number">0</span>,<span class="number">0</span>],[pad_size,pad_size],[pad_size,pad_size],[<span class="number">0</span>,<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">        out = tf.layers.conv2d(x,filters=filters_num,kernel_size=filters_size,strides=stride,padding=<span class="string">'VALID'</span>,activation=<span class="literal">None</span>,use_bias=use_bias,name=name)</span><br><span class="line">        <span class="comment"># BN应该在卷积层conv和激活函数activation之间,</span></span><br><span class="line">        <span class="comment"># (后面有BN层的conv就不用偏置bias，并激活函数activation在后)</span></span><br><span class="line">        <span class="keyword">if</span> batch_normalize:</span><br><span class="line">            out = tf.layers.batch_normalization(out,axis=<span class="number">-1</span>,momentum=<span class="number">0.9</span>,training=<span class="literal">False</span>,name=name+<span class="string">'_bn'</span>)</span><br><span class="line">        <span class="keyword">if</span> activation:</span><br><span class="line">            out = activation(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxpool</span><span class="params">(self,x, size=<span class="number">2</span>, stride=<span class="number">2</span>, name=<span class="string">'maxpool'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.layers.max_pooling2d(x, pool_size=size, strides=stride,name=name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># passthrough</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">passthrough</span><span class="params">(self,x, stride)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.space_to_depth(x, block_size=stride)</span><br><span class="line">        <span class="comment">#或者tf.extract_image_patches</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">darknet</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        x = tf.placeholder(dtype=tf.float32,shape=[<span class="literal">None</span>,<span class="number">416</span>,<span class="number">416</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(x, filters_num=<span class="number">32</span>, filters_size=<span class="number">3</span>, pad_size=<span class="number">1</span>,</span><br><span class="line">                     name=<span class="string">'conv1'</span>)</span><br><span class="line">        net = self.maxpool(net, size=<span class="number">2</span>, stride=<span class="number">2</span>, name=<span class="string">'pool1'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">64</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv2'</span>)</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool2'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">128</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv3_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv3_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">128</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv3_3'</span>)</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool3'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv4_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">128</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv4_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv4_3'</span>)</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool4'</span>)</span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv5_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv5_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv5_3'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv5_4'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv5_5'</span>)  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这一层特征图，要进行后面passthrough</span></span><br><span class="line">        shortcut = net</span><br><span class="line">        net = self.maxpool(net, <span class="number">2</span>, <span class="number">2</span>, name=<span class="string">'pool5'</span>)  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv6_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv6_2'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv6_3'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">512</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv6_4'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv6_5'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练检测网络时去掉了分类网络的网络最后一个卷积层，</span></span><br><span class="line">        <span class="comment"># 在后面增加了三个卷积核尺寸为3 * 3，卷积核数量为1024的卷积层，并在这三个卷积层的最后一层后面跟一个卷积核尺寸为1 * 1</span></span><br><span class="line">        <span class="comment"># 的卷积层，卷积核数量是（B * （5 + C））。</span></span><br><span class="line">        <span class="comment"># 对于VOC数据集，卷积层输入图像尺寸为416 * 416</span></span><br><span class="line">        <span class="comment"># 时最终输出是13 * 13</span></span><br><span class="line">        <span class="comment"># 个栅格，每个栅格预测5种boxes大小，每个box包含5个坐标值和20个条件类别概率，所以输出维度是13 * 13 * 5 * （5 + 20）= 13 * 13 * 125。</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># 检测网络加入了passthrough layer，从最后一个输出为26 * 26 * 512</span></span><br><span class="line">        <span class="comment"># 的卷积层连接到新加入的三个卷积核尺寸为3 * 3</span></span><br><span class="line">        <span class="comment"># 的卷积层的第二层，使模型有了细粒度特征。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面这部分主要是training for detection</span></span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv7_1'</span>)</span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv7_2'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># shortcut增加了一个中间卷积层，先采用64个1*1卷积核进行卷积，然后再进行passthrough处理</span></span><br><span class="line">        <span class="comment"># 这样26*26*512 -&gt; 26*26*64 -&gt; 13*13*256的特征图</span></span><br><span class="line">        shortcut = self.conv2d(shortcut, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, name=<span class="string">'conv_shortcut'</span>)</span><br><span class="line">        shortcut = self.passthrough(shortcut, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接之后，变成13*13*（1024+256）</span></span><br><span class="line">        net = tf.concat([shortcut, net],axis=<span class="number">-1</span>)  <span class="comment"># channel整合到一起，concatenated with the original features，passthrough层与ResNet网络的shortcut类似，以前面更高分辨率的特征图为输入，然后将其连接到后面的低分辨率特征图上，</span></span><br><span class="line">        net = self.conv2d(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>, name=<span class="string">'conv8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># detection layer: 最后用一个1*1卷积去调整channel，该层没有BN层和激活函数，变成: S*S*(B*(5+C))，在这里为：13*13*425</span></span><br><span class="line">        output = self.conv2d(net, filters_num=self.f_num, filters_size=<span class="number">1</span>, batch_normalize=<span class="literal">False</span>, activation=<span class="literal">None</span>,</span><br><span class="line">                        use_bias=<span class="literal">True</span>, name=<span class="string">'conv_dec'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output,x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成anchor  ---&gt;  decode</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self,net)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.anchor_size = tf.constant(self.anchor_size , dtype=tf.float32)</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        net = tf.reshape(net, [<span class="number">-1</span>, <span class="number">13</span> * <span class="number">13</span>, self.num_anchors, self.num_class + <span class="number">5</span>]) <span class="comment">#[batch,169,5,85]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 偏移量、置信度、类别</span></span><br><span class="line">        <span class="comment">#中心坐标相对于该cell坐上角的偏移量，sigmoid函数归一化到(0,1)</span></span><br><span class="line">        xy_offset = tf.nn.sigmoid(net[:, :, :, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        wh_offset = tf.exp(net[:, :, :, <span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">        obj_probs = tf.nn.sigmoid(net[:, :, :, <span class="number">4</span>])  <span class="comment"># 置信度,这个东西就是相当于v1中的confidence</span></span><br><span class="line">        class_probs = tf.nn.softmax(net[:, :, :, <span class="number">5</span>:])  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在feature map对应坐标生成anchors，每个坐标五个</span></span><br><span class="line">        height_index = tf.range(self.feature_map_size[<span class="number">0</span>], dtype=tf.float32)</span><br><span class="line">        width_index = tf.range(self.feature_map_size[<span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">        x_cell, y_cell = tf.meshgrid(height_index, width_index)</span><br><span class="line">        x_cell = tf.reshape(x_cell, [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>])  <span class="comment"># 和上面[H*W,num_anchors,num_class+5]对应</span></span><br><span class="line">        y_cell = tf.reshape(y_cell, [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># decode</span></span><br><span class="line">        bbox_x = (x_cell + xy_offset[:, :, :, <span class="number">0</span>]) / <span class="number">13</span></span><br><span class="line">        bbox_y = (y_cell + xy_offset[:, :, :, <span class="number">1</span>]) / <span class="number">13</span></span><br><span class="line">        bbox_w = (self.anchor_size[:, <span class="number">0</span>] * wh_offset[:, :, :, <span class="number">0</span>]) / <span class="number">13</span></span><br><span class="line">        bbox_h = (self.anchor_size[:, <span class="number">1</span>] * wh_offset[:, :, :, <span class="number">1</span>]) / <span class="number">13</span></span><br><span class="line"></span><br><span class="line">        bboxes = tf.stack([bbox_x - bbox_w / <span class="number">2</span>, bbox_y - bbox_h / <span class="number">2</span>, bbox_x + bbox_w / <span class="number">2</span>, bbox_y + bbox_h / <span class="number">2</span>],</span><br><span class="line">                          axis=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bboxes, obj_probs, class_probs</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将边界框超出整张图片(0,0)—(415,415)的部分cut掉</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_cut</span><span class="params">(self,bbox_min_max, bboxes)</span>:</span></span><br><span class="line">        bboxes = np.copy(bboxes)</span><br><span class="line">        bboxes = np.transpose(bboxes)</span><br><span class="line">        bbox_min_max = np.transpose(bbox_min_max)</span><br><span class="line">        <span class="comment"># cut the box</span></span><br><span class="line">        bboxes[<span class="number">0</span>] = np.maximum(bboxes[<span class="number">0</span>], bbox_min_max[<span class="number">0</span>])  <span class="comment"># xmin</span></span><br><span class="line">        bboxes[<span class="number">1</span>] = np.maximum(bboxes[<span class="number">1</span>], bbox_min_max[<span class="number">1</span>])  <span class="comment"># ymin</span></span><br><span class="line">        bboxes[<span class="number">2</span>] = np.minimum(bboxes[<span class="number">2</span>], bbox_min_max[<span class="number">2</span>])  <span class="comment"># xmax</span></span><br><span class="line">        bboxes[<span class="number">3</span>] = np.minimum(bboxes[<span class="number">3</span>], bbox_min_max[<span class="number">3</span>])  <span class="comment"># ymax</span></span><br><span class="line">        bboxes = np.transpose(bboxes)</span><br><span class="line">        <span class="keyword">return</span> bboxes</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_sort</span><span class="params">(self,classes, scores, bboxes, top_k=<span class="number">400</span>)</span>:</span></span><br><span class="line">        index = np.argsort(-scores)</span><br><span class="line">        classes = classes[index][:top_k]</span><br><span class="line">        scores = scores[index][:top_k]</span><br><span class="line">        bboxes = bboxes[index][:top_k]</span><br><span class="line">        <span class="keyword">return</span> classes, scores, bboxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_iou</span><span class="params">(self,bboxes1, bboxes2)</span>:</span></span><br><span class="line">        bboxes1 = np.transpose(bboxes1)</span><br><span class="line">        bboxes2 = np.transpose(bboxes2)</span><br><span class="line"></span><br><span class="line">        int_ymin = np.maximum(bboxes1[<span class="number">0</span>], bboxes2[<span class="number">0</span>])</span><br><span class="line">        int_xmin = np.maximum(bboxes1[<span class="number">1</span>], bboxes2[<span class="number">1</span>])</span><br><span class="line">        int_ymax = np.minimum(bboxes1[<span class="number">2</span>], bboxes2[<span class="number">2</span>])</span><br><span class="line">        int_xmax = np.minimum(bboxes1[<span class="number">3</span>], bboxes2[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        int_h = np.maximum(int_ymax - int_ymin, <span class="number">0.</span>)</span><br><span class="line">        int_w = np.maximum(int_xmax - int_xmin, <span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算IOU</span></span><br><span class="line">        int_vol = int_h * int_w  <span class="comment"># 交集面积</span></span><br><span class="line">        vol1 = (bboxes1[<span class="number">2</span>] - bboxes1[<span class="number">0</span>]) * (bboxes1[<span class="number">3</span>] - bboxes1[<span class="number">1</span>])  <span class="comment"># bboxes1面积</span></span><br><span class="line">        vol2 = (bboxes2[<span class="number">2</span>] - bboxes2[<span class="number">0</span>]) * (bboxes2[<span class="number">3</span>] - bboxes2[<span class="number">1</span>])  <span class="comment"># bboxes2面积</span></span><br><span class="line">        IOU = int_vol / (vol1 + vol2 - int_vol)  <span class="comment"># IOU=交集/并集</span></span><br><span class="line">        <span class="keyword">return</span> IOU</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NMS，或者用tf.image.non_max_suppression</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bboxes_nms</span><span class="params">(self,classes, scores, bboxes, nms_threshold=<span class="number">0.2</span>)</span>:</span></span><br><span class="line">        keep_bboxes = np.ones(scores.shape, dtype=np.bool)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(scores.size - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> keep_bboxes[i]:</span><br><span class="line">                overlap = self.bboxes_iou(bboxes[i], bboxes[(i + <span class="number">1</span>):])</span><br><span class="line">                keep_overlap = np.logical_or(overlap &lt; nms_threshold,</span><br><span class="line">                                             classes[(i + <span class="number">1</span>):] != classes[i])  <span class="comment"># IOU没有超过0.5或者是不同的类则保存下来</span></span><br><span class="line">                keep_bboxes[(i + <span class="number">1</span>):] = np.logical_and(keep_bboxes[(i + <span class="number">1</span>):], keep_overlap)</span><br><span class="line"></span><br><span class="line">        idxes = np.where(keep_bboxes)</span><br><span class="line">        <span class="keyword">return</span> classes[idxes], scores[idxes], bboxes[idxes]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postprocess</span><span class="params">(self,bboxes, obj_probs, class_probs, image_shape=<span class="params">(<span class="number">416</span>, <span class="number">416</span>)</span>, threshold=<span class="number">0.5</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        bboxes = np.reshape(bboxes, [<span class="number">-1</span>, <span class="number">4</span>])</span><br><span class="line">        <span class="comment"># 将所有box还原成图片中真实的位置</span></span><br><span class="line">        bboxes[:, <span class="number">0</span>:<span class="number">1</span>] *= float(image_shape[<span class="number">1</span>])</span><br><span class="line">        bboxes[:, <span class="number">1</span>:<span class="number">2</span>] *= float(image_shape[<span class="number">0</span>])</span><br><span class="line">        bboxes[:, <span class="number">2</span>:<span class="number">3</span>] *= float(image_shape[<span class="number">1</span>])</span><br><span class="line">        bboxes[:, <span class="number">3</span>:<span class="number">4</span>] *= float(image_shape[<span class="number">0</span>])</span><br><span class="line">        bboxes = bboxes.astype(np.int32)  <span class="comment"># 转int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bbox_min_max = [<span class="number">0</span>, <span class="number">0</span>, image_shape[<span class="number">1</span>] - <span class="number">1</span>, image_shape[<span class="number">0</span>] - <span class="number">1</span>]</span><br><span class="line">        bboxes = self.bboxes_cut(bbox_min_max, bboxes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj_probs = np.reshape(obj_probs, [<span class="number">-1</span>])  <span class="comment"># 13*13*5</span></span><br><span class="line">        class_probs = np.reshape(class_probs, [len(obj_probs), <span class="number">-1</span>])  <span class="comment"># (13*13*5,80)</span></span><br><span class="line">        class_max_index = np.argmax(class_probs, axis=<span class="number">1</span>)  <span class="comment"># max类别概率对应的index</span></span><br><span class="line">        class_probs = class_probs[np.arange(len(obj_probs)), class_max_index]</span><br><span class="line">        scores = obj_probs * class_probs  <span class="comment"># 置信度*max类别概率=类别置信度scores</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 类别置信度scores&gt;threshold的边界框bboxes留下</span></span><br><span class="line">        keep_index = scores &gt; threshold</span><br><span class="line">        class_max_index = class_max_index[keep_index]</span><br><span class="line">        scores = scores[keep_index]</span><br><span class="line">        bboxes = bboxes[keep_index]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (2)排序top_k(默认为400)</span></span><br><span class="line">        class_max_index, scores, bboxes = self.bboxes_sort(class_max_index, scores, bboxes)</span><br><span class="line">        <span class="comment"># (3)NMS</span></span><br><span class="line">        class_max_index, scores, bboxes = self.bboxes_nms(class_max_index, scores, bboxes)</span><br><span class="line">        <span class="keyword">return</span> bboxes, scores, class_max_index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess_image</span><span class="params">(self,image, image_size=<span class="params">(<span class="number">416</span>, <span class="number">416</span>)</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        image_cp = np.copy(image).astype(np.float32)</span><br><span class="line">        image_rgb = cv2.cvtColor(image_cp, cv2.COLOR_BGR2RGB)</span><br><span class="line">        image_resized = cv2.resize(image_rgb, image_size)</span><br><span class="line">        image_normalized = image_resized.astype(np.float32) / <span class="number">225.0</span></span><br><span class="line">        image_expanded = np.expand_dims(image_normalized, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> image_expanded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    train part</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess_true_boxes</span><span class="params">(self,true_box,anchors,img_size = <span class="params">(<span class="number">416</span>,<span class="number">416</span>)</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param true_box:实际框的位置和类别,2D TENSOR:(batch,5)</span></span><br><span class="line"><span class="string">        :param anchors:anchors : 实际anchor boxes 的值，论文中使用了五个。[w,h]，都是相对于gird cell 的比值。</span></span><br><span class="line"><span class="string">                2d</span></span><br><span class="line"><span class="string">            第二个维度：[w,h]，w,h,都是相对于gird cell长宽的比值。</span></span><br><span class="line"><span class="string">           [1.08, 1.19], [3.42, 4.41], [6.63, 11.38], [9.42, 5.11], [16.62, 10.52]</span></span><br><span class="line"><span class="string">        :param img_size:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">           -detectors_mask: 取值是0或者1，这里的shape是[13,13,5,1]</span></span><br><span class="line"><span class="string">                第四个维度：0/1。1的就是用于预测改true boxes 的 anchor boxes</span></span><br><span class="line"><span class="string">           -matching_true_boxes:这里的shape是[13,13,5,5]。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        w,h = img_size</span><br><span class="line">        feature_w = w // <span class="number">32</span></span><br><span class="line">        feature_h = h // <span class="number">32</span></span><br><span class="line"></span><br><span class="line">        num_box_params = true_box.shape[<span class="number">1</span>]</span><br><span class="line">        detectors_mask = np.zeros((feature_h,feature_w,self.num_anchors,<span class="number">1</span>),dtype=np.float32)</span><br><span class="line">        matching_true_boxes = np.zeros((feature_h,feature_w,self.num_anchors,num_box_params),dtype=np.float32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> true_box:</span><br><span class="line">            <span class="comment">#提取类别信息，属于哪类</span></span><br><span class="line">            box_class = i[<span class="number">4</span>:<span class="number">5</span>]</span><br><span class="line">            <span class="comment">#换算成相对于gird cell的值</span></span><br><span class="line">            box = i[<span class="number">0</span>:<span class="number">4</span>] * np.array([feature_w, feature_h, feature_w, feature_h])</span><br><span class="line">            k = np.floor(box[<span class="number">1</span>]).astype(<span class="string">'int'</span>) <span class="comment">#y方向上属于第几个gird cell</span></span><br><span class="line">            j = np.floor(box[<span class="number">0</span>]).astype(<span class="string">'int'</span>) <span class="comment">#x方向上属于第几个gird cell</span></span><br><span class="line">            best_iou = <span class="number">0</span></span><br><span class="line">            best_anchor = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#计算anchor boxes 和 true boxes的iou ，一个true box一个best anchor</span></span><br><span class="line">            <span class="keyword">for</span> m,anchor <span class="keyword">in</span> enumerate(anchors):</span><br><span class="line">                box_maxes = box[<span class="number">2</span>:<span class="number">4</span>] / <span class="number">2.</span></span><br><span class="line">                box_mins = -box_maxes</span><br><span class="line">                anchor_maxes = (anchor / <span class="number">2.</span>)</span><br><span class="line">                anchor_mins = -anchor_maxes</span><br><span class="line"></span><br><span class="line">                intersect_mins = np.maximum(box_mins, anchor_mins)</span><br><span class="line">                intersect_maxes = np.minimum(box_maxes, anchor_maxes)</span><br><span class="line">                intersect_wh = np.maximum(intersect_maxes - intersect_mins, <span class="number">0.</span>)</span><br><span class="line">                intersect_area = intersect_wh[<span class="number">0</span>] * intersect_wh[<span class="number">1</span>]</span><br><span class="line">                box_area = box[<span class="number">2</span>] * box[<span class="number">3</span>]</span><br><span class="line">                anchor_area = anchor[<span class="number">0</span>] * anchor[<span class="number">1</span>]</span><br><span class="line">                iou = intersect_area / (box_area + anchor_area - intersect_area)</span><br><span class="line">                <span class="keyword">if</span> iou &gt; best_iou:</span><br><span class="line">                    best_iou = iou</span><br><span class="line">                    best_anchor = m</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> best_iou &gt; <span class="number">0</span>:</span><br><span class="line">                detectors_mask[k, j, best_anchor] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                adjusted_box = np.array(  <span class="comment">#找到最佳预测anchor boxes</span></span><br><span class="line">                    [</span><br><span class="line">                        box[<span class="number">0</span>] - j, box[<span class="number">1</span>] - k, <span class="comment">#'x,y都是相对于gird cell的位置，左上角[0,0]，右下角[1,1]'</span></span><br><span class="line">                        np.log(box[<span class="number">2</span>] / anchors[best_anchor][<span class="number">0</span>]), <span class="comment">#'对应实际框w,h和anchor boxes w,h的比值取log函数'</span></span><br><span class="line">                        np.log(box[<span class="number">3</span>] / anchors[best_anchor][<span class="number">1</span>]), box_class <span class="comment">#'class实际框的物体是属于第几类'</span></span><br><span class="line">                    ],</span><br><span class="line">                    dtype=np.float32)</span><br><span class="line">                matching_true_boxes[k, j, best_anchor] = adjusted_box</span><br><span class="line">            <span class="keyword">return</span> detectors_mask, matching_true_boxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">yolo_head</span><span class="params">(self,feature_map, anchors, num_classes)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        这个函数是输入yolo的输出层的特征，转化成相对于gird cell坐标的x,y，相对于gird cell长宽的w,h，</span></span><br><span class="line"><span class="string">        pred_confidence是判断否存在物体的概率，pred_class_prob是sofrmax后各个类别分别的概率</span></span><br><span class="line"><span class="string">        :param feats:  网络最后一层输出 [none,13,13,125]/[none,13,13,425]</span></span><br><span class="line"><span class="string">        :param anchors:[5,n]</span></span><br><span class="line"><span class="string">        :param num_classes:类别数</span></span><br><span class="line"><span class="string">        :return:x,y,w,h在loss function中计算iou，然后计算iou损失。</span></span><br><span class="line"><span class="string">                然后和pred_confidence计算confidence_loss，pred_class_prob用于计算classification_loss。</span></span><br><span class="line"><span class="string">                box_xy : 每张图片的每个gird cell中的每个pred_boxes中心点x,y相对于其所在gird cell的坐标值，左上顶点为[0,0],右下顶点为[1,1]。</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,2].</span></span><br><span class="line"><span class="string">                box_wh : 每张图片的每个gird cell中的每个pred_boxes的w,h都是相对于gird cell的比值</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,2].</span></span><br><span class="line"><span class="string">                box_confidence : 每张图片的每个gird cell中的每个pred_boxes的，判断是否存在可检测物体的概率。</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,1]。各维度信息同上。</span></span><br><span class="line"><span class="string">                box_class_pred : 每张图片的每个gird cell中的每个pred_boxes所框起来的各个类别分别的概率(经过了softmax)。</span></span><br><span class="line"><span class="string">                shape:[-1,13,13,5,20/80]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">        anchors = tf.reshape(tf.constant(anchors,dtype=tf.float32),[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,self.num_anchors,<span class="number">2</span>])</span><br><span class="line">        num_gird_cell = tf.shape(feature_map)[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#[13,13]</span></span><br><span class="line">        conv_height_index = K.arange(<span class="number">0</span>,stop=num_gird_cell[<span class="number">0</span>])</span><br><span class="line">        conv_width_index = K.arange(<span class="number">0</span>,stop=num_gird_cell[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        conv_height_index = tf.tile(conv_height_index, [num_gird_cell[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        conv_width_index = tf.tile(</span><br><span class="line">            tf.expand_dims(conv_width_index, <span class="number">0</span>), [num_gird_cell[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        conv_width_index = K.flatten(K.transpose(conv_width_index))</span><br><span class="line">        conv_index = K.transpose(K.stack([conv_height_index,conv_width_index]))</span><br><span class="line">        conv_index = K.reshape(conv_index,[<span class="number">1</span>,num_gird_cell[<span class="number">0</span>],num_gird_cell[<span class="number">1</span>],<span class="number">1</span>,<span class="number">2</span>])<span class="comment">#[1，13，13，1，2]</span></span><br><span class="line">        conv_index = K.cast(conv_index,K.dtype(feature_map))</span><br><span class="line">        <span class="comment">#[[0,0][0,1]....[0,12],[1,0]...]</span></span><br><span class="line">        feature_map = K.reshape(feature_map,[<span class="number">-1</span>,num_gird_cell[<span class="number">0</span>],num_gird_cell[<span class="number">1</span>],self.num_anchors,self.num_class + <span class="number">5</span>])</span><br><span class="line">        num_gird_cell = K.cast(K.reshape(num_gird_cell,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]),K.dtype(feature_map))</span><br><span class="line"></span><br><span class="line">        box_xy = K.sigmoid(feature_map[...,:<span class="number">2</span>])</span><br><span class="line">        box_wh = K.exp(feature_map[...,<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">        confidence = K.sigmoid(feature_map[...,<span class="number">4</span>:<span class="number">5</span>])</span><br><span class="line">        cls_prob = K.softmax(feature_map[...,<span class="number">5</span>:])</span><br><span class="line"></span><br><span class="line">        xy = (box_xy + conv_index) / num_gird_cell</span><br><span class="line">        wh = box_wh * anchors / num_gird_cell</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xy,wh,confidence,cls_prob</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">             net,</span></span></span><br><span class="line"><span class="function"><span class="params">             true_boxes,</span></span></span><br><span class="line"><span class="function"><span class="params">             detectors_mask,</span></span></span><br><span class="line"><span class="function"><span class="params">             matching_true_boxes,</span></span></span><br><span class="line"><span class="function"><span class="params">             anchors,</span></span></span><br><span class="line"><span class="function"><span class="params">             num_classes)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        IOU损失，分类损失，坐标损失</span></span><br><span class="line"><span class="string">        confidence_loss：</span></span><br><span class="line"><span class="string">                共有845个anchor_boxes，与true_boxes匹配的用于预测pred_boxes，</span></span><br><span class="line"><span class="string">                未与true_boxes匹配的anchor_boxes用于预测background。在未与true_boxes匹配的anchor_boxes中，</span></span><br><span class="line"><span class="string">                与true_boxes的IOU小于0.6的被标记为background，这部分预测正确，未造成损失。</span></span><br><span class="line"><span class="string">                但未与true_boxes匹配的anchor_boxes中，若与true_boxes的IOU大于0.6的我们需要计算其损失，</span></span><br><span class="line"><span class="string">                因为它未能准确预测background，与true_boxes重合度过高，就是no_objects_loss。</span></span><br><span class="line"><span class="string">                而objects_loss则是与true_boxes匹配的anchor_boxes的预测误差。与YOLOv1不同的是修正系数的改变，</span></span><br><span class="line"><span class="string">                YOLOv1中no_objects_loss和objects_loss分别是0.5和1，而YOLOv2中则是1和5。</span></span><br><span class="line"><span class="string">        classification_loss:</span></span><br><span class="line"><span class="string">                经过softmax（）后，20维向量（数据集中分类种类为20种）的均方误差。</span></span><br><span class="line"><span class="string">        coordinates_loss：</span></span><br><span class="line"><span class="string">                计算x,y的误差由相对于整个图像（416x416）的offset坐标误差的均方改变为相对于gird cell的offset（这个offset是取sigmoid函数得到的处于（0,1）的值）坐标误差的均方。</span></span><br><span class="line"><span class="string">                也将修正系数由5改为了1 。计算w,h的误差由w,h平方根的差的均方误差变为了，</span></span><br><span class="line"><span class="string">                w,h与对true_boxes匹配的anchor_boxes的长宽的比值取log函数，</span></span><br><span class="line"><span class="string">                和YOLOv1的想法一样，对于相等的误差值，降低对大物体误差的惩罚，加大对小物体误差的惩罚。同时也将修正系数由5改为了1。</span></span><br><span class="line"><span class="string">        :param net:[batch_size,13,13,125],网络最后一层输出</span></span><br><span class="line"><span class="string">        :param true_boxes:实际框的位置和类别 [batch,5]</span></span><br><span class="line"><span class="string">        :param detectors_mask:取值是0或者1，[ batch_size，13,13,5,1]</span></span><br><span class="line"><span class="string">                1的就是用于预测改true boxes 的 anchor boxes</span></span><br><span class="line"><span class="string">        :param matching_true_boxes:[-1,13,13,5,5]</span></span><br><span class="line"><span class="string">        :param anchors:</span></span><br><span class="line"><span class="string">        :param num_classes:20</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line">        xy, wh, confidence, cls_prob = self.yolo_head(net,anchors,num_classes)</span><br><span class="line">        shape = tf.shape(net)</span><br><span class="line">        feature_map = tf.reshape(net,[<span class="number">-1</span>,shape[<span class="number">1</span>],shape[<span class="number">2</span>],self.num_anchors,num_classes + <span class="number">5</span>])</span><br><span class="line">        <span class="comment">#用于和matching_true_boxes计算坐标损失</span></span><br><span class="line">        pred_box = tf.concat([K.sigmoid(feature_map[...,<span class="number">0</span>:<span class="number">2</span>]),feature_map[...,<span class="number">2</span>:<span class="number">4</span>]],axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        pred_xy = tf.to_float(tf.expand_dims(xy,<span class="number">4</span>))<span class="comment">#[-1,13,13,5,2]--&gt;[-1,13,13,5,1,2]</span></span><br><span class="line">        pred_wh = tf.to_float(tf.expand_dims(wh,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        pred_min = tf.to_float(pred_xy - pred_wh / <span class="number">2.0</span>)</span><br><span class="line">        pred_max = tf.to_float(pred_xy + pred_wh / <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">        true_box_shape = K.shape(true_boxes)</span><br><span class="line">        print(true_box_shape)</span><br><span class="line">        true_boxes = K.reshape(true_boxes,[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,true_box_shape[<span class="number">1</span>], <span class="number">5</span>])</span><br><span class="line">        <span class="comment">#[-1,1,1,1,-1,5],batch, conv_height, conv_width, num_anchors, num_true_boxes, box_params'</span></span><br><span class="line"></span><br><span class="line">        true_xy = tf.to_float(true_boxes[...,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        true_wh = tf.to_float(true_boxes[...,<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">        true_min = tf.to_float(true_xy - true_wh / <span class="number">2.0</span>)</span><br><span class="line">        true_max = tf.to_float(true_xy + true_wh / <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#计算所以abox和tbox的iou</span></span><br><span class="line">        intersect_mins = tf.maximum(pred_min, true_min)</span><br><span class="line">        intersect_maxes = tf.minimum(pred_max, true_max)</span><br><span class="line">        intersect_wh = tf.maximum(intersect_maxes - intersect_mins, <span class="number">0.</span>)</span><br><span class="line">        intersect_areas = tf.to_float(intersect_wh[..., <span class="number">0</span>] * intersect_wh[..., <span class="number">1</span>])</span><br><span class="line">        pred_areas = pred_wh[..., <span class="number">0</span>] * pred_wh[..., <span class="number">1</span>]</span><br><span class="line">        true_areas = true_wh[..., <span class="number">0</span>] * true_wh[..., <span class="number">1</span>]</span><br><span class="line">        union_areas = pred_areas + true_areas - intersect_areas</span><br><span class="line">        iou_scores = intersect_areas / union_areas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#可能会有多个tbox落在同一个cell ，只去iou最大的</span></span><br><span class="line">        <span class="comment"># tf.argmax(iou_scores,4)</span></span><br><span class="line">        best_ious = K.max(iou_scores, axis=<span class="number">4</span>)</span><br><span class="line">        best_ious = tf.expand_dims(best_ious,axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#选出IOU大于0.6的，若IOU小于0.6的被标记为background，</span></span><br><span class="line">        obj_dec = tf.cast(best_ious &gt; <span class="number">0.6</span>,dtype=K.dtype(best_ious))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#IOU loss</span></span><br><span class="line">        no_obj_w = (self.no_object_scale * obj_dec * detectors_mask) <span class="comment">#</span></span><br><span class="line">        no_obj_loss = no_obj_w * tf.square(-confidence)</span><br><span class="line">        obj_loss = self.object_scale * detectors_mask * tf.square(<span class="number">1</span> - confidence)</span><br><span class="line">        confidence_loss = no_obj_loss + obj_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#class loss</span></span><br><span class="line">        match_cls = tf.cast(matching_true_boxes[...,<span class="number">4</span>],dtype=tf.int32)</span><br><span class="line">        match_cls = tf.one_hot(match_cls,num_classes)</span><br><span class="line"></span><br><span class="line">        class_loss = (self.class_scale * detectors_mask * tf.square(match_cls - cls_prob))</span><br><span class="line"></span><br><span class="line">        <span class="comment">#坐标loss</span></span><br><span class="line">        match_box = matching_true_boxes[...,<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">        coord_loss = self.coordinates_scale * detectors_mask * tf.square(match_box - pred_box)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        confidence_loss_sum = K.sum(confidence_loss)</span><br><span class="line">        class_loss_sum = K.sum(class_loss)</span><br><span class="line">        coord_loss_sum = K.sum(coord_loss)</span><br><span class="line">        all_loss = <span class="number">0.5</span> * (confidence_loss_sum + class_loss_sum + coord_loss_sum)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> all_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_detection</span><span class="params">(self,j,im, bboxes, scores, cls_inds, labels)</span>:</span></span><br><span class="line">        f = open(<span class="string">'./output/final.txt'</span>, <span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line">        imgcv = np.copy(im)</span><br><span class="line">        h, w, _ = imgcv.shape</span><br><span class="line">        <span class="keyword">for</span> i, box <span class="keyword">in</span> enumerate(bboxes):</span><br><span class="line">            cls_indx = cls_inds[i]</span><br><span class="line">            thick = int((h + w) / <span class="number">1000</span>)</span><br><span class="line">            cv2.rectangle(imgcv, (box[<span class="number">0</span>], box[<span class="number">1</span>]), (box[<span class="number">2</span>], box[<span class="number">3</span>]), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thick)</span><br><span class="line">            f.write(<span class="string">'[x, y, w, h]=['</span>+str(box[<span class="number">0</span>])+<span class="string">','</span>+str(box[<span class="number">1</span>])+<span class="string">','</span>+str(box[<span class="number">2</span>])+<span class="string">','</span>+str(box[<span class="number">3</span>])+<span class="string">']\n'</span>)</span><br><span class="line">            <span class="comment">#print("[x, y, w, h]=[%d, %d, %d, %d]" % (box[0], box[1], box[2], box[3]))</span></span><br><span class="line">            mess = <span class="string">'%s: %.3f'</span> % (labels[cls_indx], scores[i])</span><br><span class="line">            text_loc = (box[<span class="number">0</span>], box[<span class="number">1</span>] - <span class="number">10</span>)</span><br><span class="line">            cv2.putText(imgcv, mess, text_loc, cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1e-3</span> * h, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thick)</span><br><span class="line">        <span class="comment"># return imgcv</span></span><br><span class="line">        <span class="comment">#将处理后的每帧图片存到本地</span></span><br><span class="line">        address = <span class="string">'./output/'</span> + str(j)+ <span class="string">'.jpg'</span></span><br><span class="line">        cv2.imwrite(address,imgcv)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#将位置信息写入文件</span></span><br><span class="line">        f.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#v1 - v2 , v2 - v3</span></span><br><span class="line"><span class="comment"># 1、加入BN层 批次归一化   input --&gt; 均值为0方差为1正太分布</span></span><br><span class="line"><span class="comment">#    ---》白化  --&gt; 对‘input 变换到 均值0单位方差内的分布</span></span><br><span class="line"><span class="comment"># #使用：input * w --&gt;bn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    network = yolov2(<span class="string">'coco'</span>)</span><br><span class="line">  </span><br><span class="line">    net,x = network.darknet()</span><br><span class="line">    _bboxes, _obj_probs, _class_probs = network.decode(net)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    ckpt_path = <span class="string">'./model/v2/yolo2_coco.ckpt'</span></span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    saver.restore(sess,ckpt_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取视频文件</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="string">"./test/3.mp4"</span>)</span><br><span class="line">    <span class="comment"># 通过摄像头的方式</span></span><br><span class="line">    <span class="comment"># videoCapture=cv2.VideoCapture(1)</span></span><br><span class="line">    <span class="comment">#读帧</span></span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        img_r = network.preprocess_image(frame)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        bboxes, obj_probs, class_probs = sess.run([_bboxes, _obj_probs, _class_probs],feed_dict=&#123;x:img_r&#125;)</span><br><span class="line">        bboxes, scores, class_max_index = network.postprocess(bboxes, obj_probs, class_probs)</span><br><span class="line">        <span class="comment">#print(scores, box_classes)</span></span><br><span class="line">        img_detection = network.draw_detection(j, cv2.resize(frame,(<span class="number">416</span>,<span class="number">416</span>)), bboxes, scores, class_max_index, network.CLASS)</span><br><span class="line">        j=j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> yi、</span></span><br><span class="line"><span class="string">    第一大层  :conv maxpoiling</span></span><br><span class="line"><span class="string">    第2大层:3个卷积，maxpool</span></span><br><span class="line"><span class="string">    3:3个卷积，maxpool</span></span><br><span class="line"><span class="string">    4：3卷积，maxpool</span></span><br><span class="line"><span class="string">    5:5卷积，maxpool   -----------</span></span><br><span class="line"><span class="string">    6:5卷积                       | + add</span></span><br><span class="line"><span class="string">    7三个卷积---------------------</span></span><br><span class="line"><span class="string">    conv  </span></span><br><span class="line"><span class="string"> er:</span></span><br><span class="line"><span class="string">    ahchors生成和decode</span></span><br><span class="line"><span class="string"> san:</span></span><br><span class="line"><span class="string">    裁剪、选出前TOP_K，NMS </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p> </p><p><font color=red>运行结果（第30帧）：</font></p><p>视频还是上一篇文章中的测试视频。限于上传困难，在这里依然只展示单帧的测试。对比图如下（上面的是v1，下面的是v2）</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/11/U1Z639.jpg" alt="图12：YOLO V1视频检测结果（单帧）" style="zoom: 80%;" /><p> </p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/13/UGOObj.jpg" alt="图13：YOLO V2视频检测结果（单帧）" style="zoom:80%;" /><p>从对比图可以看出，与V1版本第30帧的检测结果相比，V2可以检测到更多的物体，并且准确率更高。</p><p> </p><div class="note success">            <p>原视频 。见：<a href="https://wwa.lanzous.com/ivijLej0vmb" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>处理后的视频。见：<a href="https://wwa.lanzous.com/inuQfek7lhe" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>另外，检测到的bbox位置也特别多，无法截图展示，我就把信息全部写入到了txt文本中。见：<a href="https://cdn.jsdelivr.net/gh/han-suyu/cdn_others/final_v2.txt" target="_blank" rel="noopener external nofollow noreferrer">传送门</a>)</p>          </div><p> </p><p> </p><p> </p><blockquote><p><strong>参考</strong>：<br /><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener external nofollow noreferrer">https://pjreddie.com/darknet/yolo/</a><br /><a href="https://xmfbit.github.io/2017/02/04/yolo-paper/" target="_blank" rel="noopener external nofollow noreferrer">https://xmfbit.github.io/2017/02/04/yolo-paper/</a><br /><a href="https://www.cnblogs.com/AntonioSu/p/12164255.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/AntonioSu/p/12164255.html</a><br /><a href="https://zhuanlan.zhihu.com/p/25052190" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/25052190</a><br /><a href="http://lanbing510.info/2017/09/04/YOLOV2.html" target="_blank" rel="noopener external nofollow noreferrer">http://lanbing510.info/2017/09/04/YOLOV2.html</a><br /><a href="https://segmentfault.com/a/1190000016842636#comment-area" target="_blank" rel="noopener external nofollow noreferrer">https://segmentfault.com/a/1190000016842636#comment-area</a><br /><a href="https://www.youtube.com/watch?v=VOC3huqHrss" target="_blank" rel="noopener external nofollow noreferrer">https://www.youtube.com/watch?v=VOC3huqHrss</a><br /><a href="https://www.cnblogs.com/wangguchangqing/p/10480995.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/wangguchangqing/p/10480995.html</a><br /><a href="https://zhuanlan.zhihu.com/p/74540100" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/74540100</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLO v1学习总结</title>
      <link href="/2020/07/3774741536.html"/>
      <url>/2020/07/3774741536.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《You Only Look Once Unified，Real-Time Object Detection》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="https://arxiv.org/abs/1506.02640" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/abs/1506.02640</a></p><p><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/iF8YYef3cfe" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/iF8YYef3cfe</a></p>    </div></div><p> </p><p> </p><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>在学习YOLO的最开始阶段，我钻上了牛角尖。我感觉网络上有些文章讲得有点直接，上来就聊原理说架构，作为小白我理解起来有点吃力。比如：</p><div class="note warning">            <p>如果image中某个object box的中心落在某个grid cell内部，那么这个cell就对检测该object负责。</p>          </div><p>在检测结果还没出来之前，这个cell怎么知道某个object box的中心落在它身上？它是怎么感知到这个object的？不应该是先负责然后才能知道object box的中心落在它身上吗？又怎么个负责法？</p><p> </p><p>兜兜转转一段时间，我发现了一篇浅显易懂的文章【<a href="https://zhuanlan.zhihu.com/p/37850811" target="_blank" rel="noopener external nofollow noreferrer">你真的读懂yolo了吗？</a> - stone的文章 - 知乎】</p><p>感觉这篇文章直击我的“痛点”，回答了我的疑问，让我有种柳暗花明的顿悟感。（十分敬佩&amp;感谢博主）</p><p> </p><p>这篇文章的作者也指出：</p><blockquote><p>原论文是按照测试阶段进行解读的，不容易让人理解，网上关于yolo的文章又基本都是照着原文翻译，很多背后的原理没有讲清楚。其实，知道训练阶段的意义更重要，因为训练阶段你告诉网络去预测什么，然后测试阶段才能按照你训练阶段教它的去做，如果你只知道测试阶段网络输出的意义，你就很可能会问：<strong>凭什么物体的中心落在这个cell它就负责预测这个物体？</strong></p></blockquote><p> </p><p>另外，有一个网站叫<a href="https://docs.google.com/presentation/d/1aeRvtKG21KHdD5lg6Hgyhx5rPq_ZOsGjG5rJ1HP7BbA/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="noopener external nofollow noreferrer">deepsystems.io</a> 。里面有YOLO算法的讲解ppt，总共73页，步骤清晰、图文并茂，非常有利于理解，墙裂推荐！！！</p><p> </p><p> </p><h2 id="1-从目标检测说起"><a class="markdownIt-Anchor" href="#1-从目标检测说起"></a> 1. 从目标检测说起</h2><p>目标检测就是要找出图片中物体，用边框框出来，如图1中的红色部分，这个边框就叫做bounding box（边界框）。同时判定框内物体的类别，即判断出图中这个物体为“猫”。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UutAqs.jpg" alt="图1：猫" style="zoom: 40%;" /><p>比如图1中的这只猫，我们规定bounding box左上角那一点的坐标为(x,y)，bounding box边框的宽为w，高为h。</p><p>通过这种办法我们就能在一张图片里唯一的确定一个bounding box的位置，这就相当于目标检测成功。</p><p> </p><p>那么问题来了，怎么去精准地框定图片中的这只猫呢？一个很自然的想法就是，我把图片输入到训练好的模型，让网络学习输出bounding box的xywh四个值以及图片的类别。这么做貌似是可以的，但考虑这么一种情况：如果图片上除了一只猫之外还有一只狗（如图2），甚至更多的物体，我们都想把它们框出来，那么这时候网络就不仅仅要输出猫的预测，还有输出其他物体的预测。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/11/U1Zrh4.jpg" alt="图2：猫和人" style="zoom:80%;" /><p>这个时候我们发现，模型的输出的维度是没办法固定的，图片中存在的物体越多，模型输出的维度就越大。所以这种思路行不通。</p><p> </p><p> </p><h2 id="2-主流目标检测算法"><a class="markdownIt-Anchor" href="#2-主流目标检测算法"></a> 2. 主流目标检测算法</h2><p>传统目标检测系统采用deformable parts models (DPM)方法，通过<code>HOG特征提取+SVM分类器+滑动窗</code>来实现识别。近期的R-CNN类方法采用region proposal methods，先产生候选区域然后再使用CNN识别候选区中的对象，虽然准确率比较高，但是即使是发展到Faster R-CNN，检测一张图片如下图所示也要7fps(原文为5fps)，图3是YOLO的网络结构示意图的检测性能对比：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UutVZn.png" alt="图3：常见目标检测算法性能对比" style="zoom:24%;" /><p>YOLO创造性的将候选区和对象识别这两个阶段合二为一，看一眼图片（不用看两眼哦）就能知道有哪些对象以及它们的位置。解决了当时基于深度学习的检测中的痛点——速度问题，可以用于实时系统。</p><p> </p><p> </p><h2 id="3-yolo的引入"><a class="markdownIt-Anchor" href="#3-yolo的引入"></a> 3. YOLO的引入</h2><p>由上可得：模型输出的维度最好是固定的。基于此，我们可以设计一个固定维度大小的输出，并且输出的维度足够大，以至于可以囊括图像中所有的物体。yolo就是这么做的。</p><p>yolo固定维度的办法是把图片划分为 7x7=49 个网格cell（最多表示出49个对象），每个网格允许预测出2个边框，总共 49*2=98 个bounding box。可以理解为98个候选区，它们很粗略的覆盖了图片的整个区域。另外，还会相应的输出两个类别信息。如图4所示。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UuteI0.jpg" alt="图4：网格划分" style="zoom: 40%;" /><div class="note info">            <p>实际上，YOLO并没有真正去掉候选区，而是采用了预定义的候选区（准确点说应该是预测区，因为并不是Faster RCNN所采用的Anchor）</p>          </div><p>但问题的关键是，我们怎么知道cell需要预测图片中的哪个物体呢？这个其实取决于你怎么去设置模型的训练目标，说白一点就是，你要教它去预测哪个物体。具体来说，yolo是这么做的：</p><p>将输入图像划分之后，每个cell负责检测落入该格子的物体。若某个物体的中心位置的坐标落入到某个格子，那么这个格子就负责检测出这个物体。如图5所示，图中物体狗的中心点（红色原点）落入第5行、第2列的格子内，所以这个格子负责预测图像中的物体狗。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UutbF0.png" alt="图5：目标检测实例" style="zoom:80%;" /><p>这么说可能不太容易理解，下面进行更具体的介绍。</p><p><strong>实际上，“物体落在哪个cell，哪个cell就负责预测这个物体” 要分两个阶段来看，包括训练和测试。</strong></p><ol><li>训练阶段。在训练阶段，如果物体中心落在这个cell，那么就给这个cell打上这个物体的label（包括xywh和类别），也就是说我们是通过这种方式来设置训练的label的。换言之，我们在训练阶段，就教会cell要预测图像中的哪个物体。</li><li>测试阶段。因为你在训练阶段已经教会了cell去预测中心落在该cell中的物体，那么cell自然也会这么做。</li></ol><p> </p><p>图6就是YOLO的检测系统示意图。在test阶段，经过单个CNN网络前向计算来预测多个bounding boxes和类别概率，再经过非极大值抑制，就可以给出检测结果。<br /><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UutTwn.png" alt="图6：YOLO V1检测系统示意图" /></p><p> </p><p> </p><p> </p><h1 id="一-核心思想"><a class="markdownIt-Anchor" href="#一-核心思想"></a> 一、核心思想</h1><p>网格划分：将输入image划分为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">S \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 个grid cell，如果image中某个object box的中心落在某个grid cell内部，那么这个cell就对该object负责。</p><p>同时，每个grid cell同时预测B个<strong>bounding box的位置 (x, y, w, h)<strong>和一个</strong>置信度confidence</strong> 。</p><p>每个grid cell还要预测一个<strong>分类概率</strong>，记为 C 个类。</p><p>总的来说， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">S \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 个网格，输出就是 一个S * S * (5B+C) 的tensor。在PASCAL VOC进行测试时，使用S=7, B=2。由于共有20类，故C=20。因此 输出向量长度 = 20 + 2 * (4+1) = 30。整个输出的tensor就是 7x7x30。</p><p> </p><p>即：<code>30维向量</code> =  <code>2个bounding box * 4个坐标</code> + <code>2个bounding box的置信度</code> +  <code>20个对象的概率</code></p><p> </p><p>下面分别对这三类输出信息进行解读：</p><h2 id="11-两个bounding-box的位置-两组xywh值"><a class="markdownIt-Anchor" href="#11-两个bounding-box的位置-两组xywh值"></a> 1.1 两个bounding box的位置 (两组xywh值)</h2><p>之前就已经叙述过了这四个值的含义。这里主要讲它的归一化操作。xy表示bounding box的中心相对于cell左上角坐标偏移，宽高则是相对于整张图片的宽高进行归一化的。偏移的计算方法如图7所示。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/Uutkrj.png" alt="图7：偏移计算方法" style="zoom:75%;" /><p>经过这种处理后，xywh都被归一化了，值都是在0-1之间。否则可能导致各个输出维度的取值范围差别很大，进而导致训练的时候，网络更关注数值大的维度，最终导致区别对待。因为数值大的维度，相应的loss会比较大，为了让这个loss减小，网络就会尽可能的学习这个维度。</p><p> </p><h2 id="12-两个bbox的置信度confidence"><a class="markdownIt-Anchor" href="#12-两个bbox的置信度confidence"></a> 1.2  两个bbox的置信度confidence</h2><p>confidence表示cell预测的bounding box包含一个物体的置信度有多高并且该bounding box预测准确度有多大。也就是说这个置信度并不只是该bounding box是待检测目标的概率，而是该bounding box是待检测目标的概率乘上该bounding box和真实位置的IOU的积。如下式所示：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>f</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><msubsup><mrow><mi>I</mi><mi>O</mi><mi>U</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi></mrow><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>t</mi><mi>h</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">{confidence} = P(Object)* {IOU}_{pred}^{truth}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.3054459999999999em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223379999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P({Object})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span></span></span></span> 是bounding box内存在对象的概率，非0即1。区别于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P({C}_i|{Object})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span></span></span></span>  。前者并不管是哪个对象，它体现的是 有或没有 对象的概率；而后者意思是假设已经有一个对象在网格中了，这个对象具体是哪一个。</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>O</mi><msubsup><mi>U</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi></mrow><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>t</mi><mi>h</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">IOU^{truth}_{pred}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2683239999999998em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.4168920000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 是输出的两个bounding box 分别与对象真实bounding box 的IOU（Intersection over Union，交并比）。然后看2个bounding box的IOU，哪个比较大（更接近对象实际的bounding box），就由哪个bounding box来负责预测该对象是否存在，即该bounding box的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P(Object)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，同时对象真实bounding box的位置也就填入该bounding box。另一个不负责预测的bounding box的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(Object)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>  。总的来说就是，与对象实际bounding box最接近的那个bounding box，其<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>f</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>=</mo><mi>I</mi><mi>O</mi><msubsup><mi>U</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi></mrow><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>t</mi><mi>h</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">confidence =  IOU_{pred}^{truth}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2683239999999998em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.4168920000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> ，该网格的其它bounding box的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>f</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">confidence=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 。</p><p> </p><p>简单解释一下IOU。下图8来自Andrew Ng的深度学习课程，IOU=交集部分面积/并集部分面积，2个box完全重合时IOU=1，不相交时IOU=0。</p><p><img src= "/img/loading.gif" data-src="https://image-static.segmentfault.com/260/453/2604535154-5bc4906a127a3_articlex" alt="图8：IOU" /></p></li></ul><p> </p><div class="note info">            <p>还要说明的是，虽然有时说&quot;预测&quot;的bounding box，但这个IOU是在训练阶段计算的。等到了测试阶段（Inference），这时并不知道真实对象在哪里，只能完全依赖于网络的输出，这时已经不需要（也无法）计算IOU了。</p>          </div><p> </p><p>综合来说，一个bounding box的置信度Confidence意味着它是否包含对象且位置准确的程度。<strong>置信度高表示这里存在一个对象且位置比较准确，置信度低表示可能没有对象 或者 即便有对象也存在较大的位置偏差。</strong></p><p> </p><h2 id="13-十个对象分类的概率"><a class="markdownIt-Anchor" href="#13-十个对象分类的概率"></a> 1.3 十个对象分类的概率</h2><p>因为YOLO支持识别20种不同的对象（人、鸟、猫、汽车、椅子等），所以这里有20个值表示该网格位置存在任一种对象的概率。可以记为  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><msub><mi>s</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(Class_1|Object)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> ，  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><msub><mi>s</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(Class_2|Object)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> ，…， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><msub><mi>s</mi><mn>20</mn></msub><mi mathvariant="normal">∣</mi><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(Class_{20}|Object)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 。这个怎么理解？也可以分两个阶段来看。</p><ol><li>对于训练阶段，也就是打label阶段，怎么打label呢？对于一个cell，如果物体的中心落在了这个cell，那么我们给它打上这个物体的类别label，并设置概率为1。换句话说，这个概率是存在一个条件的，这个条件就是cell存在物体。</li><li>对于测试阶段来说，网络直接输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mtext>Class</mtext><mi mathvariant="normal">∣</mi><mtext>Object</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(\text{Class}|\text{Object})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord text"><span class="mord">Class</span></span><span class="mord">∣</span><span class="mord text"><span class="mord">Object</span></span><span class="mclose">)</span></span></span></span> ，就已经可以代表有物体存在的条件下类别概率。但是在测试阶段，作者还把这个概率乘上了confidence。</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>f</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi></mrow><mo>×</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mtext>Object</mtext><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mi>i</mi></msub><mo stretchy="false">)</mo><mo>×</mo><msubsup><mrow><mi>I</mi><mi>O</mi><mi>U</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi></mrow><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>t</mi><mi>h</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">{confidence}\times P({Class}_i|\text{Object}) = P({Class}_i)\times {IOU}_{pred}^{truth}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord text"><span class="mord">Object</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.3054459999999999em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223379999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>​也就是说我们预测的条件概率还要乘以confidence。为什么这么做呢？举个例子，对于某个cell来说，在预测阶段，即使这个cell不存在物体（即confidence的值为0），而输出的条件概率<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mi mathvariant="normal">∣</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo stretchy="false">)</mo><mo>=</mo><mn>0.9</mn></mrow><annotation encoding="application/x-tex">P({Class}|{Object})=0.9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span></span></span></span> ，但将confidence和  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mi mathvariant="normal">∣</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P({Class}|{Object})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span></span></span></span> 乘起来就变成0了。这个是很合理的，因为你得确保cell中有物体，计算类别概率才有意义。</p><p>​        </p><p>​        在test的<a href="https://img-blog.csdn.net/20170420214347813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHJzc3R1ZHk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" target="_blank" rel="noopener external nofollow noreferrer">非极大值抑制</a>阶段，对于每个bounding box，我们应该按照上式衡量该框是否应该予以保留。</p><p> </p><p> </p><p> </p><h1 id="二-网络结构"><a class="markdownIt-Anchor" href="#二-网络结构"></a> 二、网络结构</h1><p>YOLO网络借鉴了GoogLeNet分类网络结构，但是没有采取inception的结构，而是使用1x1卷积层 + 3x3卷积层替代。共有24个卷积层用来提取图像特征，后面接2个全连接层用来预测图像位置和类别概率值，如图9所示。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/Uutoes.png" alt="图9：YOLO的网络结构示意图" /></p><div class="note default">            <p>YOLO的最后一层采用线性激活函数，其它层都是Leaky ReLU。训练中采用了drop out和数据增强（data augmentation）来防止过拟合。更多细节请参考原论文。</p>          </div><p>从图中可以看到，yolo网络的输出的网格是7x7大小的，另外，输出的channel数目为30。一个cell内，前20个元素是类别概率值，然后2个元素是边界框confidence，最后8个元素是边界框的 (x, y,w,h) 。如图10所示。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UutFMQ.jpg" alt="图10：yolo网络输出结构" style="zoom: 67%;" /><p>也就是说，每个cell有两个predictor，每个predictor分别预测一个bounding box的xywh和相应的confidence。但分类部分的预测却是共享的。正因为这个，同个cell是没办法预测多个目标的。</p><p>现在考虑两个问题:</p><ol><li><p>假设类别预测不是共享的，cell中两个predictor都有各自的类别预测，这样能否在一个cell中预测两个目标？</p></li><li><p>为什么要预测两个bounding box？</p><p> </p></li></ol><p>对于第一个问题，答案是否定的。如果一个cell要预测两个目标，那么这两个predictor要怎么分工预测这两个目标？谁负责谁？不知道，所以没办法预测。而像faster rcnn这类算法，可以根据anchor与ground truth的IOU大小来安排anchor负责预测哪个物体，所以后来yolo2也采用了anchor思想，同个cell才能预测多个目标。</p><p>对于第二个问题，既然我们一个cell只能预测一个目标，为什么还要预测两个bounding box（或者更多）？这个还是要从训练阶段怎么给两个predictor安排训练目标来说。在训练的时候会在线地计算每个predictor预测的bounding box和ground truth的IOU，计算出来的IOU大的那个predictor，就会负责预测这个物体，另外一个则不预测。这么做有什么好处？我的理解是，这样做的话，实际上有两个predictor来一起进行预测，然后网络会在线选择预测得好的那个predictor（也就是IOU大）来进行预测。通俗一点说，就是我找一堆人来并行地干一件事，然后我选干的最好的那个。</p><p> </p><div class="note default">            <p>YOLO论文中，作者还给出一个更轻快的检测网络fast YOLO，它只有9个卷积层和2个全连接层，其他部分完全一样。使用titan x GPU，fast YOLO可以达到155fps的检测速度，但是mAP值也从YOLO的63.4%降到了52.7%，但却仍然远高于以往的实时物体检测方法（DPM）的mAP值。</p>          </div><p> </p><p> </p><p> </p><h1 id="三-训练"><a class="markdownIt-Anchor" href="#三-训练"></a> 三、训练</h1><p>损失就是网络实际输出值与样本标签值之间的偏差。</p><p> </p><p>YOLO给出的损失函数如图11所示。</p><img src= "/img/loading.gif" data-src="https://image-static.segmentfault.com/160/476/1604765359-5bc490697d2bd" alt="图11：损失函数" style="zoom:60%;" /><p>公式中</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mi>i</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1^{obj}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span> 意思是网格i中存在对象。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1^{obj}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> 意思是网格i的第j个bounding box中存在对象。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mi>n</mi><mi>o</mi><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1^{no obj}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> 意思是网格i的第j个bounding box中不存在对象。</li></ul><p>总的来说，就是用网络输出与样本标签的各项内容的误差平方和作为一个样本的整体误差。<br />损失函数中的几个项是与输出的30维向量中的内容相对应的。</p><p> </p><p><strong>① 对象分类的误差</strong><br />公式第5行，注意 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mi>i</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1^{obj}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span> 意味着存在对象的网格才计入误差。</p><p><strong>② bounding box的位置误差</strong><br />公式第1行和第2行。</p><ul><li><p>都带有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1^{obj}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> 意味着只有&quot;负责&quot;（IOU比较大）预测的那个bounding box的数据才会计入误差。</p></li><li><p>第2行宽度和高度先取了平方根，因为如果直接取差值的话，大的对象对差值的敏感度较低，小的对象对差值的敏感度较高，所以取平方根可以降低这种敏感度的差异，使得较大的对象和较小的对象在尺寸误差上有相似的权重。</p></li><li><p>乘以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>c</mi><mi>o</mi><mi>o</mi><mi>r</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\lambda_{coord}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 调节bounding box位置误差的权重（相对分类误差和置信度误差）。YOLO设置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>c</mi><mi>o</mi><mi>o</mi><mi>r</mi><mi>d</mi></mrow></msub><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">\lambda_{coord}=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> ，即调高位置误差的权重。</p></li></ul><p><strong>③ bounding box的置信度误差</strong><br />公式第3行和第4行。</p><ul><li>第3行是存在对象的bounding box的置信度误差。带有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mn>1</mn><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">1^{obj}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> 意味着只有&quot;负责&quot;（IOU比较大）预测的那个bounding box的置信度才会计入误差。</li><li>第4行是不存在对象的bounding box的置信度误差。因为不存在对象的bounding box应该老老实实的说&quot;我这里没有对象&quot;，也就是输出尽量低的置信度。如果它不恰当的输出较高的置信度，会与真正&quot;负责&quot;该对象预测的那个bounding box产生混淆。其实就像对象分类一样，正确的对象概率最好是1，所有其它对象的概率最好是0。</li><li>第4行会乘以  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>n</mi><mi>o</mi><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\lambda_{noobj}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 调节不存在对象的bounding box的置信度的权重（相对其它误差）。YOLO设置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mo>&lt;</mo></msub><mo stretchy="false">!</mo><mo>−</mo><mo>−</mo><mi mathvariant="normal">￼</mi><mn>10</mn><mo>−</mo><mo>−</mo><mo>&gt;</mo><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">\lambda_=0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.87181em;vertical-align:-0.17737em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22737em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mrel mtight">&lt;</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.17737em;"><span></span></span></span></span></span></span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">￼</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span> ，即调低不存在对象的bounding box的置信度误差的权重。</li></ul><p> </p><p>关于loss，需要特别注意的是需要计算loss的部分。并不是网络的输出都算loss，具体地说：</p><ol><li>有物体中心落入的cell，需要计算分类loss，两个predictor都要计算confidence loss，预测的bounding box与ground truth IOU比较大的那个predictor需要计算xywh loss。</li><li>特别注意：没有物体中心落入的cell，只需要计算confidence loss。</li></ol><p>另外，我们发现每一项loss的计算都是L2 loss，即使是分类问题也是。所以说yolo是把分类问题转为了回归问题。</p><p> </p><p> </p><p> </p><h1 id="四-性能"><a class="markdownIt-Anchor" href="#四-性能"></a> 四、性能</h1><h2 id="41-优点"><a class="markdownIt-Anchor" href="#41-优点"></a> 4.1 优点</h2><ul><li><p><strong>YOLO检测物体非常快</strong></p><p>因为没有复杂的检测流程，只需要将图像输入到神经网络就可以得到端对端检测结果。标准版本的YOLO每秒可以处理45帧图像，快速版可以达到150帧/s。因此，YOLO可以实现实时检测。</p></li><li><p><strong>YOLO实时监测的mAP（mean Average Precision）是之前其他实时物体检测系统的两倍以上</strong></p></li><li><p><strong>YOLO采用全图信息来进行预测</strong></p><p>不像其他物体检测系统使用了滑窗或region proposal，分类器只能得到图像的局部信息，会错误的将背景中的斑块检测为目标。YOLO在训练和测试时都能够看到一整张图像的信息，因此YOLO在检测物体时能很好的利用上下文信息，从而不容易在背景上预测出错误的物体信息。和Fast-R-CNN相比，YOLO的背景错误不到Fast-R-CNN的一半。</p></li><li><p><strong>YOLO可以学到物体的泛化特征</strong></p><p>YOLO可以学习到目标的概括信息（generalizable representation），具有一定普适性。当YOLO在自然图像上做训练，在艺术作品上做测试时，YOLO表现的性能比DPM、R-CNN等之前的物体检测系统要好很多。</p></li></ul><p> </p><h2 id="42-缺点"><a class="markdownIt-Anchor" href="#42-缺点"></a> 4.2 缺点</h2><ul><li>因为网格和bounding box设置的比较稀疏，所以这个版本的YOLO训练出来后预测的准确率和召回率都不是很理想，后续的v2、v3版本还会改进。</li><li>由于损失函数的问题，YOLO容易产生物体的定位错误。</li><li>YOLO对相互靠近或小物体的检测效果不好，尤其是密集的小物体，因为一个网格只能预测2个框（物体）。</li></ul><p> </p><p> </p><p> </p><h1 id="五-其他"><a class="markdownIt-Anchor" href="#五-其他"></a> 五、其他</h1><h2 id="51-yolo的bounding-box并不是faster-rcnn的anchor"><a class="markdownIt-Anchor" href="#51-yolo的bounding-box并不是faster-rcnn的anchor"></a> 5.1 YOLO的bounding box并不是Faster RCNN的Anchor</h2><p>Faster RCNN等一些算法采用每个grid中手工设置n个Anchor（先验框，预先设置好位置的bounding box）的设计，每个Anchor有不同的大小和宽高比。YOLO的bounding box看起来很像一个grid中2个Anchor，但它们不是。YOLO并没有预先设置2个bounding box的大小和形状，也没有对每个bounding box分别输出一个对象的预测。它的意思仅仅是对一个对象预测出2个bounding box，选择预测得相对比较准的那个。</p><p>这里采用2个bounding box，有点不完全算监督算法，而是像进化算法。如果是监督算法，我们需要<strong>事先</strong>根据样本就能给出一个正确的bounding box作为回归的目标。但YOLO的2个bounding box事先并不知道会在什么位置，只有经过前向计算，网络会输出2个bounding box，这两个bounding box与样本中对象实际的bounding box计算IOU。这时才能确定，IOU值大的那个bounding box，作为负责预测该对象的bounding box。<br />训练开始阶段，网络预测的bounding box可能都是乱来的，但总是选择IOU相对好一些的那个，随着训练的进行，每个bounding box会逐渐擅长对某些情况的预测（可能是对象大小、宽高比、不同类型的对象等）。所以，这是一种进化或者非监督学习的思想。</p><p> </p><h2 id="52-预测inference"><a class="markdownIt-Anchor" href="#52-预测inference"></a> 5.2 预测（inference）</h2><p>训练好的YOLO网络，输入一张图片，将输出一个 7<em>7</em>30 的张量（tensor）来表示图片中所有网格包含的对象（概率）以及该对象可能的2个位置（bounding box）和可信程度（置信度）。<br />为了从中提取出最有可能的那些对象和位置，YOLO采用NMS（Non-maximal suppression，非极大值抑制）算法。</p><p> </p><h2 id="53-nms非极大值抑制"><a class="markdownIt-Anchor" href="#53-nms非极大值抑制"></a> 5.3 NMS（非极大值抑制）</h2><p>NMS方法并不复杂，其核心思想是：选择得分最高的作为输出，与该输出重叠的去掉，不断重复这一过程直到所有备选处理完。</p><p>YOLO的NMS计算方法如下。<br />网络输出的7<em>7</em>30的张量，在每一个网格中，对象位于第j个bounding box的得分：</p><p>它代表着某个对象存在于第j个bounding box的可能性。</p><p>每个网格有：20个对象的概率*2个bounding box的置信度，共40个得分（候选对象）。49个网格共1960个得分。Andrew Ng建议每种对象分别进行NMS，那么每种对象有 1960/20=98 个得分。</p><p>NMS步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1）设置一个Score的阈值，低于该阈值的候选对象排除掉（将该Score设为0）</span><br><span class="line">2）遍历每一个对象类别</span><br><span class="line"> 2.1）遍历该对象的98个得分</span><br><span class="line">  2.1.1）找到Score最大的那个对象及其bounding box，添加到输出列表</span><br><span class="line">  2.1.2）对每个Score不为0的候选对象，计算其与上面2.1.1输出对象的bounding box的IOU</span><br><span class="line">  2.1.3）根据预先设置的IOU阈值，所有高于该阈值（重叠度较高）的候选对象排除掉（将Score设为0）</span><br><span class="line">  2.1.4）如果所有bounding box要么在输出列表中，要么Score&#x3D;0，则该对象类别的NMS完成，返回步骤2处理下一种对象</span><br><span class="line">3）输出列表即为预测的对象</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><h1 id="六-代码实现"><a class="markdownIt-Anchor" href="#六-代码实现"></a> 六、代码实现</h1><p>tensorflow版本为1.14 。代码结构如图12所示。</p><img src= "/img/loading.gif" data-src="https://img2020.cnblogs.com/blog/1534055/202007/1534055-20200728082824405-1869533810.png" alt="图12：代码结构" style="zoom:80%;" /><p> </p><p><strong>训练图集为VOC数据集，为了方便，我直接使用的YOLO_small.ckpt权重文件。</strong></p><p> </p><h2 id="61-基于图片的目标检测"><a class="markdownIt-Anchor" href="#61-基于图片的目标检测"></a> 6.1 基于图片的目标检测</h2><p><font color=red>yolo_pic.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> cv2 <span class="keyword">as</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yolo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 构造函数：初始化yolo中S、B、C参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#支持检测的类别</span></span><br><span class="line">        self.classes = [<span class="string">"aeroplane"</span>, <span class="string">"bicycle"</span>, <span class="string">"bird"</span>, <span class="string">"boat"</span>, <span class="string">"bottle"</span>,</span><br><span class="line">                        <span class="string">"bus"</span>, <span class="string">"car"</span>, <span class="string">"cat"</span>, <span class="string">"chair"</span>, <span class="string">"cow"</span>, <span class="string">"diningtable"</span>,</span><br><span class="line">                        <span class="string">"dog"</span>, <span class="string">"horse"</span>, <span class="string">"motorbike"</span>, <span class="string">"person"</span>, <span class="string">"pottedplant"</span>,</span><br><span class="line">                        <span class="string">"sheep"</span>, <span class="string">"sofa"</span>, <span class="string">"train"</span>,<span class="string">"tvmonitor"</span>]</span><br><span class="line">        self.C = len(self.classes) <span class="comment"># 类别数</span></span><br><span class="line">        <span class="comment"># 边界框的中心坐标xy——相对于每个cell左上点的偏移量</span></span><br><span class="line">        self.x_offset = np.transpose(np.reshape(np.array([np.arange(<span class="number">7</span>)]*<span class="number">7</span>*<span class="number">2</span>), [<span class="number">2</span>, <span class="number">7</span>, <span class="number">7</span>]), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line">        self.y_offset = np.transpose(self.x_offset, [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line">        <span class="comment">#x、y shape = (7,7,2)</span></span><br><span class="line"></span><br><span class="line">        self.threshold = <span class="number">0.2</span>  <span class="comment"># 类别置信度分数阈值</span></span><br><span class="line">        self.iou_threshold = <span class="number">0.5</span>  <span class="comment"># IOU阈值，小于0.4的会过滤掉</span></span><br><span class="line"></span><br><span class="line">        self.max_output_size = <span class="number">10</span>  <span class="comment"># NMS选择的边界框的最大数量</span></span><br><span class="line">        self.img_shape = (<span class="number">448</span>,<span class="number">448</span>)</span><br><span class="line"></span><br><span class="line">        self.batch_size = <span class="number">45</span></span><br><span class="line"></span><br><span class="line">        self.coord_scale = <span class="number">5.</span></span><br><span class="line">        self.noobject_scale = <span class="number">1.</span></span><br><span class="line">        self.object_scale = <span class="number">1.</span></span><br><span class="line">        self.class_scale = <span class="number">2.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaky_relu激活函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_relu</span><span class="params">(self,x, alpha=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.maximum(alpha * x, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#################  网络部分</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_net</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">448</span>, <span class="number">448</span>, <span class="number">3</span>]) <span class="comment"># 输入、输出用占位符，因为尺寸一般不会改变</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment"># 搭建网络模型</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'yolo'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_2'</span>):</span><br><span class="line">                net = self._conv_layer(x,  <span class="number">64</span>, <span class="number">7</span>, <span class="number">2</span>,<span class="string">'conv_2'</span>)</span><br><span class="line">            net = self._maxpool_layer(net,  <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_4'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">192</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_4'</span>)</span><br><span class="line">            net = self._maxpool_layer(net, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_6'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">128</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_6'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_7'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_7'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_8'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_8'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_9'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_9'</span>)</span><br><span class="line">            net = self._maxpool_layer(net, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_11'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_11'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_12'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_12'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_13'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_13'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_14'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_14'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_15'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_15'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_16'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_16'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_17'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_17'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_18'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_18'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_19'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_19'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_20'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_20'</span>)</span><br><span class="line">            net = self._maxpool_layer(net, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_22'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_22'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_23'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_23'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_24'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_24'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_25'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_25'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_26'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_26'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_28'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">2</span>,<span class="string">'conv_28'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_29'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_29'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_30'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_30'</span>)</span><br><span class="line">            net = self._flatten(net)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'fc_33'</span>):</span><br><span class="line">                net = self._fc_layer(net,  <span class="number">512</span>, activation=self.leak_relu,scope=<span class="string">'fc_33'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'fc_34'</span>):</span><br><span class="line">                net = self._fc_layer(net, <span class="number">4096</span>, activation=self.leak_relu,scope=<span class="string">'fc_34'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'fc_36'</span>):</span><br><span class="line">                net = self._fc_layer(net, <span class="number">7</span>*<span class="number">7</span>*<span class="number">30</span>,scope=<span class="string">'fc_36'</span>)</span><br><span class="line">        <span class="keyword">return</span> net,x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 卷积层：x输入；num_filters：卷积核个数；filter_size：卷积核尺寸；stride：步长</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_conv_layer</span><span class="params">(self, x, num_filters, filter_size, stride,scope)</span>:</span></span><br><span class="line">        <span class="comment"># 通道数</span></span><br><span class="line">        in_channels = x.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 均值为0标准差为0.1的正态分布，初始化权重w；shape=行*列*通道数*卷积核个数</span></span><br><span class="line">        weight = tf.Variable(tf.truncated_normal([filter_size, filter_size,in_channels, num_filters], stddev=<span class="number">0.1</span>),name=<span class="string">'weights'</span>)</span><br><span class="line">        bias = tf.Variable(tf.zeros([num_filters,]),name=<span class="string">'biases'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># padding, 注意: 不用padding="SAME",否则可能会导致坐标计算错误</span></span><br><span class="line">        pad_size = filter_size // <span class="number">2</span></span><br><span class="line">        pad_mat = np.array([[<span class="number">0</span>, <span class="number">0</span>], [pad_size, pad_size], [pad_size, pad_size], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line">        x_pad = tf.pad(x, pad_mat)</span><br><span class="line">        conv = tf.nn.conv2d(x_pad, weight, strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>], padding=<span class="string">"VALID"</span>,name=scope)</span><br><span class="line">        output = self.leak_relu(tf.nn.bias_add(conv, bias))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全连接层：x输入；num_out：输出尺寸；activation：激活函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_fc_layer</span><span class="params">(self, x,  num_out, activation=None,scope=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        num_in = x.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 均值为0标准差为0.1的正态分布，初始化权重w；shape=行*列*通道数*卷积核个数</span></span><br><span class="line">        weight = tf.Variable(tf.truncated_normal([num_in, num_out], stddev=<span class="number">0.1</span>),name=<span class="string">'weights'</span>)</span><br><span class="line">        bias = tf.Variable(tf.zeros([num_out,]),name=<span class="string">'biases'</span>)</span><br><span class="line">        output = tf.nn.xw_plus_b(x, weight, bias,name=scope)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正常全连接层是leak_relu激活函数；但是最后一层是liner函数</span></span><br><span class="line">        <span class="keyword">if</span> activation:</span><br><span class="line">            output = activation(output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 池化层：x输入；pool_size：池化尺寸；stride：步长</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_maxpool_layer</span><span class="params">(self, x,  pool_size, stride)</span>:</span></span><br><span class="line">        output = tf.nn.max_pool(x, [<span class="number">1</span>, pool_size, pool_size, <span class="number">1</span>],</span><br><span class="line">                                strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>], padding=<span class="string">"SAME"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拉直层：因为接下来会连接全连接层，例如[n_samples, 7, 7, 32] -&gt; [n_samples, 7*7*32]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_flatten</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""flatten the x"""</span></span><br><span class="line">        tran_x = tf.transpose(x, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># channle first mode</span></span><br><span class="line">        nums = np.product(x.get_shape().as_list()[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> tf.reshape(tran_x, [<span class="number">-1</span>, nums])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#############   IOU</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(self,predicition)</span>:</span></span><br><span class="line">        cls = tf.reshape(predicition[<span class="number">0</span>,:<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span>],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">20</span>])</span><br><span class="line">        confidence = tf.reshape(predicition[<span class="number">0</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span>:<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span> + <span class="number">7</span>*<span class="number">7</span>*<span class="number">2</span>],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">2</span>])</span><br><span class="line">        boxes = tf.reshape(predicition[<span class="number">0</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span> + <span class="number">7</span>*<span class="number">7</span>*<span class="number">2</span>:],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#true box = (x,y,w**2,h**2) 乘以图像的宽度和高度</span></span><br><span class="line">        boxes = tf.stack(</span><br><span class="line">            [</span><br><span class="line">                (boxes[:,:,:,<span class="number">0</span>] + tf.constant(self.x_offset,dtype=tf.float32)) / <span class="number">7</span> * self.img_shape[<span class="number">0</span>],</span><br><span class="line">                (boxes[:,:,:,<span class="number">1</span>] + tf.constant(self.y_offset,dtype=tf.float32)) / <span class="number">7</span> * self.img_shape[<span class="number">1</span>],</span><br><span class="line">                tf.square(boxes[:,:,:,<span class="number">2</span>]) * self.img_shape[<span class="number">0</span>],</span><br><span class="line">                tf.square(boxes[:,:,:,<span class="number">3</span>]) * self.img_shape[<span class="number">1</span>]</span><br><span class="line">             ],axis=<span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        scores = tf.expand_dims(confidence, <span class="number">-1</span>) * tf.expand_dims(cls, <span class="number">2</span>)</span><br><span class="line">        <span class="comment">#print(scores)</span></span><br><span class="line">        scores = tf.reshape(scores, [<span class="number">-1</span>, <span class="number">20</span>])</span><br><span class="line"></span><br><span class="line">        boxes = tf.reshape(boxes, [<span class="number">-1</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#拿到每个box的类别与得分</span></span><br><span class="line">        box_classes = tf.argmax(scores, axis=<span class="number">1</span>)</span><br><span class="line">        box_class_scores = tf.reduce_max(scores, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#过滤</span></span><br><span class="line">        filter_mask = box_class_scores &gt;= self.threshold</span><br><span class="line">        scores = tf.boolean_mask(box_class_scores, filter_mask)</span><br><span class="line">        boxes = tf.boolean_mask(boxes, filter_mask)</span><br><span class="line">        box_classes = tf.boolean_mask(box_classes, filter_mask)</span><br><span class="line"></span><br><span class="line">        _boxes = tf.stack([boxes[:, <span class="number">0</span>] - <span class="number">0.5</span> * boxes[:, <span class="number">2</span>], boxes[:, <span class="number">1</span>] - <span class="number">0.5</span> * boxes[:, <span class="number">3</span>],</span><br><span class="line">                           boxes[:, <span class="number">0</span>] + <span class="number">0.5</span> * boxes[:, <span class="number">2</span>], boxes[:, <span class="number">1</span>] + <span class="number">0.5</span> * boxes[:, <span class="number">3</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        nms_indices = tf.image.non_max_suppression(_boxes, scores,</span><br><span class="line">                                                   self.max_output_size, self.iou_threshold)</span><br><span class="line">        scores = tf.gather(scores, nms_indices)</span><br><span class="line">        boxes = tf.gather(boxes, nms_indices)</span><br><span class="line">        box_classes = tf.gather(box_classes, nms_indices)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scores,boxes,box_classes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_iou</span><span class="params">(self,bboxes1, bboxes2)</span>:</span></span><br><span class="line">        bboxes1 = np.transpose(bboxes1)</span><br><span class="line">        bboxes2 = np.transpose(bboxes2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算两个box的交集：交集左上角的点取两个box的max，交集右下角的点取两个box的min</span></span><br><span class="line">        int_ymin = np.maximum(bboxes1[<span class="number">0</span>], bboxes2[<span class="number">0</span>])</span><br><span class="line">        int_xmin = np.maximum(bboxes1[<span class="number">1</span>], bboxes2[<span class="number">1</span>])</span><br><span class="line">        int_ymax = np.minimum(bboxes1[<span class="number">2</span>], bboxes2[<span class="number">2</span>])</span><br><span class="line">        int_xmax = np.minimum(bboxes1[<span class="number">3</span>], bboxes2[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算两个box交集的wh：如果两个box没有交集，那么wh为0(按照计算方式wh为负数，跟0比较取最大值)</span></span><br><span class="line">        int_h = np.maximum(int_ymax - int_ymin, <span class="number">0.</span>)</span><br><span class="line">        int_w = np.maximum(int_xmax - int_xmin, <span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算IOU</span></span><br><span class="line">        int_vol = int_h * int_w  <span class="comment"># 交集面积</span></span><br><span class="line">        vol1 = (bboxes1[<span class="number">2</span>] - bboxes1[<span class="number">0</span>]) * (bboxes1[<span class="number">3</span>] - bboxes1[<span class="number">1</span>])  <span class="comment"># bboxes1面积</span></span><br><span class="line">        vol2 = (bboxes2[<span class="number">2</span>] - bboxes2[<span class="number">0</span>]) * (bboxes2[<span class="number">3</span>] - bboxes2[<span class="number">1</span>])  <span class="comment"># bboxes2面积</span></span><br><span class="line">        iou = int_vol / (vol1 + vol2 - int_vol)  <span class="comment"># IOU=交集/并集</span></span><br><span class="line">        <span class="keyword">return</span> iou</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss_layer</span><span class="params">(self, predicts, labels, scope=<span class="string">'loss_layer'</span>)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#label为（(45,7,7,25)）  5个为盒子信息  (x,y,w,h,c)  后20个为类别</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(scope):</span><br><span class="line">            <span class="comment"># 预测值</span></span><br><span class="line">            <span class="comment"># class-20</span></span><br><span class="line">            predict_classes = tf.reshape(</span><br><span class="line">                predicts[:, :<span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">20</span>])</span><br><span class="line">            <span class="comment"># confidence-2</span></span><br><span class="line">            predict_confidence = tf.reshape(</span><br><span class="line">                predicts[:, <span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span>:<span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span> + <span class="number">7</span> * <span class="number">7</span> * <span class="number">2</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>])</span><br><span class="line">            <span class="comment"># bounding box-2*4</span></span><br><span class="line">            predict_boxes = tf.reshape(</span><br><span class="line">                predicts[:, <span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span> + <span class="number">7</span> * <span class="number">7</span> * <span class="number">2</span>:],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 实际值</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,1)</span></span><br><span class="line">            <span class="comment"># response中的值为0或者1.对应的网格中存在目标为1，不存在目标为0.</span></span><br><span class="line">            <span class="comment"># 存在目标指的是存在目标的中心点，并不是说存在目标的一部分。所以，目标的中心点所在的cell其对应的值才为1，其余的值均为0</span></span><br><span class="line">            response = tf.reshape(</span><br><span class="line">                labels[..., <span class="number">0</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>])</span><br><span class="line">            <span class="comment"># shape(45,7,7,1,4)</span></span><br><span class="line">            boxes = tf.reshape(</span><br><span class="line">                labels[..., <span class="number">1</span>:<span class="number">5</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line">            <span class="comment"># shape(45,7,7,2,4),boxes的四个值，取值范围为0~1</span></span><br><span class="line">            boxes = tf.tile(</span><br><span class="line">                boxes, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]) / self.img_shape[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># shape(45,7,7,20)</span></span><br><span class="line">            classes = labels[..., <span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># self.offset shape(7,7,2)</span></span><br><span class="line">            <span class="comment"># offset shape(1,7,7,2)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># shape(45,7,7,2)</span></span><br><span class="line">            x_offset = tf.tile(self.x_offset, [self.batch_size, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment">#(45,7,7,2)</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,2)</span></span><br><span class="line">            y_offset = tf.transpose(x_offset, (<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># convert the x, y to the coordinates relative to the top left point of the image</span></span><br><span class="line">            <span class="comment"># the predictions of w, h are the square root</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,2,4)  -&gt;(x,y,w,h)</span></span><br><span class="line">            predict_boxes_tran = tf.stack(</span><br><span class="line">                [(predict_boxes[..., <span class="number">0</span>] + x_offset) / <span class="number">7</span>,</span><br><span class="line">                 (predict_boxes[..., <span class="number">1</span>] + y_offset) / <span class="number">7</span>,</span><br><span class="line">                 tf.square(predict_boxes[..., <span class="number">2</span>]),</span><br><span class="line">                 tf.square(predict_boxes[..., <span class="number">3</span>])], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 预测box与真实box的IOU,shape(45,7,7,2)</span></span><br><span class="line">            iou_predict_truth = self.calc_iou(predict_boxes_tran, boxes)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># calculate I tensor [BATCH_SIZE, CELL_SIZE, CELL_SIZE, BOXES_PER_CELL]</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,1), find the maximum iou_predict_truth in every cell</span></span><br><span class="line">            <span class="comment"># 在训练时，如果该单元格内确实存在目标，那么只选择IOU最大的那个边界框来负责预测该目标，而其它边界框认为不存在目标</span></span><br><span class="line">            object_mask = tf.reduce_max(iou_predict_truth, <span class="number">3</span>, keep_dims=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># object probs (45,7,7,2)</span></span><br><span class="line">            object_mask = tf.cast(</span><br><span class="line">                (iou_predict_truth &gt;= object_mask), tf.float32) * response</span><br><span class="line"></span><br><span class="line">            <span class="comment"># calculate no_I tensor [CELL_SIZE, CELL_SIZE, BOXES_PER_CELL]</span></span><br><span class="line">            <span class="comment"># noobject confidence(45,7,7,2)</span></span><br><span class="line">            noobject_probs = tf.ones_like(</span><br><span class="line">                object_mask, dtype=tf.float32) - object_mask</span><br><span class="line"></span><br><span class="line">            <span class="comment"># shape(45,7,7,2,4)，对boxes的四个值进行规整，xy为相对于网格左上角，wh为取根号后的值，范围0~1</span></span><br><span class="line">            boxes_tran = tf.stack(</span><br><span class="line">                [boxes[..., <span class="number">0</span>] * <span class="number">7</span> - x_offset,</span><br><span class="line">                 boxes[..., <span class="number">1</span>] * <span class="number">7</span> - y_offset,</span><br><span class="line">                 tf.sqrt(boxes[..., <span class="number">2</span>]),</span><br><span class="line">                 tf.sqrt(boxes[..., <span class="number">3</span>])], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># class_loss shape(45,7,7,20)</span></span><br><span class="line">            class_delta = response * (predict_classes - classes)</span><br><span class="line">            class_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(class_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">                name=<span class="string">'class_loss'</span>) * self.class_scale</span><br><span class="line"></span><br><span class="line">            <span class="comment"># object_loss  confidence=iou*p(object)</span></span><br><span class="line">            <span class="comment"># p(object)的值为1或0</span></span><br><span class="line">            object_delta = object_mask * (predict_confidence - iou_predict_truth)</span><br><span class="line">            object_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(object_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">                name=<span class="string">'object_loss'</span>) * self.object_scale</span><br><span class="line"></span><br><span class="line">            <span class="comment"># noobject_loss  p(object)的值为0</span></span><br><span class="line">            noobject_delta = noobject_probs * predict_confidence</span><br><span class="line">            noobject_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(noobject_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">                name=<span class="string">'noobject_loss'</span>) * self.noobject_scale</span><br><span class="line"></span><br><span class="line">            <span class="comment"># coord_loss</span></span><br><span class="line">            coord_mask = tf.expand_dims(object_mask, <span class="number">4</span>)</span><br><span class="line">            boxes_delta = coord_mask * (predict_boxes - boxes_tran)</span><br><span class="line">            coord_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(boxes_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]),</span><br><span class="line">                name=<span class="string">'coord_loss'</span>) * self.coord_scale</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> class_loss+object_loss+noobject_loss+coord_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_yolo</span><span class="params">(self)</span>:</span></span><br><span class="line">        global_step = tf.train.create_global_step()</span><br><span class="line">        learning_rate = tf.train.exponential_decay(</span><br><span class="line">            <span class="number">0.0001</span>, global_step, <span class="number">30000</span>,</span><br><span class="line">            <span class="number">0.1</span>, <span class="literal">True</span>, name=<span class="string">'learning_rate'</span>)</span><br><span class="line">        op = tf.train.GradientDescentOptimizer(learning_rate).minimize()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_detect_from_image</span><span class="params">(self, image)</span>:</span></span><br><span class="line"></span><br><span class="line">        img_resized = cv2.resize(image, (<span class="number">448</span>, <span class="number">448</span>))</span><br><span class="line">        self.img = img_resized</span><br><span class="line">        img_RGB = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">        img_RGB = np.expand_dims(img_RGB,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        img_resized_np = np.asarray(img_RGB)</span><br><span class="line">        _images = np.zeros((<span class="number">1</span>, <span class="number">448</span>, <span class="number">448</span>, <span class="number">3</span>), dtype=np.float32)</span><br><span class="line">        _images[<span class="number">0</span>] = (img_resized_np / <span class="number">255.0</span>) * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _images</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_rectangle</span><span class="params">(self,img, classes, scores, bboxes, colors, thickness=<span class="number">2</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(bboxes.shape[<span class="number">0</span>]):</span><br><span class="line">            x = int(bboxes[i][<span class="number">0</span>])</span><br><span class="line">            y = int(bboxes[i][<span class="number">1</span>])</span><br><span class="line">            w = int(bboxes[i][<span class="number">2</span>]) // <span class="number">2</span></span><br><span class="line">            h = int(bboxes[i][<span class="number">3</span>]) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">"[x, y, w, h]=[%d, %d, %d, %d]"</span> % (x, y, w, h))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 中心坐标 + 宽高box(x, y, w, h) -&gt; xmin = x - w / 2 -&gt; 左上 + 右下box(xmin, ymin, xmax, ymax)</span></span><br><span class="line">            cv2.rectangle(img, (x - w, y - h), (x + w, y + h), colors[<span class="number">0</span>], thickness)</span><br><span class="line">            <span class="comment"># 在边界框上显示类别、分数(类别置信度)</span></span><br><span class="line">            s = <span class="string">'%s/%.3f'</span> % (self.classes[classes[i]], scores[i])</span><br><span class="line">            cv2.rectangle(img, (x - w, y - h - <span class="number">20</span>), (x + w, y - h), (<span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>), <span class="number">-1</span>)</span><br><span class="line">            cv2.putText(img, s, (x - w + <span class="number">5</span>, y - h - <span class="number">7</span>),</span><br><span class="line">                        cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.namedWindow(<span class="string">"img"</span>, <span class="number">0</span>)</span><br><span class="line">        cv2.resizeWindow(<span class="string">"img"</span>, <span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">        cv2.imshow(<span class="string">'img'</span>, img)</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    yo = Yolo()</span><br><span class="line"></span><br><span class="line">    pred,x = yo._build_net()</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    checkpoint_path = <span class="string">'./model/v1/YOLO_small.ckpt'</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    sess.run(init)</span><br><span class="line">    saver.restore(sess, checkpoint_path)</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(<span class="string">'./input/5.jpg'</span>)</span><br><span class="line">    img = yo._detect_from_image(img)</span><br><span class="line"></span><br><span class="line">    scores, boxes, box_classes = yo.filter(pred)</span><br><span class="line">    scores, boxes, box_classes = sess.run([scores, boxes, box_classes],feed_dict=&#123;x:img&#125;)</span><br><span class="line">    print(<span class="string">'置信度：'</span>,end=<span class="string">""</span>)</span><br><span class="line">    print(scores)</span><br><span class="line">    print(<span class="string">'类别信息：'</span>,end=<span class="string">""</span>)</span><br><span class="line">    print(box_classes)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    yo.draw_rectangle(yo.img,box_classes,scores,boxes,[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>],[<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>]])</span><br></pre></td></tr></table></figure><p><font color=red>运行结果：</font></p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/11/U1Zy9J.jpg" alt="图13：检测成功的样例" style="zoom: 60%;" /><p>程序正确输出“人”和“猫”两个物体（第7和第14，参见代码中<code>self.classes</code>）。并标注了他们各自bbox的位置、置信度信息。</p><p>另外，我拍摄了一张行人、车辆都很密集的图片，想以此来看一下YOLO v1是否真的扛不住。果不其然…</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/11/U1mTOI.jpg" alt="图14：检测失败的样例" style="zoom: 67%;" /><p>从测试结果看到，在这张图片中，程序没有检测到任何东西。一定程度上佐证了YOLO对相互靠近或小物体的检测效果不好，尤其是密集的小物体！</p><p> </p><p> </p><h2 id="62-基于视频的目标检测"><a class="markdownIt-Anchor" href="#62-基于视频的目标检测"></a> 6.2 基于视频的目标检测</h2><p>毕竟YOLO算法是用于实时场景的，所以仅仅对图片检测是不够的，视频形式的检测必不可少。测试视频是我在公交车上用手机拍摄的，取景于济宁市一个不知名的十字路口。原本以为也会因为内容过于密集而检测失败，但结果还是不错的。</p><p><font color=red>yolo_video.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> cv2 <span class="keyword">as</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yolo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 构造函数：初始化yolo中S、B、C参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#支持检测的类别</span></span><br><span class="line">        self.classes = [<span class="string">"aeroplane"</span>, <span class="string">"bicycle"</span>, <span class="string">"bird"</span>, <span class="string">"boat"</span>, <span class="string">"bottle"</span>,</span><br><span class="line">                        <span class="string">"bus"</span>, <span class="string">"car"</span>, <span class="string">"cat"</span>, <span class="string">"chair"</span>, <span class="string">"cow"</span>, <span class="string">"diningtable"</span>,</span><br><span class="line">                        <span class="string">"dog"</span>, <span class="string">"horse"</span>, <span class="string">"motorbike"</span>, <span class="string">"person"</span>, <span class="string">"pottedplant"</span>,</span><br><span class="line">                        <span class="string">"sheep"</span>, <span class="string">"sofa"</span>, <span class="string">"train"</span>,<span class="string">"tvmonitor"</span>]</span><br><span class="line">        self.C = len(self.classes) <span class="comment"># 类别数</span></span><br><span class="line">        <span class="comment"># 边界框的中心坐标xy——相对于每个cell左上点的偏移量</span></span><br><span class="line">        self.x_offset = np.transpose(np.reshape(np.array([np.arange(<span class="number">7</span>)]*<span class="number">7</span>*<span class="number">2</span>), [<span class="number">2</span>, <span class="number">7</span>, <span class="number">7</span>]), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line">        self.y_offset = np.transpose(self.x_offset, [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line">        <span class="comment">#x、y shape = (7,7,2)</span></span><br><span class="line"></span><br><span class="line">        self.threshold = <span class="number">0.2</span>  <span class="comment"># 类别置信度分数阈值</span></span><br><span class="line">        self.iou_threshold = <span class="number">0.5</span>  <span class="comment"># IOU阈值，小于0.4的会过滤掉</span></span><br><span class="line"></span><br><span class="line">        self.max_output_size = <span class="number">10</span>  <span class="comment"># NMS选择的边界框的最大数量</span></span><br><span class="line">        self.img_shape = (<span class="number">448</span>,<span class="number">448</span>)</span><br><span class="line"></span><br><span class="line">        self.batch_size = <span class="number">45</span></span><br><span class="line"></span><br><span class="line">        self.coord_scale = <span class="number">5.</span></span><br><span class="line">        self.noobject_scale = <span class="number">1.</span></span><br><span class="line">        self.object_scale = <span class="number">1.</span></span><br><span class="line">        self.class_scale = <span class="number">2.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaky_relu激活函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_relu</span><span class="params">(self,x, alpha=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.maximum(alpha * x, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#################  网络部分</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_net</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">448</span>, <span class="number">448</span>, <span class="number">3</span>]) <span class="comment"># 输入、输出用占位符，因为尺寸一般不会改变</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment"># 搭建网络模型</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'yolo'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_2'</span>):</span><br><span class="line">                net = self._conv_layer(x,  <span class="number">64</span>, <span class="number">7</span>, <span class="number">2</span>,<span class="string">'conv_2'</span>)</span><br><span class="line">            net = self._maxpool_layer(net,  <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_4'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">192</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_4'</span>)</span><br><span class="line">            net = self._maxpool_layer(net, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_6'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">128</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_6'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_7'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_7'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_8'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_8'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_9'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_9'</span>)</span><br><span class="line">            net = self._maxpool_layer(net, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_11'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_11'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_12'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_12'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_13'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_13'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_14'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_14'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_15'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_15'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_16'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_16'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_17'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_17'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_18'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_18'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_19'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_19'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_20'</span>):</span><br><span class="line">                net = self._conv_layer(net, <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_20'</span>)</span><br><span class="line">            net = self._maxpool_layer(net, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_22'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_22'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_23'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_23'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_24'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="string">'conv_24'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_25'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_25'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_26'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_26'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_28'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">2</span>,<span class="string">'conv_28'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_29'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_29'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'conv_30'</span>):</span><br><span class="line">                net = self._conv_layer(net,  <span class="number">1024</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="string">'conv_30'</span>)</span><br><span class="line">            net = self._flatten(net)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'fc_33'</span>):</span><br><span class="line">                net = self._fc_layer(net,  <span class="number">512</span>, activation=self.leak_relu,scope=<span class="string">'fc_33'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'fc_34'</span>):</span><br><span class="line">                net = self._fc_layer(net, <span class="number">4096</span>, activation=self.leak_relu,scope=<span class="string">'fc_34'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'fc_36'</span>):</span><br><span class="line">                net = self._fc_layer(net, <span class="number">7</span>*<span class="number">7</span>*<span class="number">30</span>,scope=<span class="string">'fc_36'</span>)</span><br><span class="line">        <span class="keyword">return</span> net,x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 卷积层：x输入；num_filters：卷积核个数；filter_size：卷积核尺寸；stride：步长</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_conv_layer</span><span class="params">(self, x, num_filters, filter_size, stride,scope)</span>:</span></span><br><span class="line">        <span class="comment"># 通道数</span></span><br><span class="line">        in_channels = x.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 均值为0标准差为0.1的正态分布，初始化权重w；shape=行*列*通道数*卷积核个数</span></span><br><span class="line">        weight = tf.Variable(tf.truncated_normal([filter_size, filter_size,in_channels, num_filters], stddev=<span class="number">0.1</span>),name=<span class="string">'weights'</span>)</span><br><span class="line">        bias = tf.Variable(tf.zeros([num_filters,]),name=<span class="string">'biases'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># padding, 注意: 不用padding="SAME",否则可能会导致坐标计算错误</span></span><br><span class="line">        pad_size = filter_size // <span class="number">2</span></span><br><span class="line">        pad_mat = np.array([[<span class="number">0</span>, <span class="number">0</span>], [pad_size, pad_size], [pad_size, pad_size], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line">        x_pad = tf.pad(x, pad_mat)</span><br><span class="line">        conv = tf.nn.conv2d(x_pad, weight, strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>], padding=<span class="string">"VALID"</span>,name=scope)</span><br><span class="line">        output = self.leak_relu(tf.nn.bias_add(conv, bias))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全连接层：x输入；num_out：输出尺寸；activation：激活函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_fc_layer</span><span class="params">(self, x,  num_out, activation=None,scope=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        num_in = x.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 均值为0标准差为0.1的正态分布，初始化权重w；shape=行*列*通道数*卷积核个数</span></span><br><span class="line">        weight = tf.Variable(tf.truncated_normal([num_in, num_out], stddev=<span class="number">0.1</span>),name=<span class="string">'weights'</span>)</span><br><span class="line">        bias = tf.Variable(tf.zeros([num_out,]),name=<span class="string">'biases'</span>)</span><br><span class="line">        output = tf.nn.xw_plus_b(x, weight, bias,name=scope)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正常全连接层是leak_relu激活函数；但是最后一层是liner函数</span></span><br><span class="line">        <span class="keyword">if</span> activation:</span><br><span class="line">            output = activation(output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 池化层：x输入；pool_size：池化尺寸；stride：步长</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_maxpool_layer</span><span class="params">(self, x,  pool_size, stride)</span>:</span></span><br><span class="line">        output = tf.nn.max_pool(x, [<span class="number">1</span>, pool_size, pool_size, <span class="number">1</span>],</span><br><span class="line">                                strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>], padding=<span class="string">"SAME"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拉直层：因为接下来会连接全连接层，例如[n_samples, 7, 7, 32] -&gt; [n_samples, 7*7*32]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_flatten</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""flatten the x"""</span></span><br><span class="line">        tran_x = tf.transpose(x, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># channle first mode</span></span><br><span class="line">        nums = np.product(x.get_shape().as_list()[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> tf.reshape(tran_x, [<span class="number">-1</span>, nums])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#############   IOU</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(self,predicition)</span>:</span></span><br><span class="line">        cls = tf.reshape(predicition[<span class="number">0</span>,:<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span>],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">20</span>])</span><br><span class="line">        confidence = tf.reshape(predicition[<span class="number">0</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span>:<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span> + <span class="number">7</span>*<span class="number">7</span>*<span class="number">2</span>],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">2</span>])</span><br><span class="line">        boxes = tf.reshape(predicition[<span class="number">0</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">20</span> + <span class="number">7</span>*<span class="number">7</span>*<span class="number">2</span>:],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#true box = (x,y,w**2,h**2) 乘以图像的宽度和高度</span></span><br><span class="line">        boxes = tf.stack(</span><br><span class="line">            [</span><br><span class="line">                (boxes[:,:,:,<span class="number">0</span>] + tf.constant(self.x_offset,dtype=tf.float32)) / <span class="number">7</span> * self.img_shape[<span class="number">0</span>],</span><br><span class="line">                (boxes[:,:,:,<span class="number">1</span>] + tf.constant(self.y_offset,dtype=tf.float32)) / <span class="number">7</span> * self.img_shape[<span class="number">1</span>],</span><br><span class="line">                tf.square(boxes[:,:,:,<span class="number">2</span>]) * self.img_shape[<span class="number">0</span>],</span><br><span class="line">                tf.square(boxes[:,:,:,<span class="number">3</span>]) * self.img_shape[<span class="number">1</span>]</span><br><span class="line">             ],axis=<span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        scores = tf.expand_dims(confidence, <span class="number">-1</span>) * tf.expand_dims(cls, <span class="number">2</span>)</span><br><span class="line">        <span class="comment">#print(scores)</span></span><br><span class="line">        scores = tf.reshape(scores, [<span class="number">-1</span>, <span class="number">20</span>])</span><br><span class="line"></span><br><span class="line">        boxes = tf.reshape(boxes, [<span class="number">-1</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#拿到每个box的类别与得分</span></span><br><span class="line">        box_classes = tf.argmax(scores, axis=<span class="number">1</span>)</span><br><span class="line">        box_class_scores = tf.reduce_max(scores, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#过滤</span></span><br><span class="line">        filter_mask = box_class_scores &gt;= self.threshold</span><br><span class="line">        scores = tf.boolean_mask(box_class_scores, filter_mask)</span><br><span class="line">        boxes = tf.boolean_mask(boxes, filter_mask)</span><br><span class="line">        box_classes = tf.boolean_mask(box_classes, filter_mask)</span><br><span class="line"></span><br><span class="line">        _boxes = tf.stack([boxes[:, <span class="number">0</span>] - <span class="number">0.5</span> * boxes[:, <span class="number">2</span>], boxes[:, <span class="number">1</span>] - <span class="number">0.5</span> * boxes[:, <span class="number">3</span>],</span><br><span class="line">                           boxes[:, <span class="number">0</span>] + <span class="number">0.5</span> * boxes[:, <span class="number">2</span>], boxes[:, <span class="number">1</span>] + <span class="number">0.5</span> * boxes[:, <span class="number">3</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        nms_indices = tf.image.non_max_suppression(_boxes, scores,</span><br><span class="line">                                                   self.max_output_size, self.iou_threshold)</span><br><span class="line">        scores = tf.gather(scores, nms_indices)</span><br><span class="line">        boxes = tf.gather(boxes, nms_indices)</span><br><span class="line">        box_classes = tf.gather(box_classes, nms_indices)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scores,boxes,box_classes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_iou</span><span class="params">(self,bboxes1, bboxes2)</span>:</span></span><br><span class="line">        bboxes1 = np.transpose(bboxes1)</span><br><span class="line">        bboxes2 = np.transpose(bboxes2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算两个box的交集：交集左上角的点取两个box的max，交集右下角的点取两个box的min</span></span><br><span class="line">        int_ymin = np.maximum(bboxes1[<span class="number">0</span>], bboxes2[<span class="number">0</span>])</span><br><span class="line">        int_xmin = np.maximum(bboxes1[<span class="number">1</span>], bboxes2[<span class="number">1</span>])</span><br><span class="line">        int_ymax = np.minimum(bboxes1[<span class="number">2</span>], bboxes2[<span class="number">2</span>])</span><br><span class="line">        int_xmax = np.minimum(bboxes1[<span class="number">3</span>], bboxes2[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算两个box交集的wh：如果两个box没有交集，那么wh为0(按照计算方式wh为负数，跟0比较取最大值)</span></span><br><span class="line">        int_h = np.maximum(int_ymax - int_ymin, <span class="number">0.</span>)</span><br><span class="line">        int_w = np.maximum(int_xmax - int_xmin, <span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算IOU</span></span><br><span class="line">        int_vol = int_h * int_w  <span class="comment"># 交集面积</span></span><br><span class="line">        vol1 = (bboxes1[<span class="number">2</span>] - bboxes1[<span class="number">0</span>]) * (bboxes1[<span class="number">3</span>] - bboxes1[<span class="number">1</span>])  <span class="comment"># bboxes1面积</span></span><br><span class="line">        vol2 = (bboxes2[<span class="number">2</span>] - bboxes2[<span class="number">0</span>]) * (bboxes2[<span class="number">3</span>] - bboxes2[<span class="number">1</span>])  <span class="comment"># bboxes2面积</span></span><br><span class="line">        iou = int_vol / (vol1 + vol2 - int_vol)  <span class="comment"># IOU=交集/并集</span></span><br><span class="line">        <span class="keyword">return</span> iou</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss_layer</span><span class="params">(self, predicts, labels, scope=<span class="string">'loss_layer'</span>)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#label为（(45,7,7,25)）  5个为盒子信息  (x,y,w,h,c)  后20个为类别</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(scope):</span><br><span class="line">            <span class="comment"># 预测值</span></span><br><span class="line">            <span class="comment"># class-20</span></span><br><span class="line">            predict_classes = tf.reshape(</span><br><span class="line">                predicts[:, :<span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">20</span>])</span><br><span class="line">            <span class="comment"># confidence-2</span></span><br><span class="line">            predict_confidence = tf.reshape(</span><br><span class="line">                predicts[:, <span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span>:<span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span> + <span class="number">7</span> * <span class="number">7</span> * <span class="number">2</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>])</span><br><span class="line">            <span class="comment"># bounding box-2*4</span></span><br><span class="line">            predict_boxes = tf.reshape(</span><br><span class="line">                predicts[:, <span class="number">7</span> * <span class="number">7</span> * <span class="number">20</span> + <span class="number">7</span> * <span class="number">7</span> * <span class="number">2</span>:],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 实际值</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,1)</span></span><br><span class="line">            <span class="comment"># response中的值为0或者1.对应的网格中存在目标为1，不存在目标为0.</span></span><br><span class="line">            <span class="comment"># 存在目标指的是存在目标的中心点，并不是说存在目标的一部分。所以，目标的中心点所在的cell其对应的值才为1，其余的值均为0</span></span><br><span class="line">            response = tf.reshape(</span><br><span class="line">                labels[..., <span class="number">0</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>])</span><br><span class="line">            <span class="comment"># shape(45,7,7,1,4)</span></span><br><span class="line">            boxes = tf.reshape(</span><br><span class="line">                labels[..., <span class="number">1</span>:<span class="number">5</span>],</span><br><span class="line">                [self.batch_size, <span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line">            <span class="comment"># shape(45,7,7,2,4),boxes的四个值，取值范围为0~1</span></span><br><span class="line">            boxes = tf.tile(</span><br><span class="line">                boxes, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]) / self.img_shape[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># shape(45,7,7,20)</span></span><br><span class="line">            classes = labels[..., <span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># self.offset shape(7,7,2)</span></span><br><span class="line">            <span class="comment"># offset shape(1,7,7,2)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># shape(45,7,7,2)</span></span><br><span class="line">            x_offset = tf.tile(self.x_offset, [self.batch_size, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment">#(45,7,7,2)</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,2)</span></span><br><span class="line">            y_offset = tf.transpose(x_offset, (<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># convert the x, y to the coordinates relative to the top left point of the image</span></span><br><span class="line">            <span class="comment"># the predictions of w, h are the square root</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,2,4)  -&gt;(x,y,w,h)</span></span><br><span class="line">            predict_boxes_tran = tf.stack(</span><br><span class="line">                [(predict_boxes[..., <span class="number">0</span>] + x_offset) / <span class="number">7</span>,</span><br><span class="line">                 (predict_boxes[..., <span class="number">1</span>] + y_offset) / <span class="number">7</span>,</span><br><span class="line">                 tf.square(predict_boxes[..., <span class="number">2</span>]),</span><br><span class="line">                 tf.square(predict_boxes[..., <span class="number">3</span>])], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 预测box与真实box的IOU,shape(45,7,7,2)</span></span><br><span class="line">            iou_predict_truth = self.calc_iou(predict_boxes_tran, boxes)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># calculate I tensor [BATCH_SIZE, CELL_SIZE, CELL_SIZE, BOXES_PER_CELL]</span></span><br><span class="line">            <span class="comment"># shape(45,7,7,1), find the maximum iou_predict_truth in every cell</span></span><br><span class="line">            <span class="comment"># 在训练时，如果该单元格内确实存在目标，那么只选择IOU最大的那个边界框来负责预测该目标，而其它边界框认为不存在目标</span></span><br><span class="line">            object_mask = tf.reduce_max(iou_predict_truth, <span class="number">3</span>, keep_dims=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># object probs (45,7,7,2)</span></span><br><span class="line">            object_mask = tf.cast(</span><br><span class="line">                (iou_predict_truth &gt;= object_mask), tf.float32) * response</span><br><span class="line"></span><br><span class="line">            <span class="comment"># calculate no_I tensor [CELL_SIZE, CELL_SIZE, BOXES_PER_CELL]</span></span><br><span class="line">            <span class="comment"># noobject confidence(45,7,7,2)</span></span><br><span class="line">            noobject_probs = tf.ones_like(</span><br><span class="line">                object_mask, dtype=tf.float32) - object_mask</span><br><span class="line"></span><br><span class="line">            <span class="comment"># shape(45,7,7,2,4)，对boxes的四个值进行规整，xy为相对于网格左上角，wh为取根号后的值，范围0~1</span></span><br><span class="line">            boxes_tran = tf.stack(</span><br><span class="line">                [boxes[..., <span class="number">0</span>] * <span class="number">7</span> - x_offset,</span><br><span class="line">                 boxes[..., <span class="number">1</span>] * <span class="number">7</span> - y_offset,</span><br><span class="line">                 tf.sqrt(boxes[..., <span class="number">2</span>]),</span><br><span class="line">                 tf.sqrt(boxes[..., <span class="number">3</span>])], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># class_loss shape(45,7,7,20)</span></span><br><span class="line">            class_delta = response * (predict_classes - classes)</span><br><span class="line">            class_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(class_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">                name=<span class="string">'class_loss'</span>) * self.class_scale</span><br><span class="line"></span><br><span class="line">            <span class="comment"># object_loss  confidence=iou*p(object)</span></span><br><span class="line">            <span class="comment"># p(object)的值为1或0</span></span><br><span class="line">            object_delta = object_mask * (predict_confidence - iou_predict_truth)</span><br><span class="line">            object_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(object_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">                name=<span class="string">'object_loss'</span>) * self.object_scale</span><br><span class="line"></span><br><span class="line">            <span class="comment"># noobject_loss  p(object)的值为0</span></span><br><span class="line">            noobject_delta = noobject_probs * predict_confidence</span><br><span class="line">            noobject_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(noobject_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">                name=<span class="string">'noobject_loss'</span>) * self.noobject_scale</span><br><span class="line"></span><br><span class="line">            <span class="comment"># coord_loss</span></span><br><span class="line">            coord_mask = tf.expand_dims(object_mask, <span class="number">4</span>)</span><br><span class="line">            boxes_delta = coord_mask * (predict_boxes - boxes_tran)</span><br><span class="line">            coord_loss = tf.reduce_mean(</span><br><span class="line">                tf.reduce_sum(tf.square(boxes_delta), axis=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]),</span><br><span class="line">                name=<span class="string">'coord_loss'</span>) * self.coord_scale</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> class_loss+object_loss+noobject_loss+coord_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_yolo</span><span class="params">(self)</span>:</span></span><br><span class="line">        global_step = tf.train.create_global_step()</span><br><span class="line">        learning_rate = tf.train.exponential_decay(</span><br><span class="line">            <span class="number">0.0001</span>, global_step, <span class="number">30000</span>,</span><br><span class="line">            <span class="number">0.1</span>, <span class="literal">True</span>, name=<span class="string">'learning_rate'</span>)</span><br><span class="line">        op = tf.train.GradientDescentOptimizer(learning_rate).minimize()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_detect_from_image</span><span class="params">(self, image)</span>:</span></span><br><span class="line"></span><br><span class="line">        img_resized = cv2.resize(image, (<span class="number">448</span>, <span class="number">448</span>))</span><br><span class="line">        self.img = img_resized</span><br><span class="line">        img_RGB = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">        img_RGB = np.expand_dims(img_RGB,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        img_resized_np = np.asarray(img_RGB)</span><br><span class="line">        _images = np.zeros((<span class="number">1</span>, <span class="number">448</span>, <span class="number">448</span>, <span class="number">3</span>), dtype=np.float32)</span><br><span class="line">        _images[<span class="number">0</span>] = (img_resized_np / <span class="number">255.0</span>) * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _images</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_rectangle</span><span class="params">(self,j,img, classes, scores, bboxes, colors, thickness=<span class="number">2</span>)</span>:</span></span><br><span class="line">        f = open(<span class="string">'./output/final.txt'</span>, <span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(bboxes.shape[<span class="number">0</span>]):</span><br><span class="line">            x = int(bboxes[i][<span class="number">0</span>])</span><br><span class="line">            y = int(bboxes[i][<span class="number">1</span>])</span><br><span class="line">            w = int(bboxes[i][<span class="number">2</span>]) // <span class="number">2</span></span><br><span class="line">            h = int(bboxes[i][<span class="number">3</span>]) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#print("[x, y, w, h]=[%d, %d, %d, %d]" % (x, y, w, h))</span></span><br><span class="line">            f.write(<span class="string">'[x, y, w, h]=['</span>+str(x)+<span class="string">','</span>+str(y)+<span class="string">','</span>+str(w)+<span class="string">','</span>+str(h)+<span class="string">']\n'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 中心坐标 + 宽高box(x, y, w, h) -&gt; xmin = x - w / 2 -&gt; 左上 + 右下box(xmin, ymin, xmax, ymax)</span></span><br><span class="line">            cv2.rectangle(img, (x - w, y - h), (x + w, y + h), colors[<span class="number">0</span>], thickness)</span><br><span class="line">            <span class="comment"># 在边界框上显示类别、分数(类别置信度)</span></span><br><span class="line">            s = <span class="string">'%s/%.3f'</span> % (self.classes[classes[i]], scores[i])</span><br><span class="line">            cv2.rectangle(img, (x - w, y - h - <span class="number">20</span>), (x + w, y - h), (<span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>), <span class="number">-1</span>)</span><br><span class="line">            cv2.putText(img, s, (x - w + <span class="number">5</span>, y - h - <span class="number">7</span>),</span><br><span class="line">                        cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        <span class="comment">#cv2.namedWindow("img", 0)</span></span><br><span class="line">        cv2.resizeWindow(<span class="string">"img"</span>, <span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">        <span class="comment">#cv2.imshow('img', img)</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">        <span class="comment">#将处理后的每帧图片存到本地</span></span><br><span class="line">        address = <span class="string">'./output/'</span> + str(j)+ <span class="string">'.jpg'</span></span><br><span class="line">        cv2.imwrite(address,img)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#将位置信息写入文件</span></span><br><span class="line">        f.write(<span class="string">'\n'</span>)</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">        <span class="comment">#cv2.waitKey(1)    #一般里面都填0，表示等待鼠标关闭。填其他数字表示每隔多少毫秒听力有一次画面</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#实例化yolo对象</span></span><br><span class="line">    yo = Yolo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#搭建网络模型(预测):模型的主体网络部分，这个网络将输出[batch,7*7*30]的张量</span></span><br><span class="line">    pred,x = yo._build_net()  </span><br><span class="line">    _scores, _boxes, _box_classes = yo.filter(pred)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#  导入权重文件</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    checkpoint_path = <span class="string">'./model/v1/YOLO_small.ckpt'</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    sess.run(init)</span><br><span class="line">    saver.restore(sess, checkpoint_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取视频文件</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="string">"./input/3.mp4"</span>)</span><br><span class="line">    <span class="comment"># 通过摄像头的方式</span></span><br><span class="line">    <span class="comment"># videoCapture=cv2.VideoCapture(1)</span></span><br><span class="line">    <span class="comment">#读帧</span></span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        img = yo._detect_from_image(frame)</span><br><span class="line">        </span><br><span class="line">        scores, boxes, box_classes = sess.run([_scores, _boxes, _box_classes],feed_dict=&#123;x:img&#125;)</span><br><span class="line">        <span class="comment">#print(scores, box_classes)</span></span><br><span class="line">        yo.draw_rectangle(j,yo.img,box_classes,scores,boxes,[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>],[<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>]])</span><br><span class="line">        j=j+<span class="number">1</span></span><br></pre></td></tr></table></figure><p><font color=red>运行结果（第30帧）：</font></p><p>由于上传视频太过缓慢，在这里只展示其中某一帧的检测结果。</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/11/U1Z639.jpg" alt="图15：视频检测结果（单帧）" style="zoom: 80%;" /><p>从图15可以看出，对于距离比较近的物体（车辆和人），还是有不错的检测效果，但对于较远处的，还是有些困难。</p><div class="note success">            <p>原视频 。见：<a href="https://wwa.lanzous.com/ivijLej0vmb" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>处理后的视频。见：<a href="https://wwa.lanzous.com/iRJ1sej0vji" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>另外，检测到的bbox位置也特别多，无法截图展示，我就把信息全部写入到了txt文本中。见：<a href="https://cdn.jsdelivr.net/gh/han-suyu/cdn_others/final_v1.txt" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p>          </div><p> </p><p> </p><p> </p><blockquote><p><strong>参考：</strong><br />本文图片很多来自PPT: <a href="https://docs.google.com/presentation/d/1aeRvtKG21KHdD5lg6Hgyhx5rPq_ZOsGjG5rJ1HP7BbA/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="noopener external nofollow noreferrer">deepsystems.io</a><br /><a href="https://zhuanlan.zhihu.com/p/37850811" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/37850811</a><br /><a href="https://zhuanlan.zhihu.com/p/25236464" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/25236464</a><br /><a href="https://www.shuzhiduo.com/A/1O5EYWn757/" target="_blank" rel="noopener external nofollow noreferrer">https://www.shuzhiduo.com/A/1O5EYWn757/</a><br /><a href="https://xmfbit.github.io/2017/02/04/yolo-paper/" target="_blank" rel="noopener external nofollow noreferrer">https://xmfbit.github.io/2017/02/04/yolo-paper/</a><br /><a href="https://www.jianshu.com/p/d147b94df939" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/d147b94df939</a><br /><a href="https://zhuanlan.zhihu.com/p/25045711" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/25045711</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于DenseNet模型实现MNIST手写体数据集的训练</title>
      <link href="/2020/07/1919729354.html"/>
      <url>/2020/07/1919729354.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《Densely Connected Convolutional Networks》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/pdf/1608.06993.pdf</a><br /><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/iHEsaebfwwj" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/iHEsaebfwwj</a></p>    </div></div><p> </p><p> </p><p>DenseNet 网络是在 2017 的论文 <a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="noopener external nofollow noreferrer">《Densely Connected Convolutional Networks》</a> 中提出，并斩获CVPR 2017年最佳论文奖。DenseNet 是一种具有密集连接的卷积神经网络，在该网络中，任何两层之间都有直接的连接，也就是说，网络每一层的输入包括其前面所有层，而该层所学习的特征也会直接输出给其后面所有层。</p><p> </p><p> </p><h2 id="一-设计理念"><a class="markdownIt-Anchor" href="#一-设计理念"></a> 一、设计理念</h2><p>它的基本思路与ResNet一致，但是它建立的是当前层与前面所有层的<strong>密集连接</strong>（dense connection），它的名称也是由此而来。DenseNet的另一大特色是通过特征在channel上的连接来实现<strong>特征重用</strong>（feature reuse）来代替 ResNet 的 Element-wise addition。</p><p> </p><p>密集连接真的不会带来冗余吗？（<a href="https://www.cnblogs.com/skyfsm/p/8451834.html" target="_blank" rel="noopener external nofollow noreferrer">参考</a>）</p><p>不会的。密集连接这个词给人的第一感觉就是极大的增加了网络的参数量和计算量。但实际上 DenseNet 比其他网络效率更高，其关键就在于网络每层计算量的减少以及特征的重复利用。DenseNet是让第一层的输入直接影响到之后的所有层，它的输出为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>l</mi></msub><mo>=</mo><msub><mi>H</mi><mi>l</mi></msub><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_l=H_l([x_0,x_1,…,x_{l-1}])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x_0,x_1,…,x_{l-1}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 是将之前的feature map以通道的维度进行合并。并且由于每一层都包含之前所有层的输出信息，因此其只需要很少的特征图就够了，这也是为什么DneseNet的参数量较其他模型大大减少的原因。这种dense connection相当于每一层都直接连接input和loss，因此就可以减轻梯度消失现象，这样加深网络不是问题 。</p><p>需要明确一点，dense connectivity 仅仅是在一个dense block里的，不同dense block 之间是没有dense connectivity的。</p><p> </p><p> </p><h2 id="二-与resnet的比较"><a class="markdownIt-Anchor" href="#二-与resnet的比较"></a> 二、与ResNet的比较</h2><p>相比ResNet，DenseNet提出了一个更激进的密集连接机制：即互相连接所有的层，具体来说就是每个层都会接受其前面所有层作为其额外的输入。<a href="https://zhuanlan.zhihu.com/p/37189203" target="_blank" rel="noopener external nofollow noreferrer">图1</a>为ResNet网络的连接机制，作为对比，<a href="https://zhuanlan.zhihu.com/p/37189203" target="_blank" rel="noopener external nofollow noreferrer">图2</a>为DenseNet的密集连接机制。可以看到，ResNet是每个层与前面的某层（一般是2~3层）短路连接在一起，连接方式是通过元素级相加。而在DenseNet中，每个层都会与前面所有层在channel维度上连接（concat）在一起（这里各个层的特征图大小是相同的——使用Transition layer），并作为下一层的输入。对于一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 层的网络，DenseNet共包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>L</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{L(L+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">L</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 个连接，相比ResNet，这是一种密集连接。而且DenseNet是直接concat来自不同层的特征图，这可以实现特征重用，极大地减少了参数，提升了效率，这一特点是DenseNet与ResNet最主要的区别。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/06/UC2lrR.jpg" alt="图1：ResNet网络的短路连接机制（其中+代表的是元素级相加操作）" /></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/06/UC21q1.jpg" alt="图2：DenseNet网络的密集连接机制（其中c代表的是channel级连接操作）" /></p><p>由上图可以发现两个主要区别：</p><ul><li>DenseNet 是密集连接，当前层与所有之前层都有连接；ResNet 只有相邻层有连接</li><li>DenseNet 是 channel-wise concatenation； Resnet 是 Element-wise addition</li></ul><p> </p><p>Dense Block 类似于 ResNet 中的 residual block，其区别对比如下（出自原论文）：</p><blockquote><p>Crucially, in contrast to ResNets, we never combine features <strong>summation</strong> before they are passed into a layer; instead, we combine features by <strong>concatenating</strong> them.</p></blockquote><p> </p><p>单点分析的话，如<a href="https://d2l.ai/chapter_convolutional-modern/densenet.html" target="_blank" rel="noopener external nofollow noreferrer">图3</a>所示。</p><p><img src= "/img/loading.gif" data-src="https://d2l.ai/_images/densenet-block.svg" alt="图3：The main difference between ResNet (left) and DenseNet (right) in cross-layer connections: use of addition and use of concatenation." /></p><p>可以看出一个是相加<code>“+”</code> ；一个是连接 <code>“[,]”</code></p><p> </p><p> </p><p> </p><h2 id="三-网络结构"><a class="markdownIt-Anchor" href="#三-网络结构"></a> 三、网络结构</h2><p>CNN网络一般要经过Pooling或者stride&gt;1的Conv来降低特征图的大小，而DenseNet的密集连接方式需要特征图大小保持一致。为了解决这个问题，DenseNet网络中使用<strong>DenseBlock Block  +  Transition Layer</strong>的结构（如<a href="https://github.com/madobet/webooru/issues/173" target="_blank" rel="noopener external nofollow noreferrer">图4</a>），其中DenseBlock是包含很多层的模块，每个层的特征图大小相同，层与层之间采用密集连接方式。而Transition模块是连接两个相邻的DenseBlock，并且通过Pooling使特征图大小降低。</p><p><img src= "/img/loading.gif" data-src="https://camo.githubusercontent.com/7f40b8f702e813c2c6a59a8f0f180751fca5864c/68747470733a2f2f696d67323031382e636e626c6f67732e636f6d2f626c6f672f313438333737332f3230313931302f313438333737332d32303139313030343230333131323136312d313039353937363830392e706e67" alt="图4：DenseNet结构组成" /></p><p> </p><h3 id="31-denseblock"><a class="markdownIt-Anchor" href="#31-denseblock"></a> 3.1 DenseBlock</h3><p>在每个Dense Block内部，<strong>每个卷积层可以知道前面所有卷积层输出的feature map是什么，因为它的输入为前面所有卷积层输出的feature map拼接而成，换个角度说，每个卷积层得到的feature map要输出给它后面所有的卷积层。<strong>这里说“每个卷积层”并不准确，<strong>更准确的说法应该是“每组卷积”</strong>，后面将看到，一组卷积是由1个 <code>1x11x1</code>卷积层和 1个<code>3x33x3</code>卷积层堆叠而成，即</strong>bottleneck结构</strong>。见论文：</p><blockquote><p><strong>to ensure maximum information flow between layers in the network</strong>, we connect all layers (with matching feature-map sizes) directly with each other. To preserve the feed-forward nature, each layer obtains additional inputs from all preceding layers and passes on its own feature-maps to all subsequent layers.</p></blockquote><p>下面看一个Dense Block的示例，如<a href="https://arxiv.org/abs/1608.06993" target="_blank" rel="noopener external nofollow noreferrer">图5</a>所示。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/han-suyu/cdn_others/A%20dense%20block%20with%205%20layers%20and%20growth%20rate%204.jpg" alt="图5：A 5-layer dense block with a growth rate of k = 4. Each layer takes all preceding feature-maps as input." /></p><p>图中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 为feature map，特别的，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为网络初始输入，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span> 代表非线性转化函数，它是一个组合操作，其可能包括一系列的BN，ReLU，Pooling以及Conv操作，其结构可以描述为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>N</mi><mo>→</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>→</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>v</mi><mo stretchy="false">(</mo><mn>3</mn><mo>×</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">BN→ReLU→Conv(3\times3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></span></p><p>如 <a href="https://zhuanlan.zhihu.com/p/37189203" target="_blank" rel="noopener external nofollow noreferrer">图6</a> 所示。另外值得注意的一点是，与ResNet不同，所有DenseBlock中各个层卷积之后均输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个特征图，即得到的特征图的channel数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> ，或者说采用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个卷积核。Dense Block 中每层输出的 feature maps 的 Channel 数。（对于ResNet，所有 Dense Block的growth rate均相同）。一般情况下使用较小的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>（比如12），就可以得到较佳的性能。假定输入层的特征图的channel数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">k_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，那么 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>层输入的channel数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mn>0</mn></msub><mo>+</mo><mi>k</mi><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k_0+k(l-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，因此随着层数增加，尽管 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 设定得较小，DenseBlock的输入会非常多，不过这是由于特征重用所造成的，每个层仅有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个特征是自己独有的。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/06/UC2u24.jpg" alt="图6：DenseBlock中的非线性转换结构" /></p><p>由于后面层的输入会非常大，DenseBlock内部可以采用bottleneck层来减少计算量，主要是原有的结构中增加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1*1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> Conv，如<a href="https://zhuanlan.zhihu.com/p/37189203" target="_blank" rel="noopener external nofollow noreferrer">图7</a>所示，其结构可以描述为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>N</mi><mi>B</mi><mi>N</mi><mo>→</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>→</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>v</mi><mo stretchy="false">(</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo stretchy="false">)</mo><mo>→</mo><mi>B</mi><mi>N</mi><mo>→</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>→</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>v</mi><mo stretchy="false">(</mo><mn>3</mn><mo>×</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">BNBN→ReLU→Conv(1\times1)→BN→ReLU→Conv(3\times3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></span></p><p>称为DenseNet-B结构。其中1x1 Conv得到  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>∗</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">4*k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个特征图它起到的作用是降低特征数量，从而提升计算效率。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/06/UC2nGF.jpg" alt="图7：使用bottleneck层的DenseBlock结构" /></p><p>在具体实现上，</p><p><font color=blue>在ResNet中</font>，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 层的输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_{l-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 经过层的转换函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">H_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 后得到对应的输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>l</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H_l(x_{l-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，该输出与输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_{l-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 的线性组合就成了下一层的输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">x_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>l</mi></msub><mo>=</mo><msub><mi>H</mi><mi>l</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>x</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_l=H_l(x_{l−1})+x_{l-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><font color=blue>而在DenseNet中</font>，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 层的新增输入 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_{l-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 之前的所有输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>3</mn></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_0,x_1,…,x_{l−3},x_{l−2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 按照通道拼接在一起组成真正的输入，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x_0,x_1,…,x_{l−2},x_{l−1}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> ，该输入经过一个Batch Normalization层、ReLU和卷积层得到对应的隐层输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">H_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，该隐层输出就是下一层的新增输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">x_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，即：</p><p>​</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>l</mi></msub><mo>=</mo><msub><mi>H</mi><mi>l</mi></msub><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_l=H_l([x_0,x_1,…,x_{l−2},x_{l−1}])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">x_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 再与之前的所有输入拼接为作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>l</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>l</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x_0,x_1,…,x_{l−2},x_{l−1},x_l]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 为下一层的输入。</p><p>（ 注意这里 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 层与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 层之间可能实际上包含多个卷积层。 ）</p><p> </p><p> </p><h3 id="32-transition-layer"><a class="markdownIt-Anchor" href="#32-transition-layer"></a> 3.2 Transition layer</h3><p>DenseNet 的 Transition layer 主要是用来降低 feature map 的尺寸，将来自不同层的 feature map 变化为同等尺寸后进行 concatenate，其结构如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>N</mi><mo>→</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>→</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>v</mi><mo stretchy="false">(</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo stretchy="false">)</mo><mo>→</mo><mi>A</mi><mi>v</mi><mi>e</mi><mi>P</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo stretchy="false">(</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">BN→ReLU→Conv(1\times1) → AvePooling(2\times2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1*1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的卷积主要用于瘦身，即降低通道数量。</p><p>可见，<strong>bottleneck和Transition Layer的作用都是为了提高计算效率以及压缩参数量。</strong></p><p> </p><p>如<a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="noopener external nofollow noreferrer">图8</a>所示，是包含三个Dense Block的DenseNet模型。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/han-suyu/cdn_others/A%20deep%20DenseNet%20with%20three%20dense%20blocks.jpg" alt="图8：A deep DenseNet with three denseblocks. The layers between two adjacent blocks are referred to as transition layers and change feature-map sizes via convolution and pooling." /></p><p> </p><p> </p><p> </p><h2 id="四-densenet特点"><a class="markdownIt-Anchor" href="#四-densenet特点"></a> 四、DenseNet特点</h2><p>综合来看，DenseNet的优势主要体现在以下几个方面：</p><ul><li>由于密集连接方式，DenseNet提升了梯度的反向传播，使得网络更容易训练。由于每层可以直达最后的误差信号，实现了隐式的“<a href="https://arxiv.org/abs/1409.5185" target="_blank" rel="noopener external nofollow noreferrer">deep supervision</a>”；</li><li>参数更小且计算更高效，这有点违反直觉，由于DenseNet是通过concat特征来实现短路连接，实现了特征重用，并且采用较小的growth rate，每个层所独有的特征图是比较小的；</li><li>由于特征复用，最后的分类器使用了低级特征。</li></ul><p> </p><p>要注意的一点是，如果实现方式不当的话，DenseNet可能耗费很多GPU显存</p><p> </p><p>阅读了文章<a href="https://zhuanlan.zhihu.com/p/37189203" target="_blank" rel="noopener external nofollow noreferrer">【DenseNet：比ResNet更优的CNN模型 - 小小将的文章 - 知乎】</a>下的所有评论，他们主要讨论的就是DenseNet不流行的原因，即<font color=red>对显存要求太高，相同占用下，性能远不如其他网络。</font></p><p> </p><p>正是concat操作造成了densenet出现了比resnet更密集的连接，当每层搜集特征时，就会因为这些连接而造成极大的显存占用。比如100多层的网络最后一层把dense block里的所有feature map都concat起来，单单这一步就秒杀普通显存。</p><p> </p><p>评论列表中有一位大佬<a href="https://www.zhihu.com/people/lai-shen-qi" target="_blank" rel="noopener external nofollow noreferrer"><code>小赖sqLai</code></a>的发言感觉很厉害，他的意思是：</p><blockquote><p>参数数量、计算速度、显存占用三者没有直接关系。比如squeezenet和squeezenext参数只有alexnet几百分之一，性能却持平，显存占用要大好几倍。</p><p>他认为显存占用与推断中所产生的feature map数目有关。有些框架会有优化，自动把比较靠前的层的feature map释放掉，所以显存就会减少，或者inplace操作通过重新计算的方法减少一部分显存，但是densenet因为需要重复利用比较靠前的feature map，所以无法释放，导致显存占用过大。</p></blockquote><p> </p><p>一种高效的实现如下<a href="https://zhuanlan.zhihu.com/p/37189203" target="_blank" rel="noopener external nofollow noreferrer">图9</a>所示，更多细节可以见这篇论文<a href="https://arxiv.org/abs/1707.06990" target="_blank" rel="noopener external nofollow noreferrer">《Memory-Efficient Implementation of DenseNets》</a>。</p><p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-5fd6e90863933b31140dd06bfc05b083_720w.jpg" alt="图9：DenseNet的更高效实现方式" /></p><p> </p><p> </p><p> </p><h2 id="五-densenet性能与结果分析"><a class="markdownIt-Anchor" href="#五-densenet性能与结果分析"></a> 五、<a href="https://www.cnblogs.com/shine-lee/p/12380510.html" target="_blank" rel="noopener external nofollow noreferrer">DenseNet性能与结果分析</a></h2><h4 id="51-性能"><a class="markdownIt-Anchor" href="#51-性能"></a> 5.1 性能</h4><p>DenseNet用于ImageNet的网络架构如<a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="noopener external nofollow noreferrer">表1</a>所示。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/06/UC2mPU.jpg" alt="表1：DenseNet architectures for ImageNet. The growth rate for all the networks is k = 32. Note that each “conv” layer shown in the table corresponds the sequence BN-ReLU-Conv." /></p><p>DenseNet的<strong>Parameter Efficiency</strong>很高，<strong>可以用少得多的参数和计算复杂度，取得与ResNet相当的性能</strong>，如下<a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="noopener external nofollow noreferrer">图10</a>所示。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/06/UC2QM9.jpg" alt="图10：Comparison of the DenseNets and ResNets top-1 error rates(single-crop testing) on the ImageNet validation dataset as a function of learned parameters(left) and FLOPs during test-time (right)." /></p><p> </p><p> </p><h4 id="52-反向传播分析"><a class="markdownIt-Anchor" href="#52-反向传播分析"></a> 5.2 反向传播分析</h4><p>DenseNet最终的输出为前面各层输出的拼接，在反向传播时，这种连接方式可以将最终损失直接回传到前面的各个隐藏层，相当于某种<strong>Implicit Deep Supervision</strong>，<strong>强迫各个隐藏层学习到更有区分里的特征</strong>。</p><p>DenseNet对feature map的使用方式可以看成是某种<strong>多尺度特征融合</strong>，文中称之为<strong>feature reuse</strong>，也可以看成是某种“<strong>延迟决定</strong>”，<strong>综合前面各环节得到的信息再决定当前层的行为</strong>。文中可视化了同block内每层对前面层的依赖程度，见论文：</p><blockquote><p>For each convolutional layer ‘ within a block, we compute the average (absolute) weight assigned to connections with layers. Figure 5 shows a heat-map for all three dense blocks. The average absolute<br />weight serves as a surrogate for the dependency of a convolutional layer on its preceding layers.</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/06/UC2KxJ.jpg" alt="" /></p><p><a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="noopener external nofollow noreferrer">图11</a>中可见每个Dense Block中每层对前面层的依赖程度，约接近红色表示依赖程度越高，可以看到，</p><ul><li>Dense Block内，每个层对其前面的feature map利用方式（依赖程度）是不一样的，相当于某种“<strong>注意力</strong>”</li><li>Transition Layer 以及最后的Classification Layer对其前面<strong>相对宏观的特征依赖较高</strong>，这种趋势越深越明显</li></ul><p> </p><p> </p><p> </p><h2 id="六-代码实现"><a class="markdownIt-Anchor" href="#六-代码实现"></a> 六、代码实现</h2><p>在<a href="https://hansy.tech/2020/06/2013076781.html">基于简单的全连接网络实现 MNIST 手写体数据集的训练与识别</a>的基础上重写<code>Mnist_Base</code>类，其余代码相同。</p><p>由于网络结构复杂，所以将搭建模型的步骤分离。程序分为<code>train.py</code>和<code>model.py</code>。运行<code>train.py</code>即可。</p><p><font color=blue>model.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment">#  二：搭建网络结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建瓶颈层，相当于每一个稠密块中若干个相同的H函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottleNeck</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="comment"># growth_rate对应的是论文中的增长率k，指经过一个BottleNet输出的特征图的通道数；drop_rate指失活率。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, growth_rate, drop_rate)</span>:</span></span><br><span class="line">        super(BottleNeck, self).__init__()</span><br><span class="line">        self.bn1 = layers.BatchNormalization()</span><br><span class="line">        self.conv1 = layers.Conv2D(filters=<span class="number">4</span> * growth_rate,  <span class="comment"># 使用1*1卷积核将通道数降维到4*k</span></span><br><span class="line">                                            kernel_size=(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                            strides=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="string">"same"</span>)</span><br><span class="line">        self.bn2 = layers.BatchNormalization()</span><br><span class="line">        self.conv2 = layers.Conv2D(filters=growth_rate,  <span class="comment"># 使用3*3卷积核，使得输出维度（通道数）为k</span></span><br><span class="line">                                            kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                                            strides=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="string">"same"</span>)</span><br><span class="line">        self.dropout = layers.Dropout(rate=drop_rate)</span><br><span class="line">        <span class="comment"># 将网络层存入一个列表中</span></span><br><span class="line">        self.listLayers = [self.bn1,</span><br><span class="line">                           layers.Activation(<span class="string">"relu"</span>),</span><br><span class="line">                           self.conv1,</span><br><span class="line">                           self.bn2,</span><br><span class="line">                           layers.Activation(<span class="string">"relu"</span>),</span><br><span class="line">                           self.conv2,</span><br><span class="line">                           self.dropout]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        y = x</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.listLayers.layers:</span><br><span class="line">            y = layer(y)</span><br><span class="line">        <span class="comment"># 每经过一个BottleNet，将输入和输出按通道连结。作用是：将前l层的输入连结起来，作为下一个BottleNet的输入。</span></span><br><span class="line">        y = layers.concatenate([x, y], axis=<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建稠密块，由若干个相同的瓶颈层构成</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DenseBlock</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="comment"># num_layers表示该稠密块存在BottleNet的个数，也就是一个稠密块的层数L</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_layers, growth_rate, drop_rate=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">        super(DenseBlock, self).__init__()</span><br><span class="line">        self.num_layers = num_layers</span><br><span class="line">        self.growth_rate = growth_rate</span><br><span class="line">        self.drop_rate = drop_rate</span><br><span class="line">        self.listLayers = []</span><br><span class="line">        <span class="comment"># 一个DenseBlock由多个相同的BottleNeck构成，我们将它们放入一个列表中。</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_layers):</span><br><span class="line">            self.listLayers.append(BottleNeck(growth_rate=self.growth_rate, drop_rate=self.drop_rate))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.listLayers.layers:</span><br><span class="line">            x = layer(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建过渡层</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionLayer</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="comment"># out_channels代表输出通道数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, out_channels)</span>:</span></span><br><span class="line">        super(TransitionLayer, self).__init__()</span><br><span class="line">        self.bn = layers.BatchNormalization()</span><br><span class="line">        self.conv = layers.Conv2D(filters=out_channels,</span><br><span class="line">                                           kernel_size=(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                           strides=<span class="number">1</span>,</span><br><span class="line">                                           padding=<span class="string">"same"</span>)</span><br><span class="line">        self.pool = layers.MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>),   <span class="comment"># 2倍下采样</span></span><br><span class="line">                                              strides=<span class="number">2</span>,</span><br><span class="line">                                              padding=<span class="string">"same"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        x = self.bn(inputs)</span><br><span class="line">        x = tf.keras.activations.relu(x)</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = self.pool(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建Mnist_ResNet整体网络结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_ResNet</span><span class="params">(tf.keras.Model)</span>:</span></span><br><span class="line">    <span class="comment"># num_init_features:代表初始的通道数，即输入第一个稠密块时的通道数</span></span><br><span class="line">    <span class="comment"># growth_rate:对应的是论文中的增长率k，指经过一个BottleNet输出的特征图的通道数</span></span><br><span class="line">    <span class="comment"># block_layers:每个稠密块中的BottleNet的个数</span></span><br><span class="line">    <span class="comment"># compression_rate:压缩因子，其值在(0,1]范围内</span></span><br><span class="line">    <span class="comment"># drop_rate：失活率</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_init_features, growth_rate, block_layers, compression_rate, drop_rate)</span>:</span></span><br><span class="line">        super(Mnist_ResNet, self).__init__()</span><br><span class="line">        <span class="comment"># 第一层，7*7的卷积层，2倍下采样。</span></span><br><span class="line">        self.conv = layers.Conv2D(filters=num_init_features,</span><br><span class="line">                                           kernel_size=(<span class="number">7</span>, <span class="number">7</span>),</span><br><span class="line">                                           strides=<span class="number">2</span>,</span><br><span class="line">                                           padding=<span class="string">"same"</span>)</span><br><span class="line">        self.bn = layers.BatchNormalization()</span><br><span class="line">        <span class="comment"># 最大池化层，3*3卷积核，2倍下采样</span></span><br><span class="line">        self.pool = layers.MaxPool2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">"same"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 稠密块 Dense Block(1)</span></span><br><span class="line">        self.num_channels = num_init_features</span><br><span class="line">        self.dense_block_1 = DenseBlock(num_layers=block_layers[<span class="number">0</span>], growth_rate=growth_rate, drop_rate=drop_rate)</span><br><span class="line">        <span class="comment"># 该稠密块总的输出的通道数</span></span><br><span class="line">        self.num_channels += growth_rate * block_layers[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 对特征图的通道数进行压缩</span></span><br><span class="line">        self.num_channels = compression_rate * self.num_channels</span><br><span class="line">        <span class="comment"># 过渡层1，过渡层进行下采样</span></span><br><span class="line">        self.transition_1 = TransitionLayer(out_channels=int(self.num_channels))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 稠密块 Dense Block(2)</span></span><br><span class="line">        self.dense_block_2 = DenseBlock(num_layers=block_layers[<span class="number">1</span>], growth_rate=growth_rate, drop_rate=drop_rate)</span><br><span class="line">        self.num_channels += growth_rate * block_layers[<span class="number">1</span>]</span><br><span class="line">        self.num_channels = compression_rate * self.num_channels</span><br><span class="line">        <span class="comment"># 过渡层2，2倍下采样，输出：14*14</span></span><br><span class="line">        self.transition_2 = TransitionLayer(out_channels=int(self.num_channels))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 稠密块 Dense Block(3)</span></span><br><span class="line">        self.dense_block_3 = DenseBlock(num_layers=block_layers[<span class="number">2</span>], growth_rate=growth_rate, drop_rate=drop_rate)</span><br><span class="line">        self.num_channels += growth_rate * block_layers[<span class="number">2</span>]</span><br><span class="line">        self.num_channels = compression_rate * self.num_channels</span><br><span class="line">        <span class="comment"># 过渡层3，2倍下采样</span></span><br><span class="line">        self.transition_3 = TransitionLayer(out_channels=int(self.num_channels))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 稠密块 Dense Block(4)</span></span><br><span class="line">        self.dense_block_4 = DenseBlock(num_layers=block_layers[<span class="number">3</span>], growth_rate=growth_rate, drop_rate=drop_rate)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 全局平均池化，输出size：1*1</span></span><br><span class="line">        self.avgpool = layers.GlobalAveragePooling2D()</span><br><span class="line">        <span class="comment"># 全连接层，进行10分类</span></span><br><span class="line">        self.fc = layers.Dense(units=<span class="number">10</span>, activation=tf.keras.activations.softmax)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        x = self.conv(inputs)</span><br><span class="line">        x = self.bn(x)</span><br><span class="line">        x = tf.keras.activations.relu(x)</span><br><span class="line">        x = self.pool(x)</span><br><span class="line"></span><br><span class="line">        x = self.dense_block_1(x)</span><br><span class="line">        x = self.transition_1(x)</span><br><span class="line">        x = self.dense_block_2(x)</span><br><span class="line">        x = self.transition_2(x)</span><br><span class="line">        x = self.dense_block_3(x)</span><br><span class="line">        x = self.transition_3(x,)</span><br><span class="line">        x = self.dense_block_4(x)</span><br><span class="line"></span><br><span class="line">        x = self.avgpool(x)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">densenet</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Mnist_ResNet(num_init_features=<span class="number">64</span>, growth_rate=<span class="number">32</span>, block_layers=[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>], compression_rate=<span class="number">0.5</span>, drop_rate=<span class="number">0.5</span>)       <span class="comment">#Mnist数据集</span></span><br><span class="line">    <span class="comment"># return Mnist_ResNet(num_init_features=64, growth_rate=32, block_layers=[4, 4, 4, 4], compression_rate=0.5, drop_rate=0.5)  #Cifar10数据集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myModel=densenet()    <span class="comment">#实例化</span></span><br></pre></td></tr></table></figure><p><font color=blue>train.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Flatten,Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(threshold=np.inf)  <span class="comment">#设置print输出格式，通过np.inf使完全输出，不允许用省略号代替</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> myModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  一：导入数据集，设定训练集和测试集的特征和标签</span></span><br><span class="line">mnist = tf.keras.datasets.mnist                         <span class="comment">#下载手写数字数据集</span></span><br><span class="line">(x_train,y_train),(x_test,y_test) = mnist.load_data()   <span class="comment">#指定训练集和测试集的输入特征和标签</span></span><br><span class="line">x_train , x_test = x_train/<span class="number">255.0</span> , x_test/<span class="number">255.0</span>         <span class="comment">#对输入网络的特征进行归一化。全部转化为0到1之间的数，数值变小有利于神经网络的吸收</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：如果有卷积层，数据集又是单通道灰度图片（如本数据集mnist），需要添加如下两行代码。 具体参考：https://blog.csdn.net/tushuguan_sun/article/details/105914661</span></span><br><span class="line">x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)  </span><br><span class="line">x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  二：搭建网络结构myModel （见另一文件）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  三：配置训练方法</span></span><br><span class="line">myModel.compile(</span><br><span class="line">    optimizer=<span class="string">'adam'</span>,    <span class="comment">#优化器选择adam</span></span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),  <span class="comment">#损失函数选择SparseCategoricalCrossentropy，因为前面已经保证输出满足概率分布，所以这里from_logits=False</span></span><br><span class="line">    metrics=[<span class="string">'sparse_categorical_accuracy'</span>]   <span class="comment">#数据集中标签是数值，输出结果y是概率分布，所以衡量方法选择sparse_categorical_accuracy</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  （断点续训，存取模型参数。  在下次训练时，从之前获取的最优的参数开始，提高了准确率）</span></span><br><span class="line">    <span class="comment">#读取模型</span></span><br><span class="line">checkpoint_save_path=<span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path+<span class="string">'.index'</span>):   <span class="comment">#生成ckpt文件时会自动生成索引文件，所以拿它的索引文件来判断</span></span><br><span class="line">    print(<span class="string">'------加载已有模型------'</span>)</span><br><span class="line">    myModel.load_weights(checkpoint_save_path)       <span class="comment">#如果存在模型，则直接读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(   <span class="comment">#使用tf给出的回调函数来保存模型参数</span></span><br><span class="line">    filepath=checkpoint_save_path,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,    <span class="comment">#是否只保留模型参数</span></span><br><span class="line">    save_best_only=<span class="literal">True</span>        <span class="comment">#是否只保留最优结果</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  四：执行训练过程</span></span><br><span class="line">history = myModel.fit(</span><br><span class="line">    x_train,y_train,</span><br><span class="line">    batch_size=<span class="number">64</span>,                          <span class="comment">#每次喂入网络64组数据</span></span><br><span class="line">    epochs=<span class="number">10</span>,                              <span class="comment">#数据集迭代10次</span></span><br><span class="line">    validation_data=(x_test,y_test),</span><br><span class="line">    validation_freq=<span class="number">1</span>,                      <span class="comment">#每迭代一次训练集执行一次测试集的评测</span></span><br><span class="line">    callbacks=[cp_callback])                <span class="comment">#加入回调选项，返回给history。（如果不用断点续训，则不用写 “history=” 和 “callbacks=[cp_callback]” ）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> myModel.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过写入到txt文本的方式查看断点续训时保存的参数</span></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> myModel.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  五：打印网络结构和参数信息</span></span><br><span class="line">myModel.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  六：展示acc和loss曲线 (断点续训中history里已经保存好了)</span></span><br><span class="line">acc = history.history[<span class="string">'sparse_categorical_accuracy'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_sparse_categorical_accuracy'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(acc,label=<span class="string">'Training Accuracy'</span>)</span><br><span class="line">plt.plot(val_acc,label=<span class="string">'Validation Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Accuracy'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(loss,label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(val_loss,label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><blockquote><p><strong>参考：</strong><br />He K , Zhang X , Ren S , et al. Deep Residual Learning for Image Recognition[J]. 2015.<br /><a href="https://zhuanlan.zhihu.com/p/37189203" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/37189203</a><br /><a href="https://zhuanlan.zhihu.com/p/29559120" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/29559120</a><br /><a href="https://d2l.ai/chapter_convolutional-modern/densenet.html" target="_blank" rel="noopener external nofollow noreferrer">https://d2l.ai/chapter_convolutional-modern/densenet.html</a><br /><a href="https://www.cnblogs.com/nowgood/p/DenseNet.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/nowgood/p/DenseNet.html</a><br /><a href="https://github.com/madobet/webooru/issues/173" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/madobet/webooru/issues/173</a><br /><a href="https://www.cnblogs.com/skyfsm/p/8451834.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/skyfsm/p/8451834.html</a><br /><a href="https://www.cnblogs.com/shine-lee/p/12380510.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/shine-lee/p/12380510.html</a><br /><a href="https://blog.csdn.net/wjinjie/article/details/105900283" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/wjinjie/article/details/105900283</a><br /><a href="https://chmx0929.gitbook.io/machine-learning/ji-suan-ji-shi-jue/ji-suan-ji-shi-jue/tu-xiang-fen-lei/densenet" target="_blank" rel="noopener external nofollow noreferrer">https://chmx0929.gitbook.io/machine-learning/ji-suan-ji-shi-jue/ji-suan-ji-shi-jue/tu-xiang-fen-lei/densenet</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 经典卷积网络模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> 经典卷积网络模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ResNet模型实现MNIST手写体数据集的训练</title>
      <link href="/2020/06/2398542062.html"/>
      <url>/2020/06/2398542062.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《Deep Residual Learning for Image Recognition》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/pdf/1512.03385.pdf</a><br /><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/iy18qe7k9ni" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/iy18qe7k9ni</a></p>    </div></div><p> </p><p> </p><p>ResNet 是<a href="http://kaiminghe.com/" target="_blank" rel="noopener external nofollow noreferrer">何凯明</a>团队的作品，诞生于2015年，是当年ImageNet竞赛的冠军，Top5错误率为3.57%，对应的论文 <a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener external nofollow noreferrer">《Deep Residual Learning for Image Recognition》</a>是 2016 CVPR 最佳论文。ResNet 的 Res 是 Residual 的缩写，它的用意在于引入<strong>层间残差跳连</strong>，让神经网络能够越来越深，准确率越来越高。</p><p> </p><h2 id="一-问题引入"><a class="markdownIt-Anchor" href="#一-问题引入"></a> 一、问题引入</h2><p>我们纵览之前几个卷积神经网络层数，可以看出其发展基本上是建立在层数不断增多的基础上的。</p><table><thead><tr><th style="text-align:center">模型名称</th><th style="text-align:center">网络层数</th></tr></thead><tbody><tr><td style="text-align:center">LeNet</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">AlexNet</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">VGG</td><td style="text-align:center">16 / 19</td></tr><tr><td style="text-align:center">GoogLeNet</td><td style="text-align:center">22</td></tr></tbody></table><p>ResNet的作者何凯明在<code>cifar10</code>数据集上测试，他发现56层卷积网络的错误率要高于20层卷积网络的错误率。</p><p>结果如<a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener external nofollow noreferrer">图1</a>所示。</p><p>​                  <img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NXTdVf.png" alt="图1：20层与56层网络在CIFAR-10上的误差" style="zoom:80%;" /></p><p>对浅层网络逐渐叠加layers，模型在训练集和测试集上的性能会变好，因为模型复杂度更高了，表达能力更强了，可以对潜在的映射关系拟合得更好，但当网络达到一定深度后再一味地增加层数并不能带来进一步地分类性能提高，反而会导致网络收敛变得更慢，神经网络模型退化。</p><p> </p><p>那为什么会这样呢？</p><p>知乎上有一篇文章分析的很有意思，见<a href="https://www.zhihu.com/question/64494691/answer/786270699" target="_blank" rel="noopener external nofollow noreferrer">【Resnet到底在解决一个什么问题呢？ - 薰风初入弦的回答 - 知乎】</a></p><p><strong>文章作者分析如下：</strong></p><p>通过数学计算，可以排除CNN的两个老问题，即过拟合和梯度弥散。</p><ul><li>对于前者：因为过拟合的现象是&quot;高方差，低偏差&quot;，即测试误差大而训练误差小。但实际上，深层CNN的训练误差和测试误差都很大（由上图可得）。</li><li>对于后者：因为我们在卷积时会经常加上Bacth Normalization操作(简称BN)，**而BN的作用本质上是控制每层输入的模值，**因此梯度的爆炸/消失现象理应在很早就被解决了（至少解决了大半）。</li></ul><p> </p><p>那原因到底是什么呢？</p><p>MobileNet V2的论文[1]也提到过类似的现象，由于非线性激活函数Relu的存在，每次输入到输出的过程都几乎是不可逆的（信息损失）。我们很难从输出反推回完整的输入。如<a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener external nofollow noreferrer">图2</a>所示。</p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/50/v2-e0e43e18c61a82e24e5a837740843963_hd.jpg" alt="图2：去掉低维的Relu以保留信息" style="zoom:50%;" /><p><strong>作者总结：</strong><font color=red>也许赋予神经网络无限可能性的 “非线性” 让神经网络模型走得太远，以至于忘记了为什么出发（想想还挺哲学）。这也使得特征随着层层前向传播得到完整保留（什么也不做）的可能性都微乎其微。用学术点的话说，这种 “不忘初心”  or  “什么都不做” 的品质叫做<strong>恒等映射（identity mapping）</strong>。</font></p><p> </p><p>那么我们作这样一个假设：假设现有一个比较浅的网络已达到了饱和的准确率，这时在它后面再加上几个恒等映射层，这样就增加了网络的深度，并且误差不会增加（因为输出直接等于输入），也即网络至少不会因为继续堆叠而产生退化！而这里提到的使用恒等映射直接将前一层输出传到后面的思想，便是著名深度残差网络ResNet的灵感来源。</p><p> </p><p> </p><p> </p><h2 id="二-核心思路"><a class="markdownIt-Anchor" href="#二-核心思路"></a> 二、核心思路</h2><p>何凯明的优化方法是使用一根<strong>跳连线</strong>，将前面的特征直接接到了后边，使输出结果H(x)包含了堆叠卷积的非线性输出F(x)和跳过这两层堆叠卷积直接连接过来的恒等映射x，让他们的对应元素相加。具体如图3所示。（图片来自<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">课堂</a>ppt）</p><p>​                                               <img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NXTwa8.jpg" alt="图3：残差学习单元" style="zoom:50%;" /></p><p>这一操作，有效缓解了神经网络模型堆叠导致的退化，使得神经网络可以向着更深层级发展。</p><div class="note info">            <p>注意：<br />Inception块中的“+”是沿深度方向叠加层数<br />ResNet块中的“+”是特征图像素矩阵里对应元素值直接相加</p>          </div><p> </p><p><strong>跳连线</strong>有一些是实线，有一些是虚线，如<a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener external nofollow noreferrer">图4</a>所示。它们有什么区别呢？<br /><img src= "/img/loading.gif" data-src="https://static.oschina.net/uploads/space/2018/0223/111801_xFea_876354.png" alt="图4：跳连线的两种形式" style="zoom:80%;" /></p><ul><li><p><font color=red>实线的跳连线</font>，表示F(x)和x的通道相同，如上图的第一个粉色矩形和第三个粉色矩形，都是3x3x64的特征图，由于通道相同，所以采用计算方式为H(x)=F(x)+x</p></li><li><p><font color=red>虚线的的跳连线</font>，表示F(x)和x的通道不同，如上图的第一个绿色矩形和第三个绿色矩形，分别是3x3x64和3x3x128的特征图，通道不同，采用的计算方式为H(x)=F(x)+W(x)，其中W是1x1的卷积操作，用来调整x维度的,使W(x)与F(x)的维度一致。</p><blockquote><p>1x1卷积操作可通过步长改变特征图尺寸，通过卷积核个数改变特征图深度</p></blockquote><p> </p></li></ul><p>除了上面提到的两层残差学习单元，还有三层的残差学习单元，如<a href="https://my.oschina.net/u/876354/blog/1622896" target="_blank" rel="noopener external nofollow noreferrer">图5</a>所示。</p><p>​         <img src= "/img/loading.gif" data-src="https://static.oschina.net/uploads/space/2018/0223/111833_m5OE_876354.png" alt="图5：两种残差学习单元" style="zoom: 90%;" /></p><p>两种结构分别针对ResNet34（左图）和ResNet50/101/152（右图），其目的主要就是为了降低参数的数目。左图是两个3x3x256的卷积，参数数目: 3x3x256x256x2 = 1179648，右图是第一个1x1的卷积把256维通道降到64维，然后在最后通过1x1卷积恢复，整体上用的参数数目：1x1x256x64 + 3x3x64x64 + 1x1x64x256 = 69632，右图的参数数量比左图减少了16.94倍 。因此，右图的主要目的就是为了减少参数量，从而减少计算量。</p><p>对于常规的ResNet，34层或者更少的网络用左图；对于更深的网络，则使用右图。</p><p> </p><p>经检验，深度残差网络的确解决了退化问题，如<a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener external nofollow noreferrer">图6</a>所示，左图为平原网络（plain network）网络层次越深（34层）比网络层次浅的（18层）的误差率更高；右图为残差网络ResNet的网络层次越深（34层）比网络层次浅的（18层）的误差率更低。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NXTrGQ.jpg" alt="图6：平原网络与残差网络在不同深度下的误差图" /></p><p> </p><p> </p><p> </p><h2 id="三-resnet块与网络结构"><a class="markdownIt-Anchor" href="#三-resnet块与网络结构"></a> 三、Resnet块与网络结构</h2><p>由上可知，ResNet有两种形式，也就是在堆叠卷积层前后维度相同与否。我们把这两种结构，封装到一个橙色块中，写出ResnetBlock类，如图7所示。（图片来自<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">课堂</a>ppt）</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NXTs2j.jpg" alt="图7：ResnetBlock" /></p><p>每调用一次ResnetBlock类，会生成一个左侧黄色块（内）。</p><p>如果堆叠卷积层前后维度不同，<code>residual_path</code>等于1，调用红色区域代码，使用1x1卷积操作，调整输入特征图inputs的尺寸或深度后，将堆叠卷积输出特征y和if语句计算出的residual相加，过激活，输出（返回out）。</p><p>如果堆叠卷积层前后维度相同，则不执行红色区域代码，直接将堆叠卷积输出特征y和输入特征图inputs相加，过激活，输出（返回out）。</p><p> </p><p>以此作为一个子函数，完成ResNet18（Mnist_ResNet）类，如图8所示。（图片来自<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">课堂</a>ppt）</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NXTDPg.jpg" alt="图8：Mnist_ResNet" /></p><p>左侧框图是ResNet18用CBAPD表示的结构，使用刚刚写出的ResnetBlock，搭建完整的ResNet18代码结构。</p><p>ResNet18的第一层是个卷积，然后是自上而下的8个ResNet块，最后是一个平均池化+全连接。每一个ResNet块有两层卷积，一共是18层网络。</p><ul><li>第一层（紫色块，标号1）采用64个3x3的卷积核，步长为1，全零填充，采用BN操作，relu激活。</li><li>接下来是4个橙色块：第一个橙色块是两条实线跳连的ResNet块，后面三个橙色块是先虚线再实线跳连的ResNet块。用一个for循环（橙色块，标号2）描述，循环次数是由参数列表个数决定，又因为每个块里都是两个卷积层，所以参数列表设置为<code>[2,2,2,2]</code> 。最外层for循环执行4次，每次进来根据当前是第几个元素去寻找第几个橙色块，<code>block_id!=0</code> 表示跳过第一个橙色块，在其他三个橙色块中判断是第几个卷积层，如果是第一个卷积层，则设置<code>residual_path=True</code> 表示当前是虚线连接的，需要增设一个步长为2的1x1卷积核进行维度调整；如果是第二个卷积层，则设置<code>residual_path=False</code> ，去正常的进行H(x)=F(x)+x计算。（对于跳过的第一个橙色块，因为已知都是实线连接，所以都设为<code>residual_path=False</code> ）</li><li>经过global average全局池化</li><li>经过十分类全连接</li></ul><p>输出结果。</p><p> </p><p>原论文给出的网络结构如<a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener external nofollow noreferrer">图9</a>所示。</p><p><img src= "/img/loading.gif" data-src="https://s2.ax1x.com/2020/02/21/3u8Wwj.png" alt="图9：ResNet结构示意图" /></p><p>从上到下分别是有残差的ResNet、没有残差的PlainNet、VGG 。</p><p> </p><p> </p><p> </p><h2 id="四-resnet总结"><a class="markdownIt-Anchor" href="#四-resnet总结"></a> 四、ResNet总结</h2><p>ResNet的设计有如下特点：</p><ul><li>与plain net相比，ResNet多了很多“旁路”，即shortcut路径，其首尾圈出的layers构成一个Residual Block；</li><li>ResNet中，所有的Residual Block都没有pooling层，<strong>降采样是通过conv的stride实现的</strong>；</li><li>分别在conv3_1、conv4_1和conv5_1 Residual Block，降采样1倍，同时feature map数量增加1倍；</li><li><strong>通过Average Pooling得到最终的特征</strong>，而不是通过全连接层；</li><li>每个卷积层之后都紧接着BatchNorm layer，为了简化，图中并没有标出；</li></ul><p><strong>ResNet结构非常容易修改和扩展，通过调整block内的channel数量以及堆叠的block数量，就可以很容易地调整网络的宽度和深度，来得到不同表达能力的网络，而不用过多地担心网络的“退化”问题，只要训练数据足够，逐步加深网络，就可以获得更好的性能表现。</strong></p><p> </p><p> </p><p> </p><h2 id="五-resnet-v2"><a class="markdownIt-Anchor" href="#五-resnet-v2"></a> 五、ResNet V2</h2><p>在ResNet的作者的第二篇相关论文[2]《Identity Mappings in Deep Residual Networks》中，提出了ResNet V2。V2 和 V1 的主要区别在于，作者通过研究 ResNet 残差学习单元的传播公式，发现前馈和反馈信号可以直接传输，因此“shortcut connection”（捷径连接）的非线性激活函数（如ReLU）替换为 Identity Mappings。同时，ResNet V2 在每一层中都使用了 Batch Normalization。这样处理后，新的残差学习单元比以前更容易训练且泛化性更强。</p><p> </p><p> </p><p> </p><h2 id="六-代码实现"><a class="markdownIt-Anchor" href="#六-代码实现"></a> 六、代码实现</h2><p>在<a href="https://hansy.tech/2020/06/2013076781.html">基于简单的全连接网络实现 MNIST 手写体数据集的训练与识别</a>的基础上重写<code>Mnist_Base</code>类，其余代码相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Conv2D, BatchNormalization, Activation, MaxPool2D, Dropout, Flatten, Dense, GlobalAveragePooling2D</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(threshold=np.inf)  <span class="comment">#设置print输出格式，通过np.inf使完全输出，不允许用省略号代替</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  一：导入数据集，设定训练集和测试集的特征和标签</span></span><br><span class="line">mnist = tf.keras.datasets.mnist                         <span class="comment">#下载手写数字数据集</span></span><br><span class="line">(x_train,y_train),(x_test,y_test) = mnist.load_data()   <span class="comment">#指定训练集和测试集的输入特征和标签</span></span><br><span class="line">x_train , x_test = x_train/<span class="number">255.0</span> , x_test/<span class="number">255.0</span>         <span class="comment">#对输入网络的特征进行归一化。全部转化为0到1之间的数，数值变小有利于神经网络的吸收</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)  <span class="comment"># 注意：卷积计算要求输入的图片必须是4个维度的，第0个维度表示一次喂入几个batch，第1、2、3个维度分别表示输入图片的分辨率和通道数。</span></span><br><span class="line">x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)     <span class="comment">#       而mnist数据集是单通道灰度图片，加上batch，才3个维度，即(batch数,row,col)  , 而Conv2D要求有四个参数，即(batch数,row,col,通道数)，所以需要再加一个。  如果数据集是三通道彩色图(如cifar10数据集)，则不需要这个步骤</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  二：搭建网络结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResnetBlock</span><span class="params">(Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filters, strides=<span class="number">1</span>, residual_path=False)</span>:</span></span><br><span class="line">        super(ResnetBlock, self).__init__()</span><br><span class="line">        self.filters = filters</span><br><span class="line">        self.strides = strides</span><br><span class="line">        self.residual_path = residual_path</span><br><span class="line"></span><br><span class="line">        self.c1 = Conv2D(filters, (<span class="number">3</span>, <span class="number">3</span>), strides=strides, padding=<span class="string">'same'</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">'relu'</span>)</span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters, (<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">1</span>, padding=<span class="string">'same'</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b2 = BatchNormalization()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># residual_path为True时，对输入进行下采样，即用1x1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span></span><br><span class="line">        <span class="keyword">if</span> residual_path:</span><br><span class="line">            self.down_c1 = Conv2D(filters, (<span class="number">1</span>, <span class="number">1</span>), strides=strides, padding=<span class="string">'same'</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">            self.down_b1 = BatchNormalization()</span><br><span class="line">        </span><br><span class="line">        self.a2 = Activation(<span class="string">'relu'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        residual = inputs  <span class="comment"># residual等于输入值本身，即residual=x</span></span><br><span class="line">        <span class="comment"># 将输入通过卷积、BN层、激活层，计算F(x)</span></span><br><span class="line">        x = self.c1(inputs)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line"></span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        y = self.b2(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.residual_path:</span><br><span class="line">            residual = self.down_c1(inputs)</span><br><span class="line">            residual = self.down_b1(residual)</span><br><span class="line"></span><br><span class="line">        out = self.a2(y + residual)  <span class="comment"># 最后输出的是两部分的和，即F(x)+x或F(x)+Wx,再过激活函数</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_ResNet</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, block_list, initial_filters=<span class="number">64</span>)</span>:</span>  <span class="comment"># block_list表示每个block有几个卷积层</span></span><br><span class="line">        super(Mnist_ResNet, self).__init__()</span><br><span class="line">        self.num_blocks = len(block_list)  <span class="comment"># 共有几个block</span></span><br><span class="line">        self.block_list = block_list</span><br><span class="line">        self.out_filters = initial_filters</span><br><span class="line">        self.c1 = Conv2D(self.out_filters, (<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">1</span>, padding=<span class="string">'same'</span>, use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">'relu'</span>)</span><br><span class="line">        self.blocks = tf.keras.models.Sequential()</span><br><span class="line">        <span class="comment"># 构建ResNet网络结构</span></span><br><span class="line">        <span class="keyword">for</span> block_id <span class="keyword">in</span> range(len(block_list)):  <span class="comment"># 第几个resnet block</span></span><br><span class="line">            <span class="keyword">for</span> layer_id <span class="keyword">in</span> range(block_list[block_id]):  <span class="comment"># 第几个卷积层</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> block_id != <span class="number">0</span> <span class="keyword">and</span> layer_id == <span class="number">0</span>:  <span class="comment"># 对除第一个block以外的每个block的输入进行下采样</span></span><br><span class="line">                    block = ResnetBlock(self.out_filters, strides=<span class="number">2</span>, residual_path=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    block = ResnetBlock(self.out_filters, residual_path=<span class="literal">False</span>)</span><br><span class="line">                self.blocks.add(block)  <span class="comment"># 将构建好的block加入resnet</span></span><br><span class="line">            self.out_filters *= <span class="number">2</span>  <span class="comment"># 下一个block的卷积核数是上一个block的2倍</span></span><br><span class="line">        self.p1 = tf.keras.layers.GlobalAveragePooling2D()</span><br><span class="line">        self.f1 = tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>, kernel_regularizer=tf.keras.regularizers.l2())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        x = self.c1(inputs)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line">        x = self.blocks(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        y = self.f1(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = Mnist_ResNet([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])    <span class="comment">#实例化。参数列表很讲究，必须是4个2，作用于嵌套的两个for循环</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  三：配置训练方法</span></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=<span class="string">'adam'</span>,    <span class="comment">#优化器选择adam</span></span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),  <span class="comment">#损失函数选择SparseCategoricalCrossentropy，因为前面已经保证输出满足概率分布，所以这里from_logits=False</span></span><br><span class="line">    metrics=[<span class="string">'sparse_categorical_accuracy'</span>]   <span class="comment">#数据集中标签是数值，输出结果y是概率分布，所以衡量方法选择sparse_categorical_accuracy</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  （断点续训，存取模型参数。  在下次训练时，从之前获取的最优的参数开始，提高了准确率）</span></span><br><span class="line">    <span class="comment">#读取模型</span></span><br><span class="line">checkpoint_save_path=<span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path+<span class="string">'.index'</span>):   <span class="comment">#生成ckpt文件时会自动生成索引文件，所以拿它的索引文件来判断</span></span><br><span class="line">    print(<span class="string">'------加载已有模型------'</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)       <span class="comment">#如果存在模型，则直接读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(   <span class="comment">#使用tf给出的回调函数来保存模型参数</span></span><br><span class="line">    filepath=checkpoint_save_path,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,    <span class="comment">#是否只保留模型参数</span></span><br><span class="line">    save_best_only=<span class="literal">True</span>        <span class="comment">#是否只保留最优结果</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  四：执行训练过程</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    x_train,y_train,</span><br><span class="line">    batch_size=<span class="number">128</span>,                         <span class="comment">#每次喂入网络128组数据（性能差的电脑为了加快拟合，可以设置的大一点）</span></span><br><span class="line">    epochs=<span class="number">3</span>,                               <span class="comment">#数据集迭代10次</span></span><br><span class="line">    validation_data=(x_test,y_test),</span><br><span class="line">    validation_freq=<span class="number">1</span>,                      <span class="comment">#每迭代一次训练集执行一次测试集的评测</span></span><br><span class="line">    callbacks=[cp_callback])                <span class="comment">#加入回调选项，返回给history。（如果不用断点续训，则不用写 “history=” 和 “callbacks=[cp_callback]” ）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过写入到txt文本的方式查看断点续训时保存的参数</span></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  五：打印网络结构和参数信息</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  六：展示acc和loss曲线 (断点续训中history里已经保存好了)</span></span><br><span class="line">acc = history.history[<span class="string">'sparse_categorical_accuracy'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_sparse_categorical_accuracy'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(acc,label=<span class="string">'Training Accuracy'</span>)</span><br><span class="line">plt.plot(val_acc,label=<span class="string">'Validation Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Accuracy'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(loss,label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(val_loss,label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><blockquote><p><strong>参考：</strong><br />[1] Sandler M, Howard A, Zhu M, et al. MobileNetV2: Inverted Residuals and Linear Bottlenecks[J]. 2018.<br />[2] He K , Zhang X , Ren S , et al. Identity Mappings in Deep Residual Networks[J]. 2016.<br /><a href="https://www.cnblogs.com/shine-lee/p/12363488.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/shine-lee/p/12363488.html</a><br /><a href="https://my.oschina.net/u/876354/blog/1622896" target="_blank" rel="noopener external nofollow noreferrer">https://my.oschina.net/u/876354/blog/1622896</a><br /><a href="https://www.zhihu.com/question/64494691/answer/786270699" target="_blank" rel="noopener external nofollow noreferrer">https://www.zhihu.com/question/64494691/answer/786270699</a><br /><a href="https://www.jianshu.com/p/93990a641066" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/93990a641066</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 经典卷积网络模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> 经典卷积网络模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于GoogLeNet模型实现MNIST手写体数据集的训练</title>
      <link href="/2020/06/772168442.html"/>
      <url>/2020/06/772168442.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《Going deeper with convolution》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="https://arxiv.org/pdf/1409.4842.pdf" target="_blank" rel="noopener external nofollow noreferrer">https://arxiv.org/pdf/1409.4842.pdf</a><br /><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/iVuzte6p24b" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/iVuzte6p24b</a></p>    </div></div><p> </p><p> </p><p>GoogLeNet（也就是InceptionNet v1版本）诞生于2014年，当年ImageNet竟赛冠军，Top5错误率为6.67%。</p><div class="note info">            <p>VGG获得了第二名，Top5错误率为7.32%。VGG继承了LeNet以及AlexNet的一些框架结构，而GoogLeNet则做了更加大胆的网络结构尝试，虽然深度只有22层，但大小却比AlexNet和VGG小很多：GoogleNet参数为500万个，AlexNet参数个数是GoogleNet的12倍，VGGNet参数又是AlexNet的3倍，因此在内存或计算资源有限时，GoogleNet是比较好的选择；从模型结果来看，GoogLeNet的性能却更加优越。</p><blockquote><p>小知识：<br />GoogLeNet是谷歌（Google）研究出来的深度网络结构，为什么不叫“GoogleNet”，而叫“GoogLeNet”，据说是为了向“LeNet”致敬，因此取名为“GoogLeNet”</p></blockquote>          </div><p> </p><h2 id="一-模型引入"><a class="markdownIt-Anchor" href="#一-模型引入"></a> 一、模型引入</h2><p>一般来说，提升网络性能最直接的办法就是增加网络深度和宽度，深度指网络层次数量、宽度指神经元数量（如AlexNet、VGG等结构）。但这种方式存在以下问题：</p><ol><li>参数太多，如果训练数据集有限，很容易产生过拟合</li><li>网络越大、参数越多，计算复杂度越大，难以应用</li><li>网络越深，容易出现梯度弥散问题（梯度越往后穿越容易消失），难以优化模型。</li></ol><p> </p><p>解决这些问题的方法当然就是在增加网络深度和宽度的同时减少参数，为了减少参数，自然就想到将全连接变成稀疏连接。但是在实现上，使用稀疏矩阵算法来进行计算虽然计算量会大大减少，但会增加中间缓存（稀疏矩阵的计算方法的特性）。</p><p> </p><p>那么，有没有一种方法既能保持网络结构的稀疏性，又能利用密集矩阵的高计算性能。大量的文献表明可以将稀疏矩阵聚类为较为密集的子矩阵来提高计算性能（参考下图4）；另一种利用数据稀疏性的方法是在特征维度进行利用，比如ConvNets结构，它使用特征连接表来决定哪些卷积的输出才累加到一起（普通结构使用一个卷积核对所有输入特征做卷积，再将所有结果累加到一起，输出一个特征，而ConvNets是选择性的对某些卷积结果做累加）。ConvNets利用稀疏性的方法现在已经很少用了，因为只有在特征维度上进行全连接才能更高效的利用gpu的并行计算的能力，否则你就得为这样的特征连接表单独设计cuda的接口函数，单独设计的函数往往无法最大限度的发挥gpu并行计算的能力。</p><p>因此，GoogLeNet团队提出了Inception网络结构，就是构造一种“基础神经元”结构，来搭建一个稀疏性、高计算性能的网络结构。</p><p><strong>InceptionNet引入了Inception结构块（核心），在同一层网络内使用不同尺寸的卷积核来提取不同尺寸的特征，提升了模型感知力，使用了批标准化，缓解了梯度消失问题。</strong></p><p> </p><p> </p><h2 id="二-inception结构块"><a class="markdownIt-Anchor" href="#二-inception结构块"></a> 二、Inception结构块</h2><p>谷歌提出的最原始Inception的基本结构如<a href="https://arxiv.org/pdf/1409.4842.pdf" target="_blank" rel="noopener external nofollow noreferrer">图1</a>所示。<br /><img src= "/img/loading.gif" data-src="https://static.oschina.net/uploads/space/2018/0317/141510_fIWh_876354.png" alt="图1：Inception原始网络结构" style="zoom:80%;" /><br />该结构将CNN中常用的卷积（1x1，3x3，5x5）、池化操作（3x3）堆叠在一起（卷积、池化后的尺寸相同，将通道相加），一方面增加了网络的宽度，另一方面也增加了网络对尺度的适应性。<br />网络卷积层中的网络能够提取输入的每一个细节信息，同时5x5的滤波器也能够覆盖大部分接受层的的输入。还可以进行一个池化操作，以减少空间大小，降低过度拟合。在这些层之上，在每一个卷积层后都要做一个ReLU操作，以增加网络的非线性特征。<br />然而这个Inception原始版本，所有的卷积核都在上一层的所有输出上来做，而那个5x5的卷积核所需的计算量就太大了，造成了特征图的厚度很大，为了避免这种情况，在3x3前、5x5前、max pooling后分别加上了1x1的卷积核，以起到了降低特征图厚度的作用，这也就形成了Inception v1的网络结构，如<a href="https://arxiv.org/pdf/1409.4842.pdf" target="_blank" rel="noopener external nofollow noreferrer">图2</a>所示。</p><img src= "/img/loading.gif" data-src="https://static.oschina.net/uploads/space/2018/0317/141520_31TH_876354.png" alt="图2：改进后的Inception网络结构" style="zoom:80%;" /><h2 id="三-核心原理"><a class="markdownIt-Anchor" href="#三-核心原理"></a> 三、核心原理</h2><p>具体来说，inception结构的主要特点有两个：</p><ul><li><p>使用1x1的卷积来进行升降维</p></li><li><p>多尺寸卷积再聚合</p></li></ul><p> </p><h3 id="31-1x1卷积"><a class="markdownIt-Anchor" href="#31-1x1卷积"></a> 3.1 1x1卷积</h3><p>可以看到图1中有多个黄色的1x1卷积模块，这样的卷积有什么用处呢？</p><p><strong>作用1</strong>：1x1卷积的主要目的是为了减少维度，还用于修正线性激活（ReLU）。比如，上一层的输出为100x100x128，经过具有256个通道的5x5卷积层之后(stride=1，pad=2)，输出数据为100x100x256，其中，卷积层的参数为128x5x5x256= 819200。而假如上一层输出先经过具有32个通道的1x1卷积层，再经过具有256个输出的5x5卷积层，那么输出数据仍为为100x100x256，但卷积参数量已经减少为128x1x1x32 + 32x5x5x256= 204800，大约减少了4倍。相应的，计算量也会大大的减少。</p><p><strong>作用2</strong>：在相同尺寸的感受野中叠加更多的卷积，能提取到更丰富的特征。这个观点来自于<a href="https://arxiv.org/pdf/1312.4400.pdf" target="_blank" rel="noopener external nofollow noreferrer">Network in Network(NIN)</a>，图2里三个1x1卷积都起到了该作用。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UuNr1U.jpg" alt="图3：线性卷积和NIN结构对比" /></p><p><a href="https://zhuanlan.zhihu.com/p/32702031" target="_blank" rel="noopener external nofollow noreferrer">图3</a>左侧是是传统的卷积层结构（线性卷积），在一个尺度上只有一次卷积；右图是Network in Network结构（NIN结构），先进行一次普通的卷积（比如3x3），紧跟再进行一次1x1的卷积，对于某个像素点来说1x1卷积等效于该像素点在所有特征上进行一次全连接的计算，所以右侧图的1x1卷积画成了全连接层的形式，需要注意的是NIN结构中无论是第一个3x3卷积还是新增的1x1卷积，后面都紧跟着激活函数（比如relu）。将两个卷积串联，就能组合出更多的非线性特征。举个例子，假设第1个3x3卷积＋激活函数近似于f1(x)=ax2+bx+c，第二个1x1卷积＋激活函数近似于f2(x)=mx2+nx+q，那f1(x)和f2(f1(x))比哪个非线性更强，更能模拟非线性的特征？答案是显而易见的。NIN的结构和传统的神经网络中多层的结构有些类似，后者的多层是跨越了不同尺寸的感受野（通过层与层中间加pool层），从而在更高尺度上提取出特征；NIN结构是在同一个尺度上的多层（中间没有pool层），从而在相同的感受野范围能提取更强的非线性。</p><p> </p><h3 id="32-多尺寸卷积再聚合"><a class="markdownIt-Anchor" href="#32-多尺寸卷积再聚合"></a> <strong>3.2 多尺寸卷积再聚合</strong></h3><p>图2可以看到对输入做了4个分支，分别用不同尺寸的filter进行卷积或池化，最后再在特征维度上拼接到一起。这种全新的结构有什么好处呢？Szegedy从多个角度进行了解释：</p><p>**解释1：**在直观感觉上在多个尺度上同时进行卷积，能提取到不同尺度的特征。特征更为丰富也意味着最后分类判断时更加准确。</p><p>**解释2：**利用稀疏矩阵分解成密集矩阵计算的原理来加快收敛速度。例如<a href="https://zhuanlan.zhihu.com/p/32702031" target="_blank" rel="noopener external nofollow noreferrer">图4</a>左侧是个稀疏矩阵（很多元素都为0，不均匀分布在矩阵中），和一个2x2的矩阵进行卷积，需要对稀疏矩阵中的每一个元素进行计算；如果像右图那样把稀疏矩阵分解成2个子密集矩阵，再和2x2矩阵进行卷积，稀疏矩阵中0较多的区域就可以不用计算，计算量就大大降低。**这个原理应用到inception上就是要在特征维度上进行分解！**传统的卷积层的输入数据只和一种尺度（比如3x3）的卷积核进行卷积，输出固定维度（比如256个特征）的数据，所有256个输出特征基本上是均匀分布在3x3尺度范围上，这可以理解成输出了一个稀疏分布的特征集；而inception模块在多个尺度上提取特征（比如1x1，3x3，5x5），输出的256个特征就不再是均匀分布，而是相关性强的特征聚集在一起（比如1x1的的96个特征聚集在一起，3x3的96个特征聚集在一起，5x5的64个特征聚集在一起），这可以理解成多个密集分布的子特征集。这样的特征集中因为相关性较强的特征聚集在了一起，不相关的非关键特征就被弱化，同样是输出256个特征，inception方法输出的特征“冗余”的信息较少。用这样的“纯”的特征集层层传递最后作为反向计算的输入，自然收敛的速度更快。</p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-eacad5957624f2b0dec823af256817cf_720w.jpg" alt="图4: 将稀疏矩阵分解成子密集矩阵来进行计算" style="zoom:80%;" /><p>**解释3：**Hebbin赫布原理。Hebbin原理是神经科学上的一个理论，解释了在学习的过程中脑中的神经元所发生的变化，用一句话概括就是<em>fire togethter, wire together</em>。赫布认为“两个神经元或者神经元系统，如果总是同时兴奋，就会形成一种‘组合’，其中一个神经元的兴奋会促进另一个的兴奋”。比如狗看到肉会流口水，反复刺激后，脑中识别肉的神经元会和掌管唾液分泌的神经元会相互促进，“缠绕”在一起，以后再看到肉就会更快流出口水。用在inception结构中就是要把相关性强的特征汇聚到一起。这有点类似上面的解释2，把1x1，3x3，5x5的特征分开。因为训练收敛的最终目的就是要提取出独立的特征，所以预先把相关性强的特征汇聚，就能起到加速收敛的作用。</p><p>在inception模块中有一个分支使用了max pooling，作者认为pooling也能起到提取特征的作用，所以也加入模块中。注意这个pooling的stride=1，pooling后没有减少数据的尺寸。</p><p> </p><p> </p><p> </p><h2 id="四-网络结构"><a class="markdownIt-Anchor" href="#四-网络结构"></a> 四、网络结构</h2><p>GoogLeNet的网络结构如<a href="https://arxiv.org/pdf/1409.4842.pdf" target="_blank" rel="noopener external nofollow noreferrer">表1</a>所示。<br /><img src= "/img/loading.gif" data-src="https://static.oschina.net/uploads/space/2018/0317/141605_c1XW_876354.png" alt="表1：GoogLeNet网络结构图" /><br /><code>注：上表中的“#3x3 reduce”，“#5x5 reduce”表示在3x3，5x5卷积操作之前使用了1x1卷积的数量。</code></p><p>GoogLeNet网络结构明细表解析如下：</p><ul><li><p><strong>输入</strong><br />原始输入图像为224x224x3，且都进行了零均值化的预处理操作（图像每个像素减去均值）。</p></li><li><p><strong>第一层（卷积层）</strong><br />使用7x7的卷积核（滑动步长2，padding为3），64通道，输出为112x112x64，卷积后进行ReLU操作<br />经过3x3的max pooling（步长为2），输出为((112 - 3+1)/2)+1=56，即56x56x64，再进行ReLU操作</p></li><li><p><strong>第二层（卷积层）</strong><br />使用3x3的卷积核（滑动步长为1，padding为1），192通道，输出为56x56x192，卷积后进行ReLU操作<br />经过3x3的max pooling（步长为2），输出为((56 - 3+1)/2)+1=28，即28x28x192，再进行ReLU操作</p></li><li><p><strong>第三层（Inception层）</strong></p><ul><li><p><code>（Inception 3a层）</code><br />分为四个分支，采用不同尺度的卷积核来进行处理</p><ol><li>64个1x1的卷积核，然后RuLU，输出28x28x64</li><li>（2）96个1x1的卷积核，作为3x3卷积核之前的降维，变成28x28x96，然后进行ReLU计算，再进行128个3x3的卷积（padding为1），输出28x28x128</li><li>（3）16个1x1的卷积核，作为5x5卷积核之前的降维，变成28x28x16，进行ReLU计算后，再进行32个5x5的卷积（padding为2），输出28x28x32</li><li>（4）pool层，使用3x3的核（padding为1），输出28x28x192，然后进行32个1x1的卷积，输出28x28x32。<br />将四个结果进行连接，对这四部分输出结果的第三维并联，即64+128+32+32=256，最终输出28x28x256</li></ol></li><li><p><code>（Inception 3b层）</code></p><ol><li><p>128个1x1的卷积核，然后RuLU，输出28x28x128</p></li><li><p>（2）128个1x1的卷积核，作为3x3卷积核之前的降维，变成28x28x128，进行ReLU，再进行192个3x3的卷积（padding为1），输出28x28x192</p></li><li><p>（3）32个1x1的卷积核，作为5x5卷积核之前的降维，变成28x28x32，进行ReLU计算后，再进行96个5x5的卷积（padding为2），输出28x28x96</p></li><li><p>（4）pool层，使用3x3的核（padding为1），输出28x28x256，然后进行64个1x1的卷积，输出28x28x64。</p><p>将四个结果进行连接，对这四部分输出结果的第三维并联，即128+192+96+64=480，最终输出输出为28x28x480</p></li></ol></li></ul></li><li><p><strong>第四层</strong>（4a,4b,4c,4d,4e）、<strong>第五层</strong>（5a,5b）……，与3a、3b类似，在此就不再重复。</p></li></ul><p> </p><p> </p><p> </p><h2 id="五-模型总结"><a class="markdownIt-Anchor" href="#五-模型总结"></a> 五、模型总结</h2><ul><li>GoogLeNet采用了模块化的结构（Inception结构），方便增添和修改；</li><li>网络最后采用了average pooling（平均池化）来代替全连接层，该想法来自NIN（Network in Network），具体做法就是对每一个feature上的所有点做平均，有n个feature就输出n个平均值作为最后的softmax的输入，事实证明这样可以将准确率提高0.6%。另外，对数据在整个feature上作正则化，防止了过拟合；并且不用再关注输入图像的尺寸，因为不管是怎样的输入都是一样的平均方法，传统的全连接层要根据尺寸来选择参数数目，不具有通用性。但是，实际在最后还是加了一个全连接层，主要是为了方便对输出进行灵活调整；</li><li>虽然移除了全连接，但是网络中依然使用了Dropout ;</li><li>在某些层级上加了分支分类器，输出的loss乘以个系数再加到总的loss上，作者认为可以防止梯度消失问题（作者在后来的inception v3论文中做了澄清：这种做法在较低的层级上这样处理基本没作用）。</li></ul><p> </p><p> </p><p> </p><h2 id="六-核心代码"><a class="markdownIt-Anchor" href="#六-核心代码"></a> 六、核心代码</h2><p>在正式的v1结构版本中，送到卷积连接器的特征数据尺寸相同，卷积连接器会把收到的这四路特征数据按<strong>深度方向</strong>堆叠在一起，形成Inception结构块的输出。可用颜色把相应模块用CBAPD操作表示出来，如图5所示（图片来自<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">课堂</a>ppt）：</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/30/NIN2wt.jpg" alt="图5：Inception代码结构" /></p><p>由于Inception结构块中的卷积均采用了CBA结构（先卷积，再BN，再采用relu激活函数），所以将其定义为一个新的类ConvBNRelu，可以减少代码长度，增加可读性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvBNRelu</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ch,kernelsz=<span class="number">3</span>,strides=<span class="number">1</span>,padding=<span class="string">'same'</span>)</span>:</span></span><br><span class="line">        super(ConvBNRelu, self).__init__()</span><br><span class="line">        self.model = tf.keras.models.Sequential([</span><br><span class="line">            Conv2D(ch,kernelsz,strides=strides,padding=padding),</span><br><span class="line">            BatchNormalization(),</span><br><span class="line">            Activation(<span class="string">'relu'</span>)])</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self,x)</span>:</span></span><br><span class="line">            x = self.model(x)</span><br><span class="line">            <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p> </p><p>对四个分支分别进行实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InceptionBlk</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ch, strides=<span class="number">1</span>)</span>:</span></span><br><span class="line">        super(InceptionBlk, self).__init__()</span><br><span class="line">        self.ch = ch</span><br><span class="line">        self.strides = strides</span><br><span class="line">        self.c1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)       <span class="comment">#第一个分支</span></span><br><span class="line">        self.c2_1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)     <span class="comment">#第二个分支</span></span><br><span class="line">        self.c2_2 = ConvBNRelu(ch, kernelsz=<span class="number">3</span>, strides=<span class="number">1</span>)</span><br><span class="line">        self.c3_1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)     <span class="comment">#第三个分支</span></span><br><span class="line">        self.c3_2 = ConvBNRelu(ch, kernelsz=<span class="number">5</span>, strides=<span class="number">1</span>)</span><br><span class="line">        self.p4_1 = MaxPool2D(<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="string">'same'</span>)         <span class="comment">#第四个分支</span></span><br><span class="line">        self.c4_2 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x1 = self.c1(x)                 <span class="comment">#第一个分支的输出</span></span><br><span class="line">        x2_1 = self.c2_1(x)</span><br><span class="line">        x2_2 = self.c2_2(x2_1)          <span class="comment">#第二个分支的输出</span></span><br><span class="line">        x3_1 = self.c3_1(x)</span><br><span class="line">        x3_2 = self.c3_2(x3_1)          <span class="comment">#第三个分支的输出</span></span><br><span class="line">        x4_1 = self.p4_1(x)</span><br><span class="line">        x4_2 = self.c4_2(x4_1)          <span class="comment">#第四个分支的输出</span></span><br><span class="line">        <span class="comment"># concat along axis=channel</span></span><br><span class="line">        x = tf.concat([x1, x2_2, x3_2, x4_2], axis=<span class="number">3</span>)       <span class="comment">#堆叠拼接（axis=3指定堆叠的维度是沿深度方向）</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p> </p><p>有了Inception结构块后，就可以搭建出一个精简版本的InceptionNet了。当只计算卷积层和全连接层时，网络总共有10层。采用block分析方法，得到图6结构（图片来自<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">课堂</a>ppt）：</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/01/NTCXRg.jpg" alt="图6：精简InceptionNet" /></p><ol><li>第一层采用16个3x3的卷积核，步长为1，全零填充，采用BN操作，relu激活。定义类InceptionNet_Model时，设定默认init_ch=16，也就是默认输出深度是16，因为在之前定义ConvBNRelu类的时候，定义了默认卷积核边长是3，步长是1，全零填充，所以这里直接调用ConvBNRelu就可以了。</li><li>随后是4个Inception结构块顺序相连，每两个结构块构成一个block，每个block中的第一个Inception结构块卷积步长是2，第二个步长是1，这使得第一个Inception结构块输出特征图尺寸减半，因此我们把输出特征图深度加深，尽可能保证特征抽取中信息的承载量一致。block_0设置的通道数是16，经过了四个分支，输出的深度为4x16=64。在代码中给通道数加倍，使block_1通道数是block_0通道数的两倍，为32。同样经过了四个分支，输出深度是4x32=128。</li><li>这128个通道的数据随后会被送入平均池化。</li><li>再然后送入10个分类的全连接。</li></ol><p>InceptionNet_Model定义如下：</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/02/NLkSUJ.jpg" alt="" /></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InceptionNet_Model</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_blocks, num_classes, init_ch=<span class="number">16</span>, **kwargs)</span>:</span></span><br><span class="line">        super(InceptionNet_Model, self).__init__(**kwargs)</span><br><span class="line">        self.in_channels = init_ch</span><br><span class="line">        self.out_channels = init_ch</span><br><span class="line">        self.num_blocks = num_blocks</span><br><span class="line">        self.init_ch = init_ch</span><br><span class="line">        self.c1 = ConvBNRelu(init_ch)</span><br><span class="line">        self.blocks = tf.keras.models.Sequential()</span><br><span class="line">        <span class="keyword">for</span> block_id <span class="keyword">in</span> range(num_blocks):      <span class="comment">#分别分析两个block</span></span><br><span class="line">            <span class="keyword">for</span> layer_id <span class="keyword">in</span> range(<span class="number">2</span>):   <span class="comment">#block_0</span></span><br><span class="line">                <span class="keyword">if</span> layer_id == <span class="number">0</span>:</span><br><span class="line">                    block = InceptionBlk(self.out_channels, strides=<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:                   <span class="comment">#block_1</span></span><br><span class="line">                    block = InceptionBlk(self.out_channels, strides=<span class="number">1</span>)</span><br><span class="line">                self.blocks.add(block)</span><br><span class="line">            self.out_channels *= <span class="number">2</span>              <span class="comment">#通道数加倍</span></span><br><span class="line">        self.p1 = GlobalAveragePooling2D()      <span class="comment">#送入平均池化</span></span><br><span class="line">        self.f1 = Dense(num_classes, activation=<span class="string">'softmax'</span>)      <span class="comment">#送入10分类的全连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.blocks(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        y = self.f1(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = InceptionNet_Model(num_blocks=<span class="number">2</span>, num_classes=<span class="number">10</span>)  <span class="comment">#实例化。 两个block块、10分类</span></span><br></pre></td></tr></table></figure>    </div></div><p> </p><p> </p><p> </p><h2 id="七-代码实现"><a class="markdownIt-Anchor" href="#七-代码实现"></a> 七、代码实现</h2><p>在<a href="https://hansy.tech/2020/06/2013076781.html">基于简单的全连接网络实现 MNIST 手写体数据集的训练与识别</a>的基础上重写<code>Mnist_Base</code>类，其余代码相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Conv2D, BatchNormalization, Activation, MaxPool2D, Dropout, Flatten, Dense, GlobalAveragePooling2D</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(threshold=np.inf)  <span class="comment">#设置print输出格式，通过np.inf使完全输出，不允许用省略号代替</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  一：导入数据集，设定训练集和测试集的特征和标签</span></span><br><span class="line">mnist = tf.keras.datasets.mnist                         <span class="comment">#下载手写数字数据集</span></span><br><span class="line">(x_train,y_train),(x_test,y_test) = mnist.load_data()   <span class="comment">#指定训练集和测试集的输入特征和标签</span></span><br><span class="line">x_train , x_test = x_train/<span class="number">255.0</span> , x_test/<span class="number">255.0</span>         <span class="comment">#对输入网络的特征进行归一化。全部转化为0到1之间的数，数值变小有利于神经网络的吸收</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)  <span class="comment"># 注意：卷积计算要求输入的图片必须是4个维度的，第0个维度表示一次喂入几个batch，第1、2、3个维度分别表示输入图片的分辨率和通道数。</span></span><br><span class="line">x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)     <span class="comment">#       而mnist数据集是单通道灰度图片，加上batch，才3个维度，即(batch数,row,col)  , 而Conv2D要求有四个参数，即(batch数,row,col,通道数)，所以需要再加一个。  如果数据集是三通道彩色图(如cifar10数据集)，则不需要这个步骤</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  二：搭建网络结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvBNRelu</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ch, kernelsz=<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="string">'same'</span>)</span>:</span></span><br><span class="line">        super(ConvBNRelu, self).__init__()</span><br><span class="line">        self.model = tf.keras.models.Sequential([</span><br><span class="line">            Conv2D(ch, kernelsz, strides=strides, padding=padding),</span><br><span class="line">            BatchNormalization(),</span><br><span class="line">            Activation(<span class="string">'relu'</span>)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.model(x, training=<span class="literal">False</span>) <span class="comment">#在training=False时，BN通过整个训练集计算均值、方差去做批归一化，training=True时，通过当前batch的均值、方差去做批归一化。推理时 training=False效果好</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InceptionBlk</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ch, strides=<span class="number">1</span>)</span>:</span></span><br><span class="line">        super(InceptionBlk, self).__init__()</span><br><span class="line">        self.ch = ch</span><br><span class="line">        self.strides = strides</span><br><span class="line">        self.c1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)       <span class="comment">#第一个分支</span></span><br><span class="line">        self.c2_1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)     <span class="comment">#第二个分支</span></span><br><span class="line">        self.c2_2 = ConvBNRelu(ch, kernelsz=<span class="number">3</span>, strides=<span class="number">1</span>)</span><br><span class="line">        self.c3_1 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)     <span class="comment">#第三个分支</span></span><br><span class="line">        self.c3_2 = ConvBNRelu(ch, kernelsz=<span class="number">5</span>, strides=<span class="number">1</span>)</span><br><span class="line">        self.p4_1 = MaxPool2D(<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="string">'same'</span>)         <span class="comment">#第四个分支</span></span><br><span class="line">        self.c4_2 = ConvBNRelu(ch, kernelsz=<span class="number">1</span>, strides=strides)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x1 = self.c1(x)                 <span class="comment">#第一个分支的输出</span></span><br><span class="line">        x2_1 = self.c2_1(x)</span><br><span class="line">        x2_2 = self.c2_2(x2_1)          <span class="comment">#第二个分支的输出</span></span><br><span class="line">        x3_1 = self.c3_1(x)</span><br><span class="line">        x3_2 = self.c3_2(x3_1)          <span class="comment">#第三个分支的输出</span></span><br><span class="line">        x4_1 = self.p4_1(x)</span><br><span class="line">        x4_2 = self.c4_2(x4_1)          <span class="comment">#第四个分支的输出</span></span><br><span class="line">        <span class="comment"># concat along axis=channel</span></span><br><span class="line">        x = tf.concat([x1, x2_2, x3_2, x4_2], axis=<span class="number">3</span>)       <span class="comment">#堆叠拼接（axis=3指定堆叠的维度是沿深度方向）</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_GoogLeNet</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_blocks, num_classes, init_ch=<span class="number">16</span>, **kwargs)</span>:</span></span><br><span class="line">        super(Mnist_GoogLeNet, self).__init__(**kwargs)</span><br><span class="line">        self.in_channels = init_ch</span><br><span class="line">        self.out_channels = init_ch</span><br><span class="line">        self.num_blocks = num_blocks</span><br><span class="line">        self.init_ch = init_ch</span><br><span class="line">        self.c1 = ConvBNRelu(init_ch)</span><br><span class="line">        self.blocks = tf.keras.models.Sequential()</span><br><span class="line">        <span class="keyword">for</span> block_id <span class="keyword">in</span> range(num_blocks):      <span class="comment">#分别分析两个block</span></span><br><span class="line">            <span class="keyword">for</span> layer_id <span class="keyword">in</span> range(<span class="number">2</span>):   <span class="comment">#block_0</span></span><br><span class="line">                <span class="keyword">if</span> layer_id == <span class="number">0</span>:</span><br><span class="line">                    block = InceptionBlk(self.out_channels, strides=<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:                   <span class="comment">#block_1</span></span><br><span class="line">                    block = InceptionBlk(self.out_channels, strides=<span class="number">1</span>)</span><br><span class="line">                self.blocks.add(block)</span><br><span class="line">            self.out_channels *= <span class="number">2</span>              <span class="comment">#通道数加倍</span></span><br><span class="line">        self.p1 = GlobalAveragePooling2D()      <span class="comment">#送入平均池化</span></span><br><span class="line">        self.f1 = Dense(num_classes, activation=<span class="string">'softmax'</span>)      <span class="comment">#送入10分类的全连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.blocks(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        y = self.f1(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = Mnist_GoogLeNet(num_blocks=<span class="number">2</span>, num_classes=<span class="number">10</span>)  <span class="comment">#实例化。 两个block块、10分类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  三：配置训练方法</span></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=<span class="string">'adam'</span>,    <span class="comment">#优化器选择adam</span></span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),  <span class="comment">#损失函数选择SparseCategoricalCrossentropy，因为前面已经保证输出满足概率分布，所以这里from_logits=False</span></span><br><span class="line">    metrics=[<span class="string">'sparse_categorical_accuracy'</span>]   <span class="comment">#数据集中标签是数值，输出结果y是概率分布，所以衡量方法选择sparse_categorical_accuracy</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  （断点续训，存取模型参数。  在下次训练时，从之前获取的最优的参数开始，提高了准确率）</span></span><br><span class="line">    <span class="comment">#读取模型</span></span><br><span class="line">checkpoint_save_path=<span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path+<span class="string">'.index'</span>):   <span class="comment">#生成ckpt文件时会自动生成索引文件，所以拿它的索引文件来判断</span></span><br><span class="line">    print(<span class="string">'------加载已有模型------'</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)       <span class="comment">#如果存在模型，则直接读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(   <span class="comment">#使用tf给出的回调函数来保存模型参数</span></span><br><span class="line">    filepath=checkpoint_save_path,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,    <span class="comment">#是否只保留模型参数</span></span><br><span class="line">    save_best_only=<span class="literal">True</span>        <span class="comment">#是否只保留最优结果</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  四：执行训练过程</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    x_train,y_train,</span><br><span class="line">    batch_size=<span class="number">32</span>,                          <span class="comment">#每次喂入网络32组数据</span></span><br><span class="line">    epochs=<span class="number">3</span>,                               <span class="comment">#数据集迭代10次</span></span><br><span class="line">    validation_data=(x_test,y_test),</span><br><span class="line">    validation_freq=<span class="number">1</span>,                      <span class="comment">#每迭代一次训练集执行一次测试集的评测</span></span><br><span class="line">    callbacks=[cp_callback])                <span class="comment">#加入回调选项，返回给history。（如果不用断点续训，则不用写 “history=” 和 “callbacks=[cp_callback]” ）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过写入到txt文本的方式查看断点续训时保存的参数</span></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  五：打印网络结构和参数信息</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  六：展示acc和loss曲线 (断点续训中history里已经保存好了)</span></span><br><span class="line">acc = history.history[<span class="string">'sparse_categorical_accuracy'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_sparse_categorical_accuracy'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(acc,label=<span class="string">'Training Accuracy'</span>)</span><br><span class="line">plt.plot(val_acc,label=<span class="string">'Validation Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Accuracy'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(loss,label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(val_loss,label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><blockquote><p><strong>参考：</strong><br /><a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">北京大学软件与微电子学院曹健老师的Tensorflow2.0</a><br /><a href="https://zhuanlan.zhihu.com/p/32702031" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/32702031</a><br /><a href="https://my.oschina.net/u/876354/blog/1637819" target="_blank" rel="noopener external nofollow noreferrer">https://my.oschina.net/u/876354/blog/1637819</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 经典卷积网络模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> 经典卷积网络模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于LeNet模型实现MNIST手写体数据集的训练</title>
      <link href="/2020/06/670302972.html"/>
      <url>/2020/06/670302972.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        原论文：《Gradient-Based Learning Applied to Document Recognition》    </div>    <div class='spoiler-content'>        <p><strong>原论文</strong>：<a href="https://ieeexplore.ieee.org/document/726791" target="_blank" rel="noopener external nofollow noreferrer">https://ieeexplore.ieee.org/document/726791</a><br /><strong>下载好的</strong>：<a href="https://wwa.lanzous.com/iLiwZe76j5g" target="_blank" rel="noopener external nofollow noreferrer">https://wwa.lanzous.com/iLiwZe76j5g</a></p>    </div></div><p> </p><p> </p><p>LeNet卷积神经网络是LeCun于1998年提出，是卷积神经网络的开篇之作。<strong>通过共享卷积核减少了网络的参数，另外还提出了局部感受野和池化（下采样）。</strong></p><p> </p><p> </p><h2 id="一-知识点解读"><a class="markdownIt-Anchor" href="#一-知识点解读"></a> 一、知识点解读</h2><h3 id="11-共享卷积核参数"><a class="markdownIt-Anchor" href="#11-共享卷积核参数"></a> 1.1 共享卷积核参数</h3><p>关于共享卷积核参数的优点，可以用一个<a href="https://www.zhihu.com/question/47158818/answer/670431317" target="_blank" rel="noopener external nofollow noreferrer">对比图</a>来展示：</p><ul><li><p>进行parameter sharing</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/29/NWNrNQ.gif" alt="图1：参数共享情况下的卷积计算过程" /></p><p>概括为：一个边长为m的卷积核在图像上扫描，区域内对位相乘再累加对应输出后的一个像素点，以此进行特征提取。</p><p> </p></li><li><p>不进行parameter sharing</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/29/NWUJVU.jpg" alt="图2：参数不共享情况下的卷积计算过程" style="zoom:80%;" /><p>表示卷积核的参数数量与图像像素矩阵的大小保持一致，当channels很大时，参数的数量会特别大。</p><p><strong>由此可以看出：利用卷积核参数的共享，可以避免参数数量在加大深度时出现激增现象。</strong></p></li></ul><p> </p><p> </p><h3 id="12-感受野"><a class="markdownIt-Anchor" href="#12-感受野"></a> 1.2 感受野</h3><p>感受野（Receptive Field）是指输出特征图中的1个像素点映射到原始输入图片的区域大小。为了更形象的理解感受野的含义，我用<code>word</code>画了下面这幅图，代表对于同一张输入图像，使用连续两层3x3卷积核与单层5x5卷积核进行特征提取的效果：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/29/Nh2ONd.jpg" alt="图3：感受野" style="zoom: 80%;" /><p>比如对于一张5x5的原始图像</p><ul><li>如果使用3x3的卷积核进行计算会输出一个3x3的输出特征图，这个输出特征图上的每个像素点映射到原始图片是3x3的区域，所以它的感受野是3；如果对这个3x3的特征图再用一次3x3的卷积核进行扫描，会再输出一个1x1的输出特征图，这个特征图的上像素点映射到<strong>原始图片</strong>（不是上一级图片）是5x5的区域，所以它的感受野是5.</li><li>如果直接使用5x5的卷积核进行计算会输出一个11的输出特征图，这个输出特征图上的每个像素点映射到原始图片是5x5的区域，所以它的感受野是5.</li></ul><p> </p><p>由此可知：对于这幅原始图片，连续使用两次3x3的卷积核和单独使用一次5x5的卷积核，其特征提取能力是一样的。那么，该如何选择呢？这个时候我们就要考虑他们的待训练参数数量和卷积计算量了。</p><p>设输入特征图宽度、高度均为n，卷积步长为1.</p><ul><li><p>对于待训练参数：</p><ul><li>前者：9+9=18</li><li>后者：25</li></ul></li><li><p>对于计算次数：</p><ul><li>前者：</li></ul></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mn>9</mn><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>3</mn><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mn>18</mn><msup><mi>n</mi><mn>2</mn></msup><mo>−</mo><mn>108</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>180</mn></mrow><annotation encoding="application/x-tex">9(n-3+1)^2  +  9((n-3+1)-3+1)^2  =  18n^2 - 108n^2 +180</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">9</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">9</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">8</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord">0</span></span></span></span></span></p><ul><li>后者<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>25</mn><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>5</mn><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mn>25</mn><msup><mi>n</mi><mn>2</mn></msup><mo>−</mo><mn>200</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>400</mn></mrow><annotation encoding="application/x-tex">25(n-5+1)^2   =  25n^2 - 200n^2 +400</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></p></li></ul><p> </p><p>将以上两个结果联立计算可知：当n&gt;10时，两层3x3卷积核比一层5x5卷积核性能要好，这也就是为什么现在的神经网络在卷积计算中常使用多个小卷积核堆叠来替换单个大卷积核的原因。</p><p> </p><p> </p><h3 id="13-池化"><a class="markdownIt-Anchor" href="#13-池化"></a> 1.3 池化</h3><p>池化操作用于减少卷积神经网络中特征数据量。池化的主要方法有<strong>最大池化</strong>和<strong>均值池化</strong>，最大池化可以提取图片纹理，均值池化可以保留背景特征。</p><p>设池化核为2x2，步长为2，两种池化方法的结果如图4所示（图片来自<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">课堂</a>ppt）：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/29/Nh2X4A.jpg" alt="图4：两种池化方法" style="zoom: 50%;" /><p>可以容易的看出：最大池化表示取区域中的像素最大值作为池化结果；平均池化表示取区域中的像素平均值作为池化结果。</p><p> </p><p>Tensorflow给出了对应的池化函数MaxPool2D和AveragePooling2D. 具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最大池化</span></span><br><span class="line">tf.keras.layers.MaxPool2D(</span><br><span class="line">    pool_size=池化核尺寸          <span class="comment">#正方形可直接写核长整数，或元组形式(宽,高)</span></span><br><span class="line">    strides=池化步长              <span class="comment">#用整数，或元组形式(纵向h,横向w)，默认为pool_size</span></span><br><span class="line">    padding=<span class="string">'valid'</span> <span class="keyword">or</span> <span class="string">'same'</span>     <span class="comment">#全零填充是"same" ， 不使用是"valid"（默认）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#平均池化</span></span><br><span class="line">tf.keras.layers.AveragePooling2D(</span><br><span class="line">    pool_size=池化核尺寸          <span class="comment">#正方形可直接写核长整数，或元组形式(宽,高)</span></span><br><span class="line">    strides=池化步长              <span class="comment">#用整数，或元组形式(纵向h,横向w)，默认为pool_size</span></span><br><span class="line">    padding=<span class="string">'valid'</span> <span class="keyword">or</span> <span class="string">'same'</span>     <span class="comment">#全零填充是"same" ， 不使用是"valid"（默认）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    Conv2D(filter=<span class="number">6</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),padding=<span class="string">'same'</span>) ,     <span class="comment"># C</span></span><br><span class="line">    BatchNormalization(),                                   <span class="comment"># B</span></span><br><span class="line">    Activation(<span class="string">'relu'</span>),                                     <span class="comment"># A</span></span><br><span class="line">    MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>,padding=<span class="string">'same'</span>),    <span class="comment"># P</span></span><br><span class="line">    Dropout(<span class="number">0</span>,<span class="number">2</span>)                                            <span class="comment"># D</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><h2 id="二-网络结构"><a class="markdownIt-Anchor" href="#二-网络结构"></a> 二、网络结构</h2><p>LeNet网络结构如图5所示（图片来自<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">课堂</a>ppt）：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/28/NRtmnO.jpg" alt="图5：LeNet模型"  /><p>从图中可以发现：LeNet一共有五层网络（只计算卷积层和全连接层，其余操作认为是卷积计算层的附属）。包含两层卷积和连续的三层全连接。</p><p> </p><div class="note info">            <p>借用老师经常强调的一句话：<strong>卷积，就是特征提取器CBAPD。</strong>（其中D是舍弃Dropout）具体表示为：</p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/28/NRtVc6.jpg"   /><blockquote><p>关于卷积的具体细节，将会在稍后的文章中给出，这里直接用我已经掌握好的知识。</p></blockquote>          </div><p> </p><p> </p><p><strong>C1表示第一层卷积</strong>，对齐分析：</p><ul><li>C：（16个5*5的卷积核，步长为1，不使用全零填充）</li><li>B：（None）LeNet时代，还没有BN操作，所以此项为空</li><li>A：（sigmoid）LeNet时代，sigmoid是主流的激活函数</li><li>P：（用2*2的池化核，步长为2，进行最大池化，不使用全零填充）</li><li>D：（None）LeNet时代，还没有Dropout，所以此项为空</li></ul><p> </p><p><strong>C3表示第二层卷积</strong>，对齐分析：</p><ul><li>C：（6个5*5的卷积核，步长为1，不使用全零填充）</li><li>B：（None）</li><li>A：（sigmoid）</li><li>P：（用2*2的池化核，步长为2，进行最大池化，不使用全零填充）</li><li>D：（None）</li></ul><p> </p><p><strong>随后，Flatten拉直，后接三层全连接网络。</strong></p><p>神经元分别是120、84、10（因为是10分类问题），前两层全连接使用sigmoid激活函数，最后一层使用softmax使输出符合概率分布。</p><p> </p><blockquote><p>各层详细解读，可参考文章：<a href="https://zhuanlan.zhihu.com/p/41736894" target="_blank" rel="noopener external nofollow noreferrer">【经典CNN模型LeNet解读 - 于晨晨的文章 - 知乎】</a></p></blockquote><p> </p><p>对着CBAPD，网络结构用代码应描述为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_LeNet</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Mnist_LeNet, self).__init__()</span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),activation=<span class="string">'sigmoid'</span>)    <span class="comment">#第一层是6个5*5的卷积核，使用sigmoid激活函数</span></span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>)                        <span class="comment">#选择最大池化方法，池化核是2*2的尺寸，池化步长是2</span></span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),activation=<span class="string">'sigmoid'</span>)   <span class="comment">#第一层是16个5*5的卷积核，使用sigmoid激活函数</span></span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>)                        <span class="comment">#选择最大池化方法，池化核是2*2的尺寸，池化步长是2</span></span><br><span class="line"></span><br><span class="line">        self.flatten = Flatten()                            <span class="comment">#拉直</span></span><br><span class="line">        self.f1 = Dense(<span class="number">120</span>, activation=<span class="string">'sigmoid'</span>)          <span class="comment">#连续三层全连接网络，最后一层设置10个神经元（10分类）</span></span><br><span class="line">        self.f2 = Dense(<span class="number">84</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line"></span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        x = self.p2(x)</span><br><span class="line"></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.f1(x)</span><br><span class="line">        x = self.f2(x)</span><br><span class="line">        y = self.f3(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = Mnist_LeNet()    <span class="comment">#实例化</span></span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><h2 id="三-代码实现"><a class="markdownIt-Anchor" href="#三-代码实现"></a> 三、代码实现</h2><p>在<a href="https://hansy.tech/2020/06/2013076781.html">基于简单的全连接网络实现 MNIST 手写体数据集的训练与识别</a>的基础上重写<code>Mnist_Base</code>类，其余代码相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Conv2D, BatchNormalization, Activation, MaxPool2D, Dropout, Flatten, Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(threshold=np.inf)  <span class="comment">#设置print输出格式，通过np.inf使完全输出，不允许用省略号代替</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  一：导入数据集，设定训练集和测试集的特征和标签</span></span><br><span class="line">mnist = tf.keras.datasets.mnist                         <span class="comment">#下载手写数字数据集</span></span><br><span class="line">(x_train,y_train),(x_test,y_test) = mnist.load_data()   <span class="comment">#指定训练集和测试集的输入特征和标签</span></span><br><span class="line">x_train , x_test = x_train/<span class="number">255.0</span> , x_test/<span class="number">255.0</span>         <span class="comment">#对输入网络的特征进行归一化。全部转化为0到1之间的数，数值变小有利于神经网络的吸收</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)  <span class="comment"># 注意：卷积计算要求输入的图片必须是4个维度的，第0个维度表示一次喂入几个batch，第1、2、3个维度分别表示输入图片的分辨率和通道数。</span></span><br><span class="line">x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)     <span class="comment">#       而mnist数据集是单通道灰度图片，加上batch，才3个维度，即(batch数,row,col)  , 而Conv2D要求有四个参数，即(batch数,row,col,通道数)，所以需要再加一个。  如果数据集是三通道彩色图(如cifar10数据集)，则不需要这个步骤</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  二：搭建网络结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_LeNet</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Mnist_LeNet, self).__init__()</span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),activation=<span class="string">'sigmoid'</span>)    <span class="comment">#第一层是6个5*5的卷积核，使用sigmoid激活函数</span></span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>)                        <span class="comment">#选择最大池化方法，池化核是2*2的尺寸，池化步长是2</span></span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),activation=<span class="string">'sigmoid'</span>)   <span class="comment">#第一层是16个5*5的卷积核，使用sigmoid激活函数</span></span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>)                        <span class="comment">#选择最大池化方法，池化核是2*2的尺寸，池化步长是2</span></span><br><span class="line"></span><br><span class="line">        self.flatten = Flatten()                            <span class="comment">#拉直</span></span><br><span class="line">        self.f1 = Dense(<span class="number">120</span>, activation=<span class="string">'sigmoid'</span>)          <span class="comment">#连续三层全连接网络，最后一层设置10个神经元（10分类）</span></span><br><span class="line">        self.f2 = Dense(<span class="number">84</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line"></span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        x = self.p2(x)</span><br><span class="line"></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.f1(x)</span><br><span class="line">        x = self.f2(x)</span><br><span class="line">        y = self.f3(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = Mnist_LeNet()    <span class="comment">#实例化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  三：配置训练方法</span></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=<span class="string">'adam'</span>,    <span class="comment">#优化器选择adam</span></span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),  <span class="comment">#损失函数选择SparseCategoricalCrossentropy，因为前面已经保证输出满足概率分布，所以这里from_logits=False</span></span><br><span class="line">    metrics=[<span class="string">'sparse_categorical_accuracy'</span>]   <span class="comment">#数据集中标签是数值，输出结果y是概率分布，所以衡量方法选择sparse_categorical_accuracy</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  （断点续训，存取模型参数。  在下次训练时，从之前获取的最优的参数开始，提高了准确率）</span></span><br><span class="line">    <span class="comment">#读取模型</span></span><br><span class="line">checkpoint_save_path=<span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path+<span class="string">'.index'</span>):   <span class="comment">#生成ckpt文件时会自动生成索引文件，所以拿它的索引文件来判断</span></span><br><span class="line">    print(<span class="string">'------加载已有模型------'</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)       <span class="comment">#如果存在模型，则直接读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(   <span class="comment">#使用tf给出的回调函数来保存模型参数</span></span><br><span class="line">    filepath=checkpoint_save_path,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,    <span class="comment">#是否只保留模型参数</span></span><br><span class="line">    save_best_only=<span class="literal">True</span>        <span class="comment">#是否只保留最优结果</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  四：执行训练过程</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    x_train,y_train,</span><br><span class="line">    batch_size=<span class="number">32</span>,                          <span class="comment">#每次喂入网络32组数据</span></span><br><span class="line">    epochs=<span class="number">3</span>,                               <span class="comment">#数据集迭代10次</span></span><br><span class="line">    validation_data=(x_test,y_test),</span><br><span class="line">    validation_freq=<span class="number">1</span>,                      <span class="comment">#每迭代一次训练集执行一次测试集的评测</span></span><br><span class="line">    callbacks=[cp_callback])                <span class="comment">#加入回调选项，返回给history。（如果不用断点续训，则不用写 “history=” 和 “callbacks=[cp_callback]” ）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过写入到txt文本的方式查看断点续训时保存的参数</span></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  五：打印网络结构和参数信息</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  六：展示acc和loss曲线 (断点续训中history里已经保存好了)</span></span><br><span class="line">acc = history.history[<span class="string">'sparse_categorical_accuracy'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_sparse_categorical_accuracy'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(acc,label=<span class="string">'Training Accuracy'</span>)</span><br><span class="line">plt.plot(val_acc,label=<span class="string">'Validation Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Accuracy'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(loss,label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(val_loss,label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><h2 id="四-运行结果"><a class="markdownIt-Anchor" href="#四-运行结果"></a> 四、运行结果</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/28/NRtZjK.jpg" alt="图6：训练结果" /></p><p> </p><p> </p><p> </p><blockquote><p><strong>参考：</strong></p><p>Lecun Y , Bottou L . Gradient-based learning applied to document recognition[J]. Proceedings of the IEEE, 1998, 86(11):2278-2324.<br /><a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">北京大学软件与微电子学院曹健老师的Tensorflow2.0笔记</a><br /><a href="https://zhuanlan.zhihu.com/p/41736894" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/41736894</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
          <category> 经典卷积网络模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> 经典卷积网络模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于简单的全连接网络实现MNIST手写体数据集的训练与识别</title>
      <link href="/2020/06/2013076781.html"/>
      <url>/2020/06/2013076781.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>依据“五步法”原则，使用Tensorflow API：tf.keras搭建神经网络结构并训练（只用到了Flatten和Dense层）</p><ul><li><p>train，test</p></li><li><p>Sequential / Class</p></li><li><p>compile</p></li><li><p>fit</p></li><li><p>summary</p></li></ul><p>然后依据“三步法”原则，完成给图识物应用（识别模块）</p><ul><li>复现模型（前向传播）</li><li>加载参数</li><li>预测结果</li></ul><p> </p><p> </p><h2 id="一-训练"><a class="markdownIt-Anchor" href="#一-训练"></a> 一、训练</h2><h3 id="11-traintest"><a class="markdownIt-Anchor" href="#11-traintest"></a> 1.1 train，test</h3><p>使用数据集官方给出的读取命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.mnist               </span><br><span class="line">(x_train,y_train),(x_test,y_test) = mnist.load_data()</span><br></pre></td></tr></table></figure><p>为了保证喂入网络的数据更加规整，对x_train和x_test进行归一化处理，同除以他们的最大值255，让他们都转化为0到1之间的小数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train , x_test = x_train/<span class="number">255.0</span> , x_test/<span class="number">255.0</span></span><br></pre></td></tr></table></figure><p> </p><p>需要提到的是：对于单通道灰度图数据集（如mnist数据集），如果想在网络中加入卷积层，就必须重构他们的维度到四维，增加的最后一个维度通常设为它的通道数。否则会报错如下：</p><div class="note danger">            <p>ValueError: Input 0 of layer conv2d is incompatible with the layer：expected ndim=4, found ndim=3. Full shape received: [None, 28, 28]</p>          </div><p>意指conv2d卷积层需要四个参数（batch数量，row，col，通道数量），而你只给了三个（batch数量，row，col）</p><p>修改方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)  </span><br><span class="line">x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>当然，如果不加入卷积层，或者数据集本身就是三通道彩色，就不需要上面这两行代码。</p><blockquote><p>思路来源：<a href="https://blog.csdn.net/tushuguan_sun/article/details/105914661" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/tushuguan_sun/article/details/105914661</a></p></blockquote><p> </p><p> </p><p> </p><h3 id="12-sequential-class"><a class="markdownIt-Anchor" href="#12-sequential-class"></a> 1.2 Sequential / Class</h3><p>在这一步中开始描述网络结构，即都有哪几层，每层是什么样子。在最初开始的学习中，老师教给我们使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([定义网络结构块])</span><br></pre></td></tr></table></figure><p>的方法来逐层书写，但后来指出用Sequential只能搭建出上层输出就是下层输入的顺序网络结构，无法写出一些带有跳连的非顺序网络结构，所以推荐我们使用class类来封装一个神经网络结构，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MnistModel</span><span class="params">(Model)</span>:</span>  <span class="comment">#Model表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>   </span><br><span class="line">        super(MnistModel,self).__init__()</span><br><span class="line">        定义网络结构块</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self,x)</span>:</span>    </span><br><span class="line">    调用网络结构块，实现前向传播</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">model = MnistModel()    <span class="comment">#实例化</span></span><br></pre></td></tr></table></figure><p>类中的Model表示继承了Tensorflow的Model类，类里定义<code>__init__</code>和<code>call</code>两个函数，使用前者来定义网络结构，使用后者来使对象变为可调用。可适用各类网络结构，在以后的使用中，基本上只修改这一处即可，其余可以作为模板使用。</p><p> </p><p>对于具体的网络结构块，有如下可选（本文只用到了前两个，Conv2D和LSTM在后续介绍）：</p><ul><li><p>拉直层：<code>tf.keras.layers.Flatten()</code></p><p>这一层不含计算，只是形状转换，把输入特征拉直变成一维数组</p></li><li><p>全连接层：<code>tf.keras.layers.Dense(神经元个数, activation='激活函数',kernel_regularizer=正则化方法)</code></p><ul><li>activation（字符串给出）可选：relu、softmax、sigmoid、tanh等</li><li>kernel_regularizer可选：tf.keras.regularizers.l1()、tf.keras.regularizers.l2()等</li></ul></li><li><p>卷积层：<code>tf.keras.layers.Conv2D(filters=卷积核个数, kernel_size=卷积核尺寸, strides=卷积步长, padding=&quot;valid&quot; or &quot;same&quot;)</code></p></li><li><p>LSTM层：<code>tf.keras.layers.LSTM()</code></p></li></ul><p> </p><p> </p><p> </p><h3 id="13-compile"><a class="markdownIt-Anchor" href="#13-compile"></a> 1.3 compile</h3><p>配置神经网络的训练方法。在这里，告知训练时选择的优化器、损失函数和评测指标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.compile(</span><br><span class="line">    optimizer=<span class="string">'优化器'</span>,  </span><br><span class="line">    loss=<span class="string">'损失函数'</span></span><br><span class="line">    metrics=[<span class="string">'评测指标'</span>]  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>optimizer可选：</p><ul><li><code>'sgd'</code> or <code>tf.keras.optimizers.SGD(lr=学习率,momentum=动量参数)</code></li><li><code>'adagrad'</code> or <code>tf.keras.optimizers.Adagrad(lr=学习率)</code></li><li><code>'adadelta'</code> or <code>tf.keras.optimizers.Adadelta(lr=学习率)</code></li><li><code>'adam'</code> or <code>tf.keras.optimizers.Adam(lr=学习率,beta_1=0.9,beta_2=0.999)</code></li></ul></li><li><p>loss可选：</p><ul><li><p><code>'mse'</code> or <code>tf.keras.losses.MeanSquaredError()</code></p></li><li><p><code>'sparse_categorical_crossentropy'</code> or <code>tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False)</code></p><p>（如果最后一个激活函数使用的是softmax，这里填False；否则为True）</p></li></ul></li><li><p>Metrics可选：</p><ul><li><code>'accuracy'</code>：y和y_都是数值，如y=[1]，y__=[1]</li><li><code>'categorical_accuracy'</code>：y和y_都是独热码（概率分布），如y=[0,1,0]，y__=[0.256,0.695,0.048]</li><li><code>'sparse_categorical_accuracy'</code>：y是独热码（概率分布），y_是数值，如y__=[0.256,0.695,0.048]，y=[1]</li></ul></li></ul><p> </p><p> </p><p> </p><h3 id="14-fit"><a class="markdownIt-Anchor" href="#14-fit"></a> 1.4 fit</h3><p>执行训练过程，告知训练集的输入特征与标签、每次喂入神经网络的样本数、数据集的迭代次数、测试集的输入特征与标签（两种实现方法）、每迭代多少次就使用测试集来验证一次结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model.fit(</span><br><span class="line">    x_train,y_train,<span class="comment">#训练集的输入特征、标签</span></span><br><span class="line">    batch_size=<span class="number">32</span>,                          <span class="comment">#每次喂入神经网络的样本数</span></span><br><span class="line">    epochs=<span class="number">10</span>,                              <span class="comment">#数据集迭代次数</span></span><br><span class="line">    validation_data=(x_test,y_test),<span class="comment">#测试集的输入特征、标签</span></span><br><span class="line">    <span class="comment">#validation_split=0.2#从训练集中划分多少比例给测试集，与上面方法二者选其一</span></span><br><span class="line">    validation_freq=<span class="number">1</span>,                      <span class="comment">#每迭代一次训练集执行一次测试集的评测</span></span><br></pre></td></tr></table></figure><p> </p><div class="note success">            <p>另外，在compile和fit步骤间，可以实现<strong>断点续训</strong>：把每次训练好的最优参数保存下来，在下一次训练时，从最优的参数开始继续训练，并且将参数写入txt文本中方便查看。代码如下：讲解会单独用一篇文章，并且记录过程中遇到的问题。。。</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  三：配置训练方法</span></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=<span class="string">'adam'</span>,    <span class="comment">#优化器选择adam</span></span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),  <span class="comment">#损失函数选择SparseCategoricalCrossentropy，因为前面已经保证输出满足概率分布，所以这里from_logits=False</span></span><br><span class="line">    metrics=[<span class="string">'sparse_categorical_accuracy'</span>]   <span class="comment">#数据集中标签是数值，输出结果y是概率分布，所以衡量方法选择sparse_categorical_accuracy</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  （断点续训，存取模型参数。  在下次训练时，从之前获取的最优的参数开始，提高了准确率）</span></span><br><span class="line">    <span class="comment">#读取模型</span></span><br><span class="line">checkpoint_save_path=<span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path+<span class="string">'.index'</span>):   <span class="comment">#生成ckpt文件时会自动生成索引文件，所以拿它的索引文件来判断</span></span><br><span class="line">    print(<span class="string">'------加载已有模型------'</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)       <span class="comment">#如果存在模型，则直接读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(   <span class="comment">#使用tf给出的回调函数来保存模型参数</span></span><br><span class="line">    filepath=checkpoint_save_path,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,    <span class="comment">#是否只保留模型参数</span></span><br><span class="line">    save_best_only=<span class="literal">True</span>        <span class="comment">#是否只保留最优结果</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  四：执行训练过程</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    x_train,y_train,</span><br><span class="line">    batch_size=<span class="number">32</span>,                          <span class="comment">#每次喂入网络32组数据</span></span><br><span class="line">    epochs=<span class="number">10</span>,                               <span class="comment">#数据集迭代10次</span></span><br><span class="line">    validation_data=(x_test,y_test),</span><br><span class="line">    validation_freq=<span class="number">1</span>,                      <span class="comment">#每迭代一次训练集执行一次测试集的评测</span></span><br><span class="line">    callbacks=[cp_callback])                <span class="comment">#加入回调选项，返回给history。（如果不用断点续训，则不用写 “history=” 和 “callbacks=[cp_callback]” ）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过写入到txt文本的方式查看断点续训时保存的参数</span></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><h3 id="15-summary"><a class="markdownIt-Anchor" href="#15-summary"></a> 1.5 summary</h3><p>打印出神经网络的结构和参数信息。如图1所示。</p><p>​                          <img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/28/N2qY5D.png" alt="图1：网络结构和参数信息" style="zoom: 80%;" /></p><p> </p><p> </p><h3 id="16-accloss可视化"><a class="markdownIt-Anchor" href="#16-accloss可视化"></a> *1.6 acc/loss可视化</h3><p>其实这一步并不是神经网络训练的必需步骤，但我觉得如果写论文的话，这种图表是非常必要的，能够形象的展示自己的成果也是一门技巧。直接贴代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">acc = history.history[<span class="string">'sparse_categorical_accuracy'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_sparse_categorical_accuracy'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(acc,label=<span class="string">'Training Accuracy'</span>)</span><br><span class="line">plt.plot(val_acc,label=<span class="string">'Validation Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Accuracy'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(loss,label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(val_loss,label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>为减少我辣鸡GPU的消耗，epochs仅设为3…结果如图2所示。</p><p>​                               <img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/28/N2qJUO.png" alt="图2：acc/loss曲线" style="zoom:80%;" /></p><p> </p><p> </p><p> </p><h3 id="训练代码实现"><a class="markdownIt-Anchor" href="#训练代码实现"></a> 训练——代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Flatten,Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(threshold=np.inf)  <span class="comment">#设置print输出格式，通过np.inf使完全输出，不允许用省略号代替</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  一：导入数据集，设定训练集和测试集的特征和标签</span></span><br><span class="line">mnist = tf.keras.datasets.mnist                         <span class="comment">#下载手写数字数据集</span></span><br><span class="line">(x_train,y_train),(x_test,y_test) = mnist.load_data()   <span class="comment">#指定训练集和测试集的输入特征和标签</span></span><br><span class="line">x_train , x_test = x_train/<span class="number">255.0</span> , x_test/<span class="number">255.0</span>         <span class="comment">#对输入网络的特征进行归一化。全部转化为0到1之间的数，数值变小有利于神经网络的吸收</span></span><br><span class="line"></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">#注意：如果有卷积层，数据集又是单通道灰度图片（如本数据集mnist），需要添加如下两行代码。 具体参考：https://blog.csdn.net/tushuguan_sun/article/details/105914661</span></span><br><span class="line"><span class="string">x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)  </span></span><br><span class="line"><span class="string">x_test = x_test.reshape(x_test.shape[0], 28, 28, 1) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  二：搭建网络结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_Base</span><span class="params">(Model)</span>:</span>   <span class="comment">#Class写法可以满足顺序和跳连两种神经网络结构；而Sequential写法只支持顺序神经网络结构</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>     <span class="comment">#定义网络结构</span></span><br><span class="line">        super(Mnist_Base,self).__init__()</span><br><span class="line"></span><br><span class="line">        self.flatten=Flatten()    <span class="comment">#把输入特征（二维图像矩阵）拉直为一维数组</span></span><br><span class="line">        self.d1=Dense(<span class="number">128</span>,activation=<span class="string">'relu'</span>)   <span class="comment">#第一层网络：全连接层，128个神经元，激活函数使用relu</span></span><br><span class="line">        self.d2=Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>) <span class="comment">#第二层网络：全连接层，10个神经元（因为这是一个10分类问题），激活函数使用softmax，使输出满足概率分布</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self,x)</span>:</span>    <span class="comment">#call函数的作用是声明对象为可调用对象（callable）。从输入x到输出y，相当于走过一次前向传播，输出y</span></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.d1(x)</span><br><span class="line">        y = self.d2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = Mnist_Base()    <span class="comment">#实例化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  三：配置训练方法</span></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=<span class="string">'adam'</span>,    <span class="comment">#优化器选择adam</span></span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),  <span class="comment">#损失函数选择SparseCategoricalCrossentropy，因为前面已经保证输出满足概率分布，所以这里from_logits=False</span></span><br><span class="line">    metrics=[<span class="string">'sparse_categorical_accuracy'</span>]   <span class="comment">#数据集中标签是数值，输出结果y是概率分布，所以衡量方法选择sparse_categorical_accuracy</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  （断点续训，存取模型参数。  在下次训练时，从之前获取的最优的参数开始，提高了准确率）</span></span><br><span class="line">    <span class="comment">#读取模型</span></span><br><span class="line">checkpoint_save_path=<span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path+<span class="string">'.index'</span>):   <span class="comment">#生成ckpt文件时会自动生成索引文件，所以拿它的索引文件来判断</span></span><br><span class="line">    print(<span class="string">'------加载已有模型------'</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)       <span class="comment">#如果存在模型，则直接读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存模型</span></span><br><span class="line">cp_callback = tf.keras.callbacks.ModelCheckpoint(   <span class="comment">#使用tf给出的回调函数来保存模型参数</span></span><br><span class="line">    filepath=checkpoint_save_path,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,    <span class="comment">#是否只保留模型参数</span></span><br><span class="line">    save_best_only=<span class="literal">True</span>        <span class="comment">#是否只保留最优结果</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  四：执行训练过程</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    x_train,y_train,</span><br><span class="line">    batch_size=<span class="number">32</span>,                          <span class="comment">#每次喂入网络32组数据</span></span><br><span class="line">    epochs=<span class="number">10</span>,                              <span class="comment">#数据集迭代10次</span></span><br><span class="line">    validation_data=(x_test,y_test),</span><br><span class="line">    validation_freq=<span class="number">1</span>,                      <span class="comment">#每迭代一次训练集执行一次测试集的评测</span></span><br><span class="line">    callbacks=[cp_callback])                <span class="comment">#加入回调选项，返回给history。（如果不用断点续训，则不用写 “history=” 和 “callbacks=[cp_callback]” ）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过写入到txt文本的方式查看断点续训时保存的参数</span></span><br><span class="line">file = open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(str(v.name) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape) + <span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy()) + <span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  五：打印网络结构和参数信息</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  六：展示acc和loss曲线 (断点续训中history里已经保存好了)</span></span><br><span class="line">acc = history.history[<span class="string">'sparse_categorical_accuracy'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_sparse_categorical_accuracy'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(acc,label=<span class="string">'Training Accuracy'</span>)</span><br><span class="line">plt.plot(val_acc,label=<span class="string">'Validation Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Accuracy'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(loss,label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(val_loss,label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and Validation Loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>在epochs设为3的情况下，结果如图3所示。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/28/N2qNPe.png" alt="图3：训练结果" /></p><p> </p><p> </p><p> </p><p> </p><h2 id="二-识别"><a class="markdownIt-Anchor" href="#二-识别"></a> 二、识别</h2><h3 id="21-复现模型"><a class="markdownIt-Anchor" href="#21-复现模型"></a> 2.1 复现模型</h3><p>相当于重新叙述了一遍网络结构（代码完全一致）。</p><p><strong>但需要注意的是：测试时使用的网络搭建方法必须要与训练时保持一致</strong></p><p>即：要么都用Sequential方法，要么都用Class方法，否则会在加载参数的时候报错如图4所示。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/28/N2qa2d.png" alt="图4：模型建立方法不一致导致的错误" /></p><p> </p><p> </p><p> </p><h3 id="22-加载参数"><a class="markdownIt-Anchor" href="#22-加载参数"></a> 2.2 加载参数</h3><p>使用load_weights方法加载训练时保存的参数信息<code>mnist.ckpt</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model_save_path = <span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line">model.load_weights(model_save_path)</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><h3 id="23-预测结果"><a class="markdownIt-Anchor" href="#23-预测结果"></a> 2.3 预测结果</h3><p>取测试图片做预处理，然后使用predict函数做预测。预处理包括尺寸的剪裁、灰度处理、底色与字体颜色与训练图片统一、归一化、<strong>维度变换</strong>等。送入predict函数，视返回的概率最大的数据为最终预测结果。</p><div class="note info">            <p>特别的，对于维度变换：</p><p>由于神经网络训练时都是按照batch送入的，所以，进入predict函数前，先要把img_arr前面添加一个维度：从28行28列的二维数据变为1个28行28列的三维数据。即：(28,28) ——&gt; (1,28,28)</p>          </div><p> </p><p> </p><p> </p><h3 id="测试代码实现"><a class="markdownIt-Anchor" href="#测试代码实现"></a> 测试——代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Flatten,Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(threshold=np.inf)<span class="comment">#设置print输出格式，通过np.inf使完全输出，不允许用省略号代替</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  一：复现模型(前向传播)  (注意：如果训练时用的是Class，那么测试时也要用Class来复现，否则会报错)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MnistModel</span><span class="params">(Model)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>     <span class="comment">#定义网络结构</span></span><br><span class="line">        super(MnistModel,self).__init__()</span><br><span class="line"></span><br><span class="line">        self.flatten=Flatten()   </span><br><span class="line">        self.d1=Dense(<span class="number">128</span>,activation=<span class="string">'relu'</span>)   </span><br><span class="line">        self.d2=Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self,x)</span>:</span>    </span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.d1(x)</span><br><span class="line">        y = self.d2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">model = MnistModel()    <span class="comment">#实例化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">#  一：复现模型(前向传播)   Sequential写法</span></span><br><span class="line"><span class="string">model = tf.keras.models.Sequential([</span></span><br><span class="line"><span class="string">    tf.keras.layers.Flatten(),</span></span><br><span class="line"><span class="string">    tf.keras.layers.Dense(128, activation='relu'),</span></span><br><span class="line"><span class="string">    tf.keras.layers.Dense(10, activation='softmax')]) </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  二：加载参数</span></span><br><span class="line">model_save_path = <span class="string">'./checkpoint/mnist.ckpt'</span></span><br><span class="line">model.load_weights(model_save_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  三：取测试图片做预处理，然后使用predict函数做预测</span></span><br><span class="line">img = Image.open(<span class="string">'test/8.png'</span>)</span><br><span class="line">img = img.resize((<span class="number">28</span>,<span class="number">28</span>),Image.ANTIALIAS)   </span><br><span class="line">img_arr = np.array(img.convert(<span class="string">'L'</span>))     <span class="comment">#转换为灰度图</span></span><br><span class="line">img_arr = <span class="number">255</span> - img_arr                  <span class="comment">#第一种方法：将测试用的白底灰字图  转化为  训练用的黑底白字图</span></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">for i in range(28):                      #第二种方法：将测试用的白底灰字图  转化为  只有黑白两色的高对比度图片。在保留有效信息时滤去背景噪声，图片更纯净。阈值自定义</span></span><br><span class="line"><span class="string">    for j in range(28):</span></span><br><span class="line"><span class="string">        if img_arr[i][j] &lt; 200:</span></span><br><span class="line"><span class="string">            img_arr[i][j] = 255</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            img_arr[i][j] = 0 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_arr = img_arr / <span class="number">255.0</span>                <span class="comment">#归一化</span></span><br><span class="line">x_predict = img_arr[tf.newaxis,...]      <span class="comment">#维度变换</span></span><br><span class="line">result = model.predict(x_predict)        <span class="comment">#送入predict函数，返回概率数组</span></span><br><span class="line">pred = tf.argmax(result,axis=<span class="number">1</span>)          <span class="comment">#选取概率最大的为最终结果</span></span><br><span class="line">tf.print(pred)</span><br></pre></td></tr></table></figure><p>输出结果很简单，就是预测得到的结果，单纯的“[8]” .          正确</p><p> </p><p> </p><p> </p><p> </p><blockquote><p>本文以上内容，是在学习<code>北京大学软件与微电子学院曹健老师的Tensorflow2.0笔记</code> 之后自主总结的知识</p><p>代码全部手敲（有改动），文字自己总结</p><p>视频地址：<a href="https://www.bilibili.com/video/BV1B7411L7Qt" target="_blank" rel="noopener external nofollow noreferrer">https://www.bilibili.com/video/BV1B7411L7Qt</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Version </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相对路径总结</title>
      <link href="/2020/06/3638756164.html"/>
      <url>/2020/06/3638756164.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>一、基本概念</strong></p><p>1、相对路径-顾名思义，相对路径就是相对于当前文件的路径。网页中一般表示路径使用这个方法。</p><p>2、绝对路径-绝对路径就是你的主页上的文件或目录在硬盘上真正的路径。绝对路径就是你的主页上的文件或目录在硬盘上真正的路径，比如，你的Perl 程序是存放在 c:/apache/cgi-bin 下的，那么 c:/apache/cgi-bin就是cgi-bin目录的绝对路径</p><p><strong>二、相对路径使用的特殊符号</strong></p><p>以下为建立路径所使用的几个特殊符号，及其所代表的意义。</p><p>“./”：代表目前所在的目录。</p><p>“…/”：代表上一层目录。</p><p>以”/”开头：代表根目录。</p><p>根目录下有Site1和Image/Image.jpg，Site1下有Page1.html文件和Site2文件夹。Site2下有Page2.html和Page2Image.jpg图片文件。<br /><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180524234334794?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzY5NTcz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" /></p><p><strong>1、文件在当前目录</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Page2.html访问Page2Image.jpg</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”./Page2Image.jpg”</span>&gt;</span>或者<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”Page2Image.</span> <span class="attr">jpg</span>”&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、文件在上一层目录</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page1.html访问Image下的Image.jpg</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”../Image/Image.jpg”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Page2.html访问Image下的Image.jpg</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”../../Image/Image.jpg”</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、文件在下一层目录</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Page1.html访问Site2文件夹下的Page2Image.jpg</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”</span> <span class="attr">.</span>/<span class="attr">Site2</span>/<span class="attr">Image.jpg</span>”&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”</span> <span class="attr">Site2</span>/<span class="attr">Image.jpg</span>”&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、根目录表示法,任何页面访问Image下的Image.jpg图片</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”/Image/Image.jpg”</span>&gt;</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习常见算法分类汇总</title>
      <link href="/2020/06/2301285955.html"/>
      <url>/2020/06/2301285955.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="note info">            <p>同时也作为暑期学习计划</p>          </div><p> <br /> </p><p>机器学习的算法很多。很多时候困惑人们都是，很多算法是一类算法，而有些算法又是从其他算法中延伸出来的。这里，我们从两个方面来给大家介绍，第一个方面是学习的方式，第二个方面是算法的分类。</p><h2 id="1-学习方式"><a class="markdownIt-Anchor" href="#1-学习方式"></a> 1. 学习方式</h2><p>根据数据类型的不同，对一个问题的建模有不同的方式。在机器学习或者人工智能领域，人们首先会考虑算法的学习方式。在机器学习领域，有几种主要的学习方式。将算法按照学习方式分类是一个不错的想法，这样可以让人们在建模和算法选择的时候考虑能根据输入数据来选择最合适的算法来获得最好的结果。</p><h3 id="11-监督式学习"><a class="markdownIt-Anchor" href="#11-监督式学习"></a> 1.1 监督式学习</h3><p><img src= "/img/loading.gif" data-src="http://ww4.sinaimg.cn/mw690/7cc829d3gw1ekoj9ozt1xj208c06nq31.jpg" alt="img" /></p><p>在监督式学习下，输入数据被称为“训练数据”，每组训练数据有一个明确的标识或结果，如对防垃圾邮件系统中“垃圾邮件”“非垃圾邮件”，对手写数字识别中的“1“，”2“，”3“，”4“等。在建立预测模型的时候，监督式学习建立一个学习过程，将预测结果与“训练数据”的实际结果进行比较，不断的调整预测模型，直到模型的预测结果达到一个预期的准确率。监督式学习的常见应用场景如分类问题和回归问题。常见算法有逻辑回归（Logistic Regression）和反向传递神经网络（Back Propagation Neural Network）。</p><h3 id="12-非监督式学习"><a class="markdownIt-Anchor" href="#12-非监督式学习"></a> 1.2 非监督式学习</h3><p><img src= "/img/loading.gif" data-src="http://ww1.sinaimg.cn/mw690/7cc829d3gw1ekoj9pp0wxj208c069mxc.jpg" alt="img" /></p><p>在非监督式学习中，数据并不被特别标识，学习模型是为了推断出数据的一些内在结构。常见的应用场景包括关联规则的学习以及聚类等。常见算法包括Apriori算法以及k-Means算法。</p><h3 id="13-半监督式学习"><a class="markdownIt-Anchor" href="#13-半监督式学习"></a> 1.3 半监督式学习</h3><p><img src= "/img/loading.gif" data-src="http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9qcia3j208c05kq3b.jpg" alt="img" /></p><p>在此学习方式下，输入数据部分被标识，部分没有被标识，这种学习模型可以用来进行预测，但是模型首先需要学习数据的内在结构以便合理的组织数据来进行预测。应用场景包括分类和回归，算法包括一些对常用监督式学习算法的延伸，这些算法首先试图对未标识数据进行建模，在此基础上再对标识的数据进行预测。如图论推理算法（Graph Inference）或者拉普拉斯支持向量机（Laplacian SVM.）等。</p><h3 id="14-强化学习"><a class="markdownIt-Anchor" href="#14-强化学习"></a> 1.4 强化学习</h3><p><img src= "/img/loading.gif" data-src="http://ww1.sinaimg.cn/mw690/7cc829d3gw1ekoj9r0xldj208c04wgls.jpg" alt="img" /></p><p>在这种学习模式下，输入数据作为对模型的反馈，不像监督模型那样，输入数据仅仅是作为一个检查模型对错的方式，在强化学习下，输入数据直接反馈到模型，模型必须对此立刻作出调整。常见的应用场景包括动态系统以及机器人控制等。常见算法包括Q-Learning以及时间差学习（Temporal difference learning）。</p><p>在企业数据应用的场景下， 人们最常用的可能就是监督式学习和非监督式学习的模型。 在图像识别等领域，由于存在大量的非标识的数据和少量的可标识数据， 目前半监督式学习是一个很热的话题。 而强化学习更多的应用在机器人控制及其他需要进行系统控制的领域。</p><h2 id="2-算法分类"><a class="markdownIt-Anchor" href="#2-算法分类"></a> 2. 算法分类</h2><p>根据算法的功能和形式的类似性，我们可以把算法分类，比如说基于树的算法，基于神经网络的算法等等。当然，机器学习的范围非常庞大，有些算法很难明确归类到某一类。而对于有些分类来说，同一分类的算法可以针对不同类型的问题。这里，我们尽量把常用的算法按照最容易理解的方式进行分类。</p><h3 id="21-回归算法"><a class="markdownIt-Anchor" href="#21-回归算法"></a> 2.1 回归算法</h3><p><img src= "/img/loading.gif" data-src="http://ww4.sinaimg.cn/mw690/7cc829d3gw1ekoj9s6y2gj206p05tq2z.jpg" alt="img" /></p><p>回归算法是试图采用对误差的衡量来探索变量之间的关系的一类算法。回归算法是统计机器学习的利器。在机器学习领域，人们说起回归，有时候是指一类问题，有时候是指一类算法，这一点常常会使初学者有所困惑。常见的回归算法包括：最小二乘法（Ordinary Least Square），逻辑回归（Logistic Regression），逐步式回归（Stepwise Regression），多元自适应回归样条（Multivariate Adaptive Regression Splines）以及本地散点平滑估计（Locally Estimated Scatterplot Smoothing）。</p><h3 id="22-基于实例的算法"><a class="markdownIt-Anchor" href="#22-基于实例的算法"></a> 2.2 基于实例的算法</h3><p><img src= "/img/loading.gif" data-src="http://ww2.sinaimg.cn/mw690/7cc829d3gw1ekoj9sk4lzj205p058aa3.jpg" alt="img" /></p><p>基于实例的算法常常用来对决策问题建立模型，这样的模型常常先选取一批样本数据，然后根据某些近似性把新数据与样本数据进行比较。通过这种方式来寻找最佳的匹配。因此，基于实例的算法常常也被称为“赢家通吃”学习或者“基于记忆的学习”。常见的算法包括 k-Nearest Neighbor(KNN), 学习矢量量化（Learning Vector Quantization， LVQ），以及自组织映射算法（Self-Organizing Map ， SOM）。</p><h3 id="23-正则化方法"><a class="markdownIt-Anchor" href="#23-正则化方法"></a> 2.3 正则化方法</h3><p><img src= "/img/loading.gif" data-src="http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9sys2qj208c069t8r.jpg" alt="img" /></p><p>正则化方法是其他算法（通常是回归算法）的延伸，根据算法的复杂度对算法进行调整。正则化方法通常对简单模型予以奖励而对复杂算法予以惩罚。常见的算法包括：Ridge Regression， Least Absolute Shrinkage and Selection Operator（LASSO），以及弹性网络（Elastic Net）。</p><h3 id="24-决策树学习"><a class="markdownIt-Anchor" href="#24-决策树学习"></a> 2.4 决策树学习</h3><p><img src= "/img/loading.gif" data-src="http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9twulxj208c059q33.jpg" alt="img" /></p><p>决策树算法根据数据的属性采用树状结构建立决策模型， 决策树模型常常用来解决分类和回归问题。常见的算法包括：分类及回归树（Classification And Regression Tree， CART）， ID3 (Iterative Dichotomiser 3)， C4.5， Chi-squared Automatic Interaction Detection(CHAID), Decision Stump, 随机森林（Random Forest）， 多元自适应回归样条（MARS）以及梯度推进机（Gradient Boosting Machine， GBM）</p><h3 id="25-贝叶斯方法"><a class="markdownIt-Anchor" href="#25-贝叶斯方法"></a> 2.5 贝叶斯方法</h3><p><img src= "/img/loading.gif" data-src="http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9uudj2j208c06dt8w.jpg" alt="img" /></p><p>贝叶斯方法算法是基于贝叶斯定理的一类算法，主要用来解决分类和回归问题。常见算法包括：朴素贝叶斯算法，平均单依赖估计（Averaged One-Dependence Estimators， AODE），以及Bayesian Belief Network（BBN）。</p><h3 id="26-基于核的算法"><a class="markdownIt-Anchor" href="#26-基于核的算法"></a> 2.6 基于核的算法</h3><p><img src= "/img/loading.gif" data-src="http://ww1.sinaimg.cn/mw690/7cc829d3gw1ekoj9vgw6cj208c06mmxl.jpg" alt="img" /></p><p>基于核的算法中最著名的莫过于支持向量机（SVM）了。 基于核的算法把输入数据映射到一个高阶的向量空间， 在这些高阶向量空间里， 有些分类或者回归问题能够更容易的解决。 常见的基于核的算法包括：支持向量机（Support Vector Machine， SVM）， 径向基函数（Radial Basis Function ，RBF)， 以及线性判别分析（Linear Discriminate Analysis ，LDA)等。</p><h3 id="27-聚类算法"><a class="markdownIt-Anchor" href="#27-聚类算法"></a> 2.7 聚类算法</h3><p><img src= "/img/loading.gif" data-src="http://ww2.sinaimg.cn/mw690/7cc829d3gw1ekoj9w451nj208w06pwew.jpg" alt="img" /></p><p>聚类，就像回归一样，有时候人们描述的是一类问题，有时候描述的是一类算法。聚类算法通常按照中心点或者分层的方式对输入数据进行归并。所以的聚类算法都试图找到数据的内在结构，以便按照最大的共同点将数据进行归类。常见的聚类算法包括 k-Means算法以及期望最大化算法（Expectation Maximization， EM）。</p><h3 id="28-关联规则学习"><a class="markdownIt-Anchor" href="#28-关联规则学习"></a> 2.8 关联规则学习</h3><p><img src= "/img/loading.gif" data-src="http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9wou3ij208h04lt8o.jpg" alt="img" /></p><p>关联规则学习通过寻找最能够解释数据变量之间关系的规则，来找出大量多元数据集中有用的关联规则。常见算法包括 Apriori算法和Eclat算法等。</p><h3 id="29-遗传算法genetic-algorithm"><a class="markdownIt-Anchor" href="#29-遗传算法genetic-algorithm"></a> 2.9 遗传算法（genetic algorithm）</h3><p><img src= "/img/loading.gif" data-src="https://images0.cnblogs.com/blog2015/764050/201507/220727319123006.jpg" alt="img" /></p><p>遗传算法模拟生物繁殖的突变、交换和达尔文的自然选择（在每一生态环境中适者生存）。它把问题可能的解编码为一个向量，称为个体，向量的每一个元素称为基因，并利用目标函数（相应于自然选择标准）对群体（个体的集合）中的每一个个体进行评价，根据评价值（适应度）对个体进行选择、交换、变异等遗传操作，从而得到新的群体。遗传算法适用于非常复杂和困难的环境，比如，带有大量噪声和无关数据、事物不断更新、问题目标不能明显和精确地定义，以及通过很长的执行过程才能确定当前行为的价值等。同神经网络一样，遗传算法的研究已经发展为人工智能的一个独立分支，其代表人物为霍勒德（J.H.Holland）。</p><h3 id="210-人工神经网络"><a class="markdownIt-Anchor" href="#210-人工神经网络"></a> 2.10 人工神经网络</h3><p><img src= "/img/loading.gif" data-src="http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9xd38hj208c06ot8z.jpg" alt="img" /></p><p>人工神经网络算法模拟生物神经网络，是一类模式匹配算法。通常用于解决分类和回归问题。人工神经网络是机器学习的一个庞大的分支，有几百种不同的算法。（其中深度学习就是其中的一类算法，我们会单独讨论），重要的人工神经网络算法包括：感知器神经网络（Perceptron Neural Network）, 反向传递（Back Propagation）， Hopfield网络，自组织映射（Self-Organizing Map, SOM）。</p><h3 id="211-深度学习"><a class="markdownIt-Anchor" href="#211-深度学习"></a> 2.11 深度学习</h3><p><img src= "/img/loading.gif" data-src="http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9xxwx1j208c049t8u.jpg" alt="img" /></p><p>深度学习算法是对人工神经网络的发展。 在近期赢得了很多关注， 特别是<a href="http://www.ctocio.com/ccnews/15615.html" target="_blank" rel="noopener external nofollow noreferrer">百度也开始发力深度学习后</a>， 更是在国内引起了很多关注。  在计算能力变得日益廉价的今天，深度学习试图建立大得多也复杂得多的神经网络。很多深度学习的算法是半监督式学习算法，用来处理存在少量未标识数据的大数据集。常见的深度学习算法包括：受限波尔兹曼机（Restricted Boltzmann Machine， RBN）， Deep Belief Networks（DBN），卷积网络（Convolutional Network）, 堆栈式自动编码器（Stacked Auto-encoders）。</p><h3 id="212-降低维度算法"><a class="markdownIt-Anchor" href="#212-降低维度算法"></a> 2.12 降低维度算法</h3><p><img src= "/img/loading.gif" data-src="http://ww1.sinaimg.cn/mw690/7cc829d3gw1ekoj9ykfk5j208c07waa7.jpg" alt="img" /></p><p>像聚类算法一样，降低维度算法试图分析数据的内在结构，不过降低维度算法是以非监督学习的方式试图利用较少的信息来归纳或者解释数据。这类算法可以用于高维数据的可视化或者用来简化数据以便监督式学习使用。常见的算法包括：主成份分析（Principle Component Analysis， PCA），偏最小二乘回归（Partial Least Square Regression，PLS）， Sammon映射，多维尺度（Multi-Dimensional Scaling, MDS）,  投影追踪（Projection Pursuit）等。</p><h3 id="213-集成算法"><a class="markdownIt-Anchor" href="#213-集成算法"></a> 2.13 集成算法</h3><p><img src= "/img/loading.gif" data-src="http://ww1.sinaimg.cn/mw690/7cc829d3gw1ekoj9z6oxpj208c052jre.jpg" alt="img" /></p><p>集成算法用一些相对较弱的学习模型独立地就同样的样本进行训练，然后把结果整合起来进行整体预测。集成算法的主要难点在于究竟集成哪些独立的较弱的学习模型以及如何把学习结果整合起来。这是一类非常强大的算法，同时也非常流行。常见的算法包括：Boosting， Bootstrapped Aggregation（Bagging）， AdaBoost，堆叠泛化（Stacked Generalization， Blending），梯度推进机（Gradient Boosting Machine, GBM），随机森林（Random Forest），GBDT（Gradient Boosting Decision Tree）。</p><blockquote><p>引用：<a href="https://www.cnblogs.com/maybe2030/p/4665816.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/maybe2030/p/4665816.html</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode---爬楼梯</title>
      <link href="/2020/06/3770813090.html"/>
      <url>/2020/06/3770813090.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol><li><a href="https://imgchr.com/i/tvRetU" target="_blank" rel="noopener external nofollow noreferrer"><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/06/13/tvRetU.png" alt="tvRetU.png" /></a></li></ol><blockquote><p>来源：力扣（LeetCode）<br />链接：<a href="https://leetcode-cn.com/problems/climbing-stairs" target="_blank" rel="noopener external nofollow noreferrer">https://leetcode-cn.com/problems/climbing-stairs</a></p></blockquote><p>使用动态规划方法。</p><p>假设n=10，从后往前分析，如果只差一步就达到第10层，那么当前必然是在第9层或第8层。</p><p>对于前者，走一次一级台阶，就到达，<code>并且只能这样</code>。所以对于前者：从地面到10的走法数量等于从地面到9的走法数量X；</p><p>对于后者，不能错误的认为有两种方式到达，即“连续走两次一级台阶”或“走一次二级台阶”，因为第一种走法覆盖了“当前在第9层”的情况，<code>所以也是只能有一种方式</code>。所以对于后者：从地面到10的走法数量等于从地面到8的走法数量Y；</p><p>综上，从地面到10的走法数量=X+Y</p><p>有F[10]=F[9]+F[8]</p><p>同理可知F[9]、F[8]…的表达式。</p><p>一直到F[1],F[2]，可以直接想到F[1]=1,F[2]=2</p><p>由此得到解体程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">int</span> F[<span class="number">50</span>];</span><br><span class="line">        F[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        F[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            F[i]=F[i<span class="number">-1</span>]+F[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> F[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量范数和矩阵范数及其相容性</title>
      <link href="/2020/05/730653464.html"/>
      <url>/2020/05/730653464.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>范数（norm）<strong>是数学中一种基本的函数，又可以称为</strong>模</strong>。向量范数和矩阵范数用于描述向量和矩阵的大小。</p><p>范数的本质是距离，是具有 “长度” 概念的函数。存在的意义是为了实现比较，把不能比较的向量转换成可以比较的实数。</p><a id="more"></a><h2 id="一-向量范数vector-norm"><a class="markdownIt-Anchor" href="#一-向量范数vector-norm"></a> 一、向量范数（Vector norm）</h2><h3 id="1-向量范数的性质"><a class="markdownIt-Anchor" href="#1-向量范数的性质"></a> 1、向量范数的性质</h3><ol><li><strong>非负性</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">||x|| \geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">||x|| = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 当且仅当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时成立</li><li><strong>齐次性</strong>：对所有  $ c∈C $ 有$ ||k\cdot x|| = |k| \cdot ||x|| $</li><li><strong>三角不等式</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||x+y|| \leq ||x|| + ||y||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord">∣</span></span></span></span></li></ol><p></p><h3 id="2-向量范数的类型"><a class="markdownIt-Anchor" href="#2-向量范数的类型"></a> 2、向量范数的类型</h3><p>首先定义一个向量为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x&#x3D;[-5，6，8, -10]</span><br></pre></td></tr></table></figure><h5 id="1-范数"><a class="markdownIt-Anchor" href="#1-范数"></a> 1 - 范数：</h5><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mn>1</mn></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">||x||_1=\sum_{i=1}^n{\left| x_i \right|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span>，即向量元素绝对值之和，x 到零点的<code>曼哈顿距离（Manhattan Distance）</code>。</p><p>上述向量a的1范数结果就是：29。matlab调用函数norm(x, 1) 。</p><h5 id="2-范数"><a class="markdownIt-Anchor" href="#2-范数"></a> 2 - 范数：</h5><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mn>2</mn></msub><mo>=</mo><msup><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msup><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence="true">∣</mo></mrow><mn>2</mn></msup><mo fence="true">)</mo></mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">||x||_2=\left( \sum_{i=1}^n{\left| x_i \right|^2} \right) ^{\frac{1}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1439399999999997em;vertical-align:-0.65002em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49392em;"><span style="top:-3.9029em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span> ，即向量元素绝对值的平方和再开方，表示x到零点的<code>欧几里得距离（Euclidean distance）</code>。</p><p>上述a的2范数结果就是：15。matlab调用函数norm(x, 2)。</p><h5 id="p-范数"><a class="markdownIt-Anchor" href="#p-范数"></a> p - 范数：</h5><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>p</mi></msub><mo>=</mo><msup><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msup><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence="true">∣</mo></mrow><mi>p</mi></msup><mo fence="true">)</mo></mrow><mfrac><mn>1</mn><mi>p</mi></mfrac></msup></mrow><annotation encoding="application/x-tex">||x||_p=\left( \sum_{i=1}^n{\left| x_i \right|^p} \right) ^{\frac{1}{p}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4479220000000002em;vertical-align:-0.29971000000000003em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.148212em;"><span style="top:-3.5571919999999997em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span> ，即向量元素绝对值的p次方和的1/p次幂，表示x到零点的p阶<code>闵氏距离（Minkowski distance）</code>。matlab调用函数norm(x, p)。</p><blockquote><p>注意：<strong>p的范围是[1, inf)</strong>。<strong>p在(0,1)范围内定义的并不是范数</strong>，因为违反了三角不等式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||x+y|| \leq ||x|| + ||y||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord">∣</span></span></span></span>，此处x和y是向量。</p><p>在p范数下定义的单位球（unit ball）都是凸集（convex set，简单地说，若集合A中任意两点的连线段上的点也在集合A中，则A是凸集），但是当0&lt;p&lt;1时，在该定义下的unit ball并不是凸集（注意：我们没说在该范数定义下，因为如前所述，0&lt;p&lt;1时，并不是范数）.下图展示了p取不同值时unit ball的形状。</p><p><img src= "/img/loading.gif" data-src="http://bbs.sciencenet.cn/home.php?mod=attachment&amp;filename=image.png&amp;id=537241" alt="" /></p></blockquote><h5 id="infty-范数"><a class="markdownIt-Anchor" href="#infty-范数"></a> $ \infty $ 范数：</h5><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∞</mi></msub><mo>=</mo><msub><mo><mi>max</mi><mo>⁡</mo></mo><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||x||_{\infty} = \max_i |x_i|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span> ，当p趋向于正无穷时，即所有向量元素绝对值中的最大值。</p><p>上述向量a的负无穷范数结果就是：10。matlab调用函数norm(x, inf)。</p><h5 id="-infty-范数"><a class="markdownIt-Anchor" href="#-infty-范数"></a> $ -\infty $ 范数：</h5><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow></msub><mo>=</mo><msub><mo><mi>min</mi><mo>⁡</mo></mo><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||x||_{-\infty} = \min_i |x_i|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span> ，当p趋向于负无穷时，即所有向量元素绝对值中的最小值。</p><p>上述向量a的负无穷范数结果就是：5。matlab调用函数norm(x, -inf)</p><h5 id="0-范数"><a class="markdownIt-Anchor" href="#0-范数"></a> 0 - 范数：</h5><p>当p趋于零，可以证明这时候的极限$ (x<sup>p_1+x</sup>p_2+…+x<sup>p_m)</sup>\frac{1}{p} $恰好是向量中非零元素的个数。</p><h2 id="二-矩阵范数matrix-norm"><a class="markdownIt-Anchor" href="#二-矩阵范数matrix-norm"></a> 二、矩阵范数（Matrix norm）</h2><h3 id="1-矩阵范数的性质"><a class="markdownIt-Anchor" href="#1-矩阵范数的性质"></a> 1、矩阵范数的性质</h3><ol><li><strong>非负性</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">||A|| \geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">||A|| = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 当且仅当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">A=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时成立</li><li><strong>齐次性</strong>：对所有  $ c∈C $ 有 $ ||k\cdot A|| = |k| \cdot ||A|| $</li><li><strong>三角不等式</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo>+</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||A+B|| \leq ||A|| + ||B||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord">∣</span></span></span></span></li><li><strong>次积性</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi>B</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo separator="true">⋅</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||AB|| \leq ||A|| · ||B||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord">∣</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord">∣</span></span></span></span></li></ol><h3 id="2-矩阵范数的类型"><a class="markdownIt-Anchor" href="#2-矩阵范数的类型"></a> 2、矩阵范数的类型</h3><p>例如矩阵</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &#x3D; [ -1  2 -3；</span><br><span class="line">  4  -6  6 ]</span><br></pre></td></tr></table></figure><h5 id="1-范数-2"><a class="markdownIt-Anchor" href="#1-范数-2"></a> 1 - 范数</h5><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">∥</mo><mi>A</mi><msub><mo stretchy="false">∥</mo><mn>1</mn></msub><mo>=</mo><munder><mo><mi>m</mi><mi>a</mi><mi>x</mi></mo><mi>j</mi></munder><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mrow><mo fence="true">∣</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\lVert A \rVert _1=\underset{j}{max}\sum_{i=1}^m{\left| a_{i,j} \right|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∥</span><span class="mord mathdefault">A</span><span class="mclose"><span class="mclose">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.668064em;vertical-align:-0.863772em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span style="top:-2.3723360000000002em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord mathdefault">ma</span><span class="mord mathdefault">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.863772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span> 矩阵的每一列上的元素绝对值先求和，再从中取个最大的，（列和最大）。</p><p>上述矩阵A的1范数先得到[5,8,9]，再取最大的最终结果就是：9。matlab调用函数norm(A, 1) 。</p><h5 id="2-范数-2"><a class="markdownIt-Anchor" href="#2-范数-2"></a> 2 - 范数：</h5><p>$||A||_2=\sqrt{\lambda} $       ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">λ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>T</mi></msup><mi>A</mi></mrow><annotation encoding="application/x-tex">A^TA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">A</span></span></span></span> 矩阵的最大特征值，称为谱范数 。即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>T</mi></msup><mi>A</mi></mrow><annotation encoding="application/x-tex">A^TA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">A</span></span></span></span> 矩阵的最大特征值的开平方。</p><p>上述矩阵A的2范数得到的最终结果是：10.0623。matlab调用函数norm(A, 2)。</p><h5 id="infty-范数-2"><a class="markdownIt-Anchor" href="#infty-范数-2"></a> $ \infty $ 范数：</h5><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">∥</mo><mi>A</mi><msub><mo stretchy="false">∥</mo><mi mathvariant="normal">∞</mi></msub><mo>=</mo><munder><mo><mi>m</mi><mi>a</mi><mi>x</mi></mo><mi>j</mi></munder><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mrow><mo fence="true">∣</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\lVert A \rVert _{\infty}=\underset{j}{max}\sum_{j=1}^m{\left| a_{i,j} \right|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∥</span><span class="mord mathdefault">A</span><span class="mclose"><span class="mclose">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.668064em;vertical-align:-0.863772em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span style="top:-2.3723360000000002em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord mathdefault">ma</span><span class="mord mathdefault">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.863772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span> ，矩阵的每一行上的元素绝对值先求和，再从中取个最大的，（行和最大）。</p><p>上述矩阵A的1范数先得到[6；16]，再取最大的最终结果就是：16。matlab调用函数norm(A, inf)。</p><blockquote><p>接下来我们要介绍机器学习的低秩，稀疏等一些地方用到的范数，一般有核范数，L0范数，L1范数（有时很多人也叫1范数，这就让初学者很容易混淆），L21范数（有时也叫2范数），F范数。。。</p><p>上述范数都是为了解决实际问题中的困难而提出的新的范数定义，不同于前面的矩阵范数。</p></blockquote><h5 id="核范数"><a class="markdownIt-Anchor" href="#核范数"></a> 核范数 ：</h5><p>是指矩阵奇异值的和，可以用来低秩表示（因为最小化核范数，相当于最小化矩阵的秩——低秩）</p><p>上述矩阵A最终结果就是：10.9287， matlab调用函数sum(svd(A))</p><h5 id="l0范数"><a class="markdownIt-Anchor" href="#l0范数"></a> L0范数：</h5><p>矩阵的非0元素的个数，通常用它来表示矩阵的稀疏性，越小0元素越多，也就越稀疏</p><p>上述矩阵A最终结果就是：6</p><h5 id="l1范数"><a class="markdownIt-Anchor" href="#l1范数"></a> L1范数：</h5><p>矩阵中的每个元素绝对值之和，它是L0范数的最优凸近似，因此它也可以表示稀疏</p><p>上述矩阵A最终结果就是：22，matlab调用函数sum(sum(abs(A)))</p><h5 id="f范数"><a class="markdownIt-Anchor" href="#f范数"></a> F范数：</h5><p><strong>Frobenius范数</strong>。矩阵的各个元素平方之和再开平方根，它通常也叫做矩阵的L2范数，它的有点在它是一个凸函数，可以求导求解，易于计算，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>F</mi></msub><mo>=</mo><msqrt><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><msup><mrow><mo fence="true">∣</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo fence="true">∣</mo></mrow><mn>2</mn></msup></mrow></msqrt><mtext> </mtext><mtext> </mtext><mo>=</mo><mtext> </mtext><mtext> </mtext><msqrt><mrow><mi>t</mi><mi>r</mi><mrow><mo fence="true">(</mo><msup><mi>A</mi><mi>H</mi></msup><mi>A</mi><mo fence="true">)</mo></mrow></mrow></msqrt></mrow><annotation encoding="application/x-tex">||A||_F=\sqrt{\sum_{i,j}{\left| a_{i,j} \right|^2}}\,\,=\,\,\sqrt{tr\left( A^HA \right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5959050000000001em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.244095em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.2040949999999997em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5959050000000001em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.29633449999999995em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9436655em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.767331em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span><span class="mord mathdefault">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.9036655000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29633449999999995em;"><span></span></span></span></span></span></span></span></span></p><p>上述矩阵A最终结果就是：10.0995，matlab调用函数norm（A，‘fro’）</p><h5 id="l21范数"><a class="markdownIt-Anchor" href="#l21范数"></a> L21范数：</h5><p>矩阵先以每一列为单位，求每一列的F范数（也可认为是向量的2范数），然后再将得到的结果求L1范数（也可认为是向量的1范数），很容易看出它是介于L1和L2之间的一种范数</p><p>上述矩阵A最终结果就是：17.1559，matlab调用函数 norm(A(:,1),2) + norm(A(:,2),2) + norm(A(:,3),2)</p><blockquote><p><strong>总结：</strong></p><p><strong>矩阵的L0，L1，L2范数都和向量的0，1，2范数相对应，而和矩阵的1，2范数有区别</strong></p></blockquote><h2 id="三-向量范数和矩阵范数的相容性compatibility"><a class="markdownIt-Anchor" href="#三-向量范数和矩阵范数的相容性compatibility"></a> 三、向量范数和矩阵范数的相容性（compatibility）</h2><ul><li><strong>定义</strong>：设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">||\cdot||_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">C^{n \times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 上的<strong>矩阵范数</strong>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">||\cdot||_{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>C</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">C^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 上的<strong>向量范数</strong>，对任意的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∈</mo><msup><mi>C</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">A \in C^{n\times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi>C</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">x \in C^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> ，都有：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi>X</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>v</mi></msub><mo>≤</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>m</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">||AX||_{v} \leq ||A||_{m}||x||_{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>则称<strong>矩阵范数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">||\cdot||_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  与向量范数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi><msub><mi mathvariant="normal">∣</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">||\cdot||_{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  是相容的</strong>。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">C^{n \times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 上的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">m_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 范数与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>C</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">C^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 上的1范数相容。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">C^{n \times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 上的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> 范数与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>C</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">C^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 上的2范数相容。</li></ul><blockquote><p><strong>参考：</strong><br /><a href="https://ww2.mathworks.cn/help/matlab/ref/norm.html" target="_blank" rel="noopener external nofollow noreferrer">https://ww2.mathworks.cn/help/matlab/ref/norm.html</a><br /><a href="https://www.cnblogs.com/marsggbo/p/9703446.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/marsggbo/p/9703446.html</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown数学公式语法</title>
      <link href="/2020/05/3416639659.html"/>
      <url>/2020/05/3416639659.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="typora内开启行内公式"><a class="markdownIt-Anchor" href="#typora内开启行内公式"></a> Typora内开启行内公式</h2><p><strong>文件→偏好设置→Markdown，勾选内联公式，重启typora</strong></p><p>输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi><mi mathvariant="normal">按</mi><mi>e</mi><mi>s</mi><mi>c</mi><mi mathvariant="normal">键</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">自</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi></mrow><annotation encoding="application/x-tex">，按esc键会自动在后面加上一个</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">按</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">自</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span></span></span></span>，然后在这两个$之间输入公式。</p><h2 id="typora内开启行间公式"><a class="markdownIt-Anchor" href="#typora内开启行间公式"></a> Typora内开启行间公式</h2><p>将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</p><hr /><h2 id="上标-下标与组合"><a class="markdownIt-Anchor" href="#上标-下标与组合"></a> 上标、下标与组合</h2><ol><li>上标符号，符号：<code>^</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">x^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li><li>下标符号，符号：<code>_</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>组合符号，符号：<code>{}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mn>16</mn><mn>8</mn></msub><mi>O</mi><msub><mrow><mn>2</mn><mo>+</mo></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">{16}_{8}O{2+}_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord">1</span><span class="mord">6</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord"><span class="mord">2</span><span class="mord">+</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ol><h2 id="汉字-字体与格式"><a class="markdownIt-Anchor" href="#汉字-字体与格式"></a> 汉字、字体与格式</h2><ol><li>汉字形式，符号：<code>\mbox{}</code>，如：V_{\mbox{初始}}</li><li>字体控制，符号：<code>\displaystyle</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{x+y}{y+z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1407700000000003em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>下划线符号，符号：<code>\underline</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder accentunder="true"><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">\underline{x+y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.97777em;vertical-align:-0.3944400000000001em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5833299999999999em;"><span style="top:-2.6455599999999997em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3944400000000001em;"><span></span></span></span></span></span></span></span></span></li><li>标签，符号<code>\tag{数字}</code>，如：\tag{11}</li><li>上大括号，符号：<code>\overbrace{算式}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover><mover><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi></mrow><mo stretchy="true">⏞</mo></mover><mn>2.0</mn></mover></mrow><annotation encoding="application/x-tex">\overbrace{a+b+c+d}^{2.0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.076878em;vertical-align:-0.08333em;"></span><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9935479999999997em;"><span style="top:-3.34244em;"><span class="pstrut" style="height:3.34244em;"></span><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3424399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span></span></span><span class="svg-align" style="top:-3.79444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08333em;"><span></span></span></span></span></span></span><span style="top:-4.88488em;"><span class="pstrut" style="height:3.34244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">.</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08333em;"><span></span></span></span></span></span></span></span></span></li><li>下大括号，符号：<code>\underbrace{算式}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><munder><munder><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow><mo stretchy="true">⏟</mo></munder><mn>1.0</mn></munder><mo>+</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">a+\underbrace{b+c}_{1.0}+d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.076878em;vertical-align:-1.382438em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-1.617562em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">.</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span class="svg-align" style="top:-2.26867em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.73133em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.382438em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></li><li>上位符号，符号：<code>\stacrel{上位符号}{基位符号}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mover><mo><mo>=</mo></mo><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">f</mi></mrow></mover><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow></mrow><annotation encoding="application/x-tex">\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.152978em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.152978em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">=</span></span></span><span style="top:-3.5668699999999998em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathrm mtight">e</span><span class="mord mathrm mtight" style="margin-right:0.07778em;">f</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></li></ol><h2 id="占位符"><a class="markdownIt-Anchor" href="#占位符"></a> 占位符</h2><ol><li>两个quad空格，符号：<code>\qquad</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mspace width="2em"/><mi>y</mi></mrow><annotation encoding="application/x-tex">x \qquad y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>quad空格，符号：<code>\quad</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mspace width="1em"/><mi>y</mi></mrow><annotation encoding="application/x-tex">x \quad y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>大空格，符号<code>\</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mtext> </mtext><mi>y</mi></mrow><annotation encoding="application/x-tex">x \  y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>中空格，符号<code>\:</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>:</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x : y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>小空格，符号<code>\,</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x , y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>没有空格，符号``，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>紧贴，符号<code>\!</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">!</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x ! y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mclose">!</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li></ol><h2 id="定界符与组合"><a class="markdownIt-Anchor" href="#定界符与组合"></a> 定界符与组合</h2><ol><li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">（</mi><mi mathvariant="normal">）</mi><mo fence="false">(</mo><mo fence="false">)</mo><mo fence="false">(</mo><mo fence="false">)</mo><mo fence="false">(</mo><mo fence="false">)</mo><mo fence="false">(</mo><mo fence="false">)</mo></mrow><annotation encoding="application/x-tex">（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">）</span><span class="mord"><span class="delimsizing size1">(</span></span><span class="mord"><span class="delimsizing size1">)</span></span><span class="mord"><span class="delimsizing size2">(</span></span><span class="mord"><span class="delimsizing size2">)</span></span><span class="mord"><span class="delimsizing size3">(</span></span><span class="mord"><span class="delimsizing size3">)</span></span><span class="mord"><span class="delimsizing size4">(</span></span><span class="mord"><span class="delimsizing size4">)</span></span></span></span></span></li><li>中括号，符号：<code>[]</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x+y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span></li><li>大括号，符号：<code>\{ \}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">{x+y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></li><li>自适应括号，符号：<code>\left \right</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(x\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mi>x</mi><mrow><mi>y</mi><mi>z</mi></mrow><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(x{yz}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li><li>组合公式，符号：<code>{上位公式 \choose 下位公式}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>n</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">{n+1 \choose k}={n \choose k}+{n \choose k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.245118em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7453919999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.253331em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span></li><li>组合公式，符号：<code>{上位公式 \atop 下位公式}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>∑</mo><mfrac linethickness="0px"><mrow><msub><mi>k</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo>&gt;</mo><mn>0</mn></mrow><mrow><msub><mi>k</mi><mn>0</mn></msub><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>=</mo><mi>n</mi></mrow></mfrac></msub><msub><mi>A</mi><msub><mi>k</mi><mn>0</mn></msub></msub><msub><mi>A</mi><msub><mi>k</mi><mn>1</mn></msub></msub><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.50218em;vertical-align:-0.75218em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3447999999999999em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.69164em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9880571428571429em;"><span style="top:-2.1349714285714283em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">0</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="minner mtight">⋯</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-2.9920285714285715em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">0</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="minner mtight">…</span><span class="mrel mtight">&gt;</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5790571428571429em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.75218em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span></li></ol><h2 id="四则运算"><a class="markdownIt-Anchor" href="#四则运算"></a> 四则运算</h2><ol><li>加法运算，符号：<code>+</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>减法运算，符号：<code>-</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>−</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x-y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>加减运算，符号：<code>\pm</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>±</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \pm y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>减甲运算，符号：<code>\mp</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∓</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \mp y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∓</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>乘法运算，符号：<code>\times</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>×</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \times y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>点乘运算，符号：<code>\cdot</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⋅</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \cdot y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>星乘运算，符号：<code>\ast</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \ast y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>除法运算，符号：<code>\div</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>÷</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \div y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>斜法运算，符号：<code>/</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">/</mi><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x/y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>分式表示，符号：<code>\frac{分子}{分母}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{x+y}{y+z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.335547em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>分式表示，符号：<code>{分子} \voer {分母}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">{x+y} \over {y+z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.335547em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>绝对值表示，符号：<code>||</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|x+y|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span></span></span></span></li></ol><h2 id="高级运算"><a class="markdownIt-Anchor" href="#高级运算"></a> 高级运算</h2><ol><li>平均数运算，符号：<code>\overline{算式}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>y</mi><mi>z</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{xyz}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></li><li>开二次方运算，符号：<code>\sqrt</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>x</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="padding-left:0.833em;">x</span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span></li><li>开方运算，符号：<code>\sqrt[开方数]{被开方数}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mroot><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mn>3</mn></mroot></mrow><annotation encoding="application/x-tex">\sqrt[3]{x+y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.26055499999999987em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6335540000000002em;"><span style="top:-2.811334em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7794450000000002em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.739445em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26055499999999987em;"><span></span></span></span></span></span></span></span></span></li><li>对数运算，符号：<code>\log</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\log(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></li><li>极限运算，符号：<code>\lim</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>y</mi><mo>→</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mfrac><mi>x</mi><mi>y</mi></mfrac></mrow><annotation encoding="application/x-tex">\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2298399999999998em;vertical-align:-0.481108em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.748732em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li><li>极限运算，符号：<code>\displaystyle \lim</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munderover><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>y</mi><mo>→</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munderover><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.176272em;vertical-align:-0.8804400000000001em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2958319999999999em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span><span style="top:-3.59444em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.853216em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li><li>求和运算，符号：<code>\sum</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>y</mi><mo>→</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mfrac><mi>x</mi><mi>y</mi></mfrac></mrow><annotation encoding="application/x-tex">\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2854em;vertical-align:-0.481108em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li><li>求和运算，符号：<code>\displaystyle \sum</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munderover><mo>∑</mo><mrow><mi>y</mi><mo>→</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munderover><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0546180000000005em;vertical-align:-1.403221em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8828869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.403221em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li><li>积分运算，符号：<code>\int</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><mrow><mi>x</mi><mi>d</mi><mi>x</mi></mrow></mrow><annotation encoding="application/x-tex">\int^{\infty}_{0}{xdx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.215112em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8592920000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></span></li><li>积分运算，符号：<code>\displaystyle \int</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><mrow><mi>x</mi><mi>d</mi><mi>x</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int^{\infty}_{0}{xdx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.326242em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></span></li><li>微分运算，符号：<code>\partial</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial x}{\partial y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3612159999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>矩阵表示，符号：<code>\begin{matrix} \end{matrix}</code>，如：\left[ \begin{matrix} 1 &2 &\cdots &4\5 &6 &\cdots &8\\vdots &\vdots &\ddots &\vdots\13 &14 &\cdots &16\end{matrix} \right]</li></ol><h2 id="逻辑运算"><a class="markdownIt-Anchor" href="#逻辑运算"></a> 逻辑运算</h2><ol><li>等于运算，符号：<code>=</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>大于运算，符号：<code>&gt;</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&gt;</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y&gt;z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>小于运算，符号：<code>&lt;</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&lt;</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y&lt;z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>大于等于运算，符号：<code>\geq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≥</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \geq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>小于等于运算，符号：<code>\leq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≤</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \leq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>不等于运算，符号：<code>\neq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant="normal">≠</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \neq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>不大于等于运算，符号：<code>\ngeq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≱</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \ngeq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.09657em;vertical-align:-0.30274em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">≱</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>不大于等于运算，符号：<code>\not\geq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≱</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \not\geq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>不小于等于运算，符号：<code>\nleq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≰</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \nleq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.09657em;vertical-align:-0.30274em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">≰</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>不小于等于运算，符号：<code>\not\leq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≰</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \not\leq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>约等于运算，符号：<code>\approx</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≈</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \approx z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6775599999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li><li>恒定等于运算，符号：<code>\equiv</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≡</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x+y \equiv z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li></ol><h2 id="集合运算"><a class="markdownIt-Anchor" href="#集合运算"></a> 集合运算</h2><ol><li>属于运算，符号：<code>\in</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∈</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \in y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>不属于运算，符号：<code>\notin</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">∉</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">x \notin y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>不属于运算，符号：<code>\not\in</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∉</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \not\in y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>子集运算，符号：<code>\subset</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊂</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \subset y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>子集运算，符号：<code>\supset</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊃</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \supset y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>真子集运算，符号：<code>\subseteq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊆</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \subseteq y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>非真子集运算，符号：<code>\subsetneq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊊</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \subsetneq y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⊊</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>真子集运算，符号：<code>\supseteq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊇</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \supseteq y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊇</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>非真子集运算，符号：<code>\supsetneq</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊋</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \supsetneq y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⊋</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>非子集运算，符号：<code>\not\subset</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊄</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \not\subset y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>非子集运算，符号：<code>\not\supset</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⊅</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \not\supset y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>并集运算，符号：<code>\cup</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∪</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \cup y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>交集运算，符号：<code>\cap</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∩</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \cap y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>差集运算，符号：<code>\setminus</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∖</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \setminus y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∖</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>同或运算，符号：<code>\bigodot</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⨀</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \bigodot y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨀</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>同与运算，符号：<code>\bigotimes</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>⨂</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x \bigotimes y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨂</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li><li>实数集合，符号：<code>\mathbb{R}</code>，如：<code>\mathbb{R}</code></li><li>自然数集合，符号：<code>\mathbb{Z}</code>，如：<code>\mathbb{Z}</code></li><li>空集，符号：<code>\emptyset</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">∅</span></span></span></span></li></ol><h2 id="数学符号"><a class="markdownIt-Anchor" href="#数学符号"></a> 数学符号</h2><ol><li>无穷，符号：<code>\infty</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></li><li>虚数，符号：<code>\imath</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ı</mi></mrow><annotation encoding="application/x-tex">\imath</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathit latin_fallback">ı</span></span></span></span></li><li>虚数，符号：<code>\jmath</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ȷ</mi></mrow><annotation encoding="application/x-tex">\jmath</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathit latin_fallback">ȷ</span></span></span></span></li><li>数学符号，符号<code>\hat{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span></span></span></span></li><li>数学符号，符号<code>\check{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>ˇ</mo></mover></mrow><annotation encoding="application/x-tex">\check{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.62847em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.62847em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˇ</span></span></span></span></span></span></span></span></span></li><li>数学符号，符号<code>\breve{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>˘</mo></mover></mrow><annotation encoding="application/x-tex">\breve{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">˘</span></span></span></span></span></span></span></span></span></li><li>数学符号，符号<code>\tilde{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6678599999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">~</span></span></span></span></span></span></span></span></span></li><li>数学符号，符号<code>\bar{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˉ</span></span></span></span></span></span></span></span></span></li><li>矢量符号，符号<code>\vec{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></li><li>数学符号，符号<code>\acute{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>ˊ</mo></mover></mrow><annotation encoding="application/x-tex">\acute{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˊ</span></span></span></span></span></span></span></span></span></li><li>数学符号，符号<code>\grave{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>ˋ</mo></mover></mrow><annotation encoding="application/x-tex">\grave{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˋ</span></span></span></span></span></span></span></span></span></li><li>数学符号，符号<code>\mathring{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>˚</mo></mover></mrow><annotation encoding="application/x-tex">\mathring{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.375em;">˚</span></span></span></span></span></span></span></span></span></li><li>一阶导数符号，符号<code>\dot{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>˙</mo></mover></mrow><annotation encoding="application/x-tex">\dot{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.13889em;">˙</span></span></span></span></span></span></span></span></span></li><li>二阶导数符号，符号<code>\ddot{a}</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>¨</mo></mover></mrow><annotation encoding="application/x-tex">\ddot{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">¨</span></span></span></span></span></span></span></span></span></li><li>上箭头，符号：<code>\uparrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>↑</mo></mrow><annotation encoding="application/x-tex">\uparrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↑</span></span></span></span></li><li>上箭头，符号：<code>\Uparrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇑</mo></mrow><annotation encoding="application/x-tex">\Uparrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇑</span></span></span></span></li><li>下箭头，符号：<code>\downarrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>↓</mo></mrow><annotation encoding="application/x-tex">\downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↓</span></span></span></span></li><li>下箭头，符号：<code>\Downarrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></li><li>左箭头，符号：<code>\leftarrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">←</span></span></span></span></li><li>左箭头，符号：<code>\Leftarrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇐</mo></mrow><annotation encoding="application/x-tex">\Leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇐</span></span></span></span></li><li>右箭头，符号：<code>\rightarrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span></li><li>右箭头，符号：<code>\Rightarrow</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span></li><li>底端对齐的省略号，符号：<code>\ldots</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1,2,\ldots,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span></li><li>中线对齐的省略号，符号：<code>\cdots</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>x</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">x_1^2 + x_2^2 + \cdots + x_n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></li><li>竖直对齐的省略号，符号：<code>\vdots</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></li><li>斜对齐的省略号，符号：<code>\ddots</code>，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋱</mo></mrow><annotation encoding="application/x-tex">\ddots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82em;vertical-align:0em;"></span><span class="minner">⋱</span></span></span></span></li></ol><h2 id="希腊字母"><a class="markdownIt-Anchor" href="#希腊字母"></a> 希腊字母</h2><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>A</td><td><code>A</code></td><td>α</td><td><code>\alhpa</code></td></tr><tr><td>B</td><td><code>B</code></td><td>β</td><td><code>\beta</code></td></tr><tr><td>Γ</td><td><code>\Gamma</code></td><td>γ</td><td><code>\gamma</code></td></tr><tr><td>Δ</td><td><code>\Delta</code></td><td>δ</td><td><code>\delta</code></td></tr><tr><td>E</td><td><code>E</code></td><td>ϵ</td><td><code>\epsilon</code></td></tr><tr><td>Z</td><td><code>Z</code></td><td>ζ</td><td><code>\zeta</code></td></tr><tr><td>H</td><td><code>H</code></td><td>η</td><td><code>\eta</code></td></tr><tr><td>Θ</td><td><code>\Theta</code></td><td>θ</td><td><code>\theta</code></td></tr><tr><td>I</td><td><code>I</code></td><td>ι</td><td><code>\iota</code></td></tr><tr><td>K</td><td><code>K</code></td><td>κ</td><td><code>\kappa</code></td></tr><tr><td>Λ</td><td><code>\Lambda</code></td><td>λ</td><td><code>\lambda</code></td></tr><tr><td>M</td><td><code>M</code></td><td>μ</td><td><code>\mu</code></td></tr><tr><td>N</td><td><code>N</code></td><td>ν</td><td><code>\nu</code></td></tr><tr><td>Ξ</td><td><code>\Xi</code></td><td>ξ</td><td><code>\xi</code></td></tr><tr><td>O</td><td><code>O</code></td><td>ο</td><td><code>\omicron</code></td></tr><tr><td>Π</td><td><code>\Pi</code></td><td>π</td><td><code>\pi</code></td></tr><tr><td>P</td><td><code>P</code></td><td>ρ</td><td><code>\rho</code></td></tr><tr><td>Σ</td><td><code>\Sigma</code></td><td>σ</td><td><code>\sigma</code></td></tr><tr><td>T</td><td><code>T</code></td><td>τ</td><td><code>\tau</code></td></tr><tr><td>Υ</td><td><code>\Upsilon</code></td><td>υ</td><td><code>\upsilon</code></td></tr><tr><td>Φ</td><td><code>\Phi</code></td><td>ϕ</td><td><code>\phi</code></td></tr><tr><td>X</td><td><code>X</code></td><td>χ</td><td><code>\chi</code></td></tr><tr><td>Ψ</td><td><code>\Psi</code></td><td>ψ</td><td><code>\psi</code></td></tr><tr><td>Ω</td><td><code>\v</code></td><td>ω</td><td><code>\omega</code></td></tr></tbody></table><blockquote><p>引用：<a href="https://www.jianshu.com/p/e74eb43960a1" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/e74eb43960a1</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂问题</title>
      <link href="/2020/05/1059473274.html"/>
      <url>/2020/05/1059473274.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是基本表什么是视图"><a class="markdownIt-Anchor" href="#什么是基本表什么是视图"></a> 什么是基本表？什么是视图？</h3><ul><li>基本表是本身独立存在的表</li><li>视图是从一个或多个表中导出的表。视图本身不存在数据库中，是一个虚表。</li></ul><h3 id="数据字典的内容和作用是什么"><a class="markdownIt-Anchor" href="#数据字典的内容和作用是什么"></a> 数据字典的内容和作用是什么？</h3><p>数据字典是系统中各类数据描述的集合</p><p>内容：</p><ol><li>数据项</li><li>数据流</li><li>数据结构</li><li>数据过程</li><li>数据存储</li></ol><h3 id="什么是数据抽象"><a class="markdownIt-Anchor" href="#什么是数据抽象"></a> 什么是数据抽象？</h3><p>抽取所关心的共同特征，忽略非本质的细节</p><h3 id="数据库恢复的基本技术"><a class="markdownIt-Anchor" href="#数据库恢复的基本技术"></a> 数据库恢复的基本技术</h3><ol><li>数据转储</li><li>日志文件</li></ol><h3 id="头指针首元素结点-头结点的区别"><a class="markdownIt-Anchor" href="#头指针首元素结点-头结点的区别"></a> 头指针，首元素结点、头结点的区别</h3><ul><li>首元素结点：第一个存储数据元素的结点</li><li>头结点：首元素结点之前的结点，其指针域指向首元素结点，其主要作用是方便对链表的操作。</li><li>头指针：指向链表中的第一个结点。可能是首元素结点，也可能是头结点。</li></ul><h3 id="操作系统调度的三个层次"><a class="markdownIt-Anchor" href="#操作系统调度的三个层次"></a> 操作系统调度的三个层次</h3><ol><li><p>高级调度（作业调度）</p><p>将作业从外存调入到内存</p></li><li><p>中级调度（内存调度）</p><p>把暂时不能运行的进程第哦啊换到外存，适时再转入</p></li><li><p>低级调度（进程调度）</p><p>从就绪队列上选择进程，使其获得CPU</p></li></ol><h3 id="链接的分类"><a class="markdownIt-Anchor" href="#链接的分类"></a> 链接的分类</h3><ul><li>静态重定位</li><li>装入时动态</li><li>运行时动态</li></ul><h3 id="地址重定位的分类"><a class="markdownIt-Anchor" href="#地址重定位的分类"></a> 地址重定位的分类</h3><p>地址重定位：将逻辑地址转化为物理地址</p><ul><li>静态重定位</li><li>动态重定位</li></ul><h3 id="硬实时任务和软实时任务的区别"><a class="markdownIt-Anchor" href="#硬实时任务和软实时任务的区别"></a> 硬实时任务和软实时任务的区别</h3><ul><li>硬实时：严格要求时间。比如火箭中的程序</li><li>软实时：对时间要求不是那么严格</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理小结</title>
      <link href="/2020/05/2370534113.html"/>
      <url>/2020/05/2370534113.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="计算机系统的层次结构多级划分"><a class="markdownIt-Anchor" href="#计算机系统的层次结构多级划分"></a> 计算机系统的层次结构（多级划分）</h4><blockquote><p>第三级：  虚拟机器M4（高级语言机器） 用编译程序翻译成汇编语言程序<br />第二级：  虚拟机器M3（汇编语言机器） 用汇编语言翻译成机器语言程序<br />操作系统： 虚拟机器M2 （操作系统机器）  用机器语言解释操作系统<br />第一级：  传统机器M1（传统机器M1）   用微程序解释机器命令<br />第零级：  微程序机器M0 （微指令系统）   由硬件直接执行微指令</p></blockquote><h5 id="区别以运算器为中心的计算机还是存储器的方法"><a class="markdownIt-Anchor" href="#区别以运算器为中心的计算机还是存储器的方法"></a> 区别以运算器为中心的计算机还是存储器的方法</h5><ul><li>看输入设备能否直接与存储器相连，是的话就是以存储器为中心</li></ul><blockquote><p>冯诺依曼是运算器为核心 ； 现代计算机是储器为核心</p></blockquote><p>冯诺依曼计算机的设计思想：存储程序和程序控制。</p><h4 id="现代计算机由三大部分组成已经转化为以存储器为中心"><a class="markdownIt-Anchor" href="#现代计算机由三大部分组成已经转化为以存储器为中心"></a> 现代计算机由三大部分组成（已经转化为以存储器为中心）</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="type">CPU</span>中央处理器，核心部件为<span class="type">ALU</span>(算术逻辑单元)和<span class="type">CU</span>(控制单元)</span><br><span class="line"><span class="number">2</span>. <span class="type">I</span>/<span class="type">O</span>设备(受<span class="type">CU</span>控制)</span><br><span class="line"><span class="number">3</span>. 主存储器(<span class="type">Main</span> <span class="type">Memory</span>,<span class="type">MM</span>)，分为<span class="type">RAM</span>(随机存储器)和<span class="type">ROM</span>(只读存储器)</span><br></pre></td></tr></table></figure><h3 id="数据的表示方法和转换"><a class="markdownIt-Anchor" href="#数据的表示方法和转换"></a> 数据的表示方法和转换</h3><ul><li>格雷码：任何两个相邻编码只有1个二进制位不同，而其余3个二进制位相同</li></ul><p>原码：正数是其二进制本身；负数是符号位为1,其余位表示其绝对值的二进制。<br />反码：正数是其二进制本身；负数是在其原码的基础上, 符号位不变，其余各个位取反.<br />补码：正数是其二进制本身；负数是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)<br />移码：将符号位取反的补码（不区分正负）</p><h3 id="数据校验码"><a class="markdownIt-Anchor" href="#数据校验码"></a> 数据校验码</h3><ul><li><h6 id="奇偶校验码-利用出错时多数情况下只错一位的现象"><a class="markdownIt-Anchor" href="#奇偶校验码-利用出错时多数情况下只错一位的现象"></a> 奇偶校验码 （利用出错时多数情况下只错一位的现象）</h6><p><strong>奇校验</strong>：</p><p>​将原有的合法二进制数据增加一位<strong>标志位</strong>,标志这串二进制所含’1’的个数,奇数个标志位记0,偶数个标志位记1,这样的做法能保证处理过后的’1’的总数为奇数(因此称之为奇校验)。如果得到的编码中’1’的数量不是奇数,则要么数据传输错误</p><p><strong>偶校验</strong>：</p><p>​与奇校验相反</p></li><li><h6 id="海明校验码"><a class="markdownIt-Anchor" href="#海明校验码"></a> 海明校验码</h6></li><li><h6 id="循环冗余校验码crc"><a class="markdownIt-Anchor" href="#循环冗余校验码crc"></a> 循环冗余校验码(CRC)</h6></li></ul><h2 id="第五章指令系统"><a class="markdownIt-Anchor" href="#第五章指令系统"></a> 第五章:指令系统</h2><ul><li><p>CISC指令系统庞大，指令复杂。设计理念是用最少的指令来完成任务。   --用于大型机</p></li><li><p>RISC使用的是常见的指令，对于不常用的指令通过组合来完成。              --用于小型机</p></li></ul><blockquote><p>现阶段没有纯粹的SISC或RISC，只有相结合的。</p></blockquote><h3 id="指令格式"><a class="markdownIt-Anchor" href="#指令格式"></a> 指令格式</h3><ul><li><p>结构(操作码+地址码)</p><ul><li>操作码</li><li>操作数的地址</li><li>操作结果的存储地址</li><li>下一条指令的地址</li></ul></li><li><p>指令系统的兼容性</p><ul><li>保持系统向上兼容</li></ul></li></ul><h3 id="一条指令在cpu的执行过程"><a class="markdownIt-Anchor" href="#一条指令在cpu的执行过程"></a> 一条指令在CPU的执行过程</h3><h6 id="几乎所有的冯诺伊曼型计算机的cpu其工作都可以分为5个阶段"><a class="markdownIt-Anchor" href="#几乎所有的冯诺伊曼型计算机的cpu其工作都可以分为5个阶段"></a> 几乎所有的冯·诺伊曼型计算机的CPU，其工作都可以分为5个阶段：</h6><blockquote><p>取指令</p><p>指令译码</p><p>执行指令</p><p>访存取数</p><p>结果写回</p></blockquote><h5 id="机器指令和微指令的区别"><a class="markdownIt-Anchor" href="#机器指令和微指令的区别"></a> 机器指令和微指令的区别</h5><p>1、机器指令：机器指令是CPU能直接识别并执行的指令。</p><p>2、微指令：是指在机器的一个CPU周期中，一组实现一定操作功能的微命令的组合。</p><p><code>一条机器指令对应4个CPU周期</code>，每个CPU周期就对于一条微指令。所以一条机器指令的功能是若干条微指令组成的序列来实现的。</p><h5 id="什么是指令字长-机器字长和存储字长"><a class="markdownIt-Anchor" href="#什么是指令字长-机器字长和存储字长"></a> 什么是指令字长、机器字长和存储字长？</h5><p>存储字长：一个存储单元所存储的二进制代码的总位数</p><p>机器字长：指CPU一次能处理的二进制数据的位数，通常与CPU的寄存器位数有关</p><p>指令字长：机器指令中二进制代码的总位数</p><h5 id="什么是指令周期-机器周期cpu周期和时钟周期三者有何关系"><a class="markdownIt-Anchor" href="#什么是指令周期-机器周期cpu周期和时钟周期三者有何关系"></a> 什么是指令周期、机器周期(CPU周期)和时钟周期？三者有何关系？</h5><ul><li><p>指令周期是CPU从内存取出一条指令并执行这条指令的时间总和，一般由若干个机器周期组成，</p></li><li><p>机器周期，也叫CPU周期。指令从取指到结果写回的过程中，单独一个基本操作所需要的时间称为机器周期。</p></li><li><p>时钟周期是计算机中最基本的、最小的时间单位。一个机器周期包含若干个时钟周期。</p></li></ul><blockquote><p>1机器周期 = N时钟周期<br />1指令周期 = N机器周期</p></blockquote><h5 id="指令和数据均存放在内存中计算机如何区分它们是指令还是数据"><a class="markdownIt-Anchor" href="#指令和数据均存放在内存中计算机如何区分它们是指令还是数据"></a> 指令和数据均存放在内存中，计算机如何区分它们是指令还是数据？</h5><p>一般来讲，在取指周期中从存储器读出的信息即指令信息；而在执行周期中从存储器中读出的信息即为数据信息。</p><h5 id="总线的分类"><a class="markdownIt-Anchor" href="#总线的分类"></a> 总线的分类：</h5><p>1、数据总线：在CPU与RAM之间来回传送需要处理或是需要储存的数据。</p><p>2、地址总线：用来指定在RAM之中储存的数据的地址。</p><p>3、控制总线：将微处理器控制单元的信号，传送到周边设备。</p><h5 id="什么是总线的数据传输率它与哪些因素有关"><a class="markdownIt-Anchor" href="#什么是总线的数据传输率它与哪些因素有关"></a> 什么是总线的数据传输率，它与哪些因素有关？</h5><p>数据传输率即为带宽，指单位时间内总线上传输数据的位数。</p><p>它与总线宽度和总线频率有关，总线宽度越宽，频率越快，数据传输率越高。</p><h5 id="说明存取周期和存取时间的区别"><a class="markdownIt-Anchor" href="#说明存取周期和存取时间的区别"></a> 说明存取周期和存取时间的区别</h5><p>存取时间仅为完成一次操作的时间，而存取周期不仅包含操作时间，还包含操作后线路的恢复时间。</p><p>存取周期 = 存取时间 + 恢复时间</p><h5 id="io有哪些编址方式各有何特点"><a class="markdownIt-Anchor" href="#io有哪些编址方式各有何特点"></a> I/O有哪些编址方式？各有何特点？</h5><ul><li>I/O与内存统一编址：二者采取完全一样的格式</li><li>I/O独立编址</li></ul><h5 id="io接口和端口的区别"><a class="markdownIt-Anchor" href="#io接口和端口的区别"></a> I/O接口和端口的区别</h5><p>I/O接口一般指CPU和I/O设备间的连接部件，而端口是指I/O接口内CPU能够访问的寄存器，端口加上相应的控制逻辑即构成I/O接口。</p><h5 id="机器零和数值零的区别"><a class="markdownIt-Anchor" href="#机器零和数值零的区别"></a> 机器零和数值零的区别</h5><p>机器零在数轴上表示为“0”点及其附近的一段区域，即在计算机中小到机器数的精度达不到的数均视为“机器零”</p><h5 id="逻辑移位和算数位移的区别"><a class="markdownIt-Anchor" href="#逻辑移位和算数位移的区别"></a> 逻辑移位和算数位移的区别</h5><p>算术左移和算术右移主要用来进行有符号数的倍增、减半；</p><p>逻辑左移和逻辑右移主要用来进行无符号数的倍增、减半。</p><h5 id="寻址方式"><a class="markdownIt-Anchor" href="#寻址方式"></a> 寻址方式</h5><ol><li><p>立即寻址方式</p><p>操作数在指令中</p></li><li><p>直接寻址方式</p><p>操作数在存储器中，指令直接包含有操作数的有效地址。</p></li><li><p>寄存器寻址方式</p><p>操作数在CPU内部的寄存器中</p></li><li><p>寄存器间接寻址方式</p><p>操作数在存储器中，操作数有效地址在寄存器中</p></li><li><p>寄存器相对寻址方式</p><p>该寻址方式是以指定的寄存器内容，加上指令中给出的位移量（8位或16位），并以一个段寄存器为基准，作为操作数的地址。</p></li><li><p>基址变址寻址方式</p><p>基址加变址寻址方式是指将寄存器的内容与指令中给出的地址偏移量相加，从而得到一个操作数的有效地址。</p></li><li><p>相对基址变址寻址方式</p><p>操作数在存储器中，操作数的有效地址由基址寄存器之一的内容与变址寄存器之一的内容及指令中给定的位移量相加得到。</p></li></ol><h5 id="基址寻址和变址寻址的区别"><a class="markdownIt-Anchor" href="#基址寻址和变址寻址的区别"></a> 基址寻址和变址寻址的区别</h5><ul><li><p>基址寻址</p><p>有效地址是将CPU中基址寄存器BR的内容加上指令字中形式地址A</p></li><li><p>变址寻址</p><p>有效地址是将CPU中变址寄存器IX的内容加上指令字中有效地址A</p></li></ul><h5 id="中断周期前是什么阶段中断周期后又是什么阶段在中断周期cpu应完成什么操作"><a class="markdownIt-Anchor" href="#中断周期前是什么阶段中断周期后又是什么阶段在中断周期cpu应完成什么操作"></a> 中断周期前是什么阶段？中断周期后又是什么阶段？在中断周期CPU应完成什么操作？</h5><p>中断周期前是执行周期，中断周期后是取指周期。在中断周期，CPU应完成保存断点、将中断向量送PC和关中断等工作。</p><h5 id="字扩展和位扩展的区别"><a class="markdownIt-Anchor" href="#字扩展和位扩展的区别"></a> 字扩展和位扩展的区别</h5><ul><li>字扩展：数据线并联，地址线并联，片选线分别连接到地址译码器的输出端、</li><li>位扩展：数据线串联，地址线串联，片选线直接相连</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Organization </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉领域顶级会议和期刊</title>
      <link href="/2020/05/1977125147.html"/>
      <url>/2020/05/1977125147.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="cv三大会议"><a class="markdownIt-Anchor" href="#cv三大会议"></a> CV三大会议</h3><ul><li>CVPR: International Conference on Computer Vision and Pattern Recognition (每年，6月开会)</li><li>ICCV: International Conference on Computer Vision (奇数年，10月开会)</li><li>ECCV: European Conference on Computer Vision (偶数年，3月截稿，9月开会)</li></ul><h3 id="cv两大顶刊"><a class="markdownIt-Anchor" href="#cv两大顶刊"></a> CV两大顶刊</h3><ul><li>TPAMI: IEEE Trans on Pattern Analysis and Machine Intelligence</li><li>TIP: IEEE Transactions on Image Processing</li></ul><h3 id="计算机视觉会议列表"><a class="markdownIt-Anchor" href="#计算机视觉会议列表"></a> 计算机视觉会议列表</h3><ul><li><p>A类</p></li><li><ul><li>ICCV: International Conference on Computer Vision</li><li>CVPR: International Conference on Computer Vision and Pattern Recognition</li><li>AAAI: AAAI Conference on Artificial Intelligence</li><li>ICML: International Conference on Machine Learning</li><li>NIPS: Annual Conference on Neural Information Processing Systems</li><li>ACM MM: ACM International Conference on Multimedia</li></ul></li><li><p>B类</p></li><li><ul><li>ECCV: European Conference on Computer Vision</li></ul></li><li><p>C类</p></li><li><ul><li>ACCV: Asian Conference on Computer Vision</li><li>ICPR: International Conference on Pattern Recognition</li><li>BMVC: British Machine Vision Conference</li></ul></li></ul><h3 id="计算机视觉刊物列表"><a class="markdownIt-Anchor" href="#计算机视觉刊物列表"></a> 计算机视觉刊物列表</h3><ul><li><p>A类</p></li><li><ul><li>TPAMI: IEEE Trans on Pattern Analysis and Machine Intelligence</li><li>IJCV: International Journal of Computer Vision</li><li>TIP: IEEE Transactions on Image Processing</li></ul></li><li><p>B类</p></li><li><ul><li>CVIU: Computer Vision and Image Understanding</li><li>PR: Pattern Recognition</li></ul></li><li><p>C类</p></li><li><ul><li>IET-CVI: IET Computer Vision</li><li>IVC: Image and Vision Computing</li><li>IJPRAI: International Journal of Pattern Recognition and Artificial Intelligence</li><li>Machine Vision and Applications</li><li>PRL: Pattern Recognition Letters</li></ul></li></ul><blockquote><p>来源：<a href="https://zhuanlan.zhihu.com/p/134060638" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/134060638</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中==和equals的区别</title>
      <link href="/2020/05/1240792683.html"/>
      <url>/2020/05/1240792683.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="总结如下"><a class="markdownIt-Anchor" href="#总结如下"></a> 总结如下：</h2><h2 id="归纳如下"><a class="markdownIt-Anchor" href="#归纳如下"></a> 归纳如下</h2><h3 id="一"><a class="markdownIt-Anchor" href="#一"></a> 一、==</h3><ul><li>如果比较的是基本数据类型，则比较的是数值是否相等；</li><li>如果比较的是引用类型(如String)，则比较的是两个对象的引用，也就是两个对象是否为同一个对象，即哈希值是否相等。并不是比较对象的内容是否相等；</li></ul><h3 id="二-equals"><a class="markdownIt-Anchor" href="#二-equals"></a> 二、equals</h3><p>equals方法只能用于比较引用类型；基本数据类型使用此方法会报错</p><p>当比较的是引用类型时，</p><ul><li><p>如果不对它进行重写，那默认用Object类中的equals方法，即等价于<code>==</code>，比较的是两个对象的引用</p></li><li><p>如果重写，例如String类中的equals方法，则比较的是两个对象的值，不去管对象的引用是否相同。</p></li></ul><a id="more"></a><h2 id="详细分析"><a class="markdownIt-Anchor" href="#详细分析"></a> 详细分析</h2><h3 id="一-2"><a class="markdownIt-Anchor" href="#一-2"></a> 一、==</h3><ul><li>如果比较的是基本数据类型，则比较的是数值是否相等；</li><li>如果比较的是引用类型(如String)，则比较的是两个对象的引用，也就是两个对象是否为同一个对象，即哈希值是否相等。并不是比较对象的内容是否相等；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 对象比较</span></span><br><span class="line">        User userOne = <span class="keyword">new</span> User();</span><br><span class="line">        User userTwo = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(<span class="string">"userOne==userTwo : "</span>+(userOne==userTwo));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本数据类型比较</span></span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">char</span> d=<span class="string">'a'</span>;</span><br><span class="line">        System.out.println(<span class="string">"a==b  :  "</span>+(a==b));</span><br><span class="line">        System.out.println(<span class="string">"c==d  :  "</span>+(c==d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userOne==userTwo : <span class="keyword">false</span></span><br><span class="line">a==b  :  <span class="keyword">true</span></span><br><span class="line">c==d  :  <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="二-equals-2"><a class="markdownIt-Anchor" href="#二-equals-2"></a> 二、equals</h3><p>equals方法主要用于两个对象之间，检测一个对象是否等于另一个对象；</p><p>下边来看一看Object类中equals方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看出来Object类中的equals方法等价于<code>==</code>；</p><p>也就是说，如果没有重写equals方法，那么用equals方法比较的结果与用==比较的结果是一样的；</p><p>但有些类，例如String类，对equals方法实现了改写。</p><p>下边来看一看jdk中String类的equals方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出equals方法是进行的内容比较；说明 String 对比的是对象的值。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库索引</title>
      <link href="/2020/04/3751436791.html"/>
      <url>/2020/04/3751436791.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="为什么使用数据索引能提高效率"><a class="markdownIt-Anchor" href="#为什么使用数据索引能提高效率"></a> 为什么使用数据索引能提高效率？</h3><p>数据索引的存储是有序的，通过索引查询一个数据无需遍历索引记录。极端情况下，数据索引的查询效率为二分法查询效率，趋近于 log2(N)</p><h3 id="索引的优缺点"><a class="markdownIt-Anchor" href="#索引的优缺点"></a> 索引的优缺点</h3><p><strong>优点：</strong></p><ul><li><p>大大减少了服务器需要扫描的数据行数。</p></li><li><p>因为索引是有序的。帮助服务器避免进行排序和分组，以及避免创建临时表</p><blockquote><p>B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。</p><p>临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表。</p></blockquote></li></ul><p><strong>缺点：</strong></p><ul><li>创建索引要耗费时间和空间</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li></ul><h3 id="建立索引的时机"><a class="markdownIt-Anchor" href="#建立索引的时机"></a> 建立索引的时机</h3><p><strong>该建立索引：</strong></p><ol><li>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构</li><li>在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；</li><li>在经常需要范围搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的</li><li>在经常需要排序的列上创建索引，因为索引本身已经排序。</li><li>在经常使用在where子句中的列上面创建索引，加快条件的判断速度。</li></ol><p><strong>不该建立索引：</strong></p><ol><li>查询中很少使用或者参考的列。</li><li>对于那些只有很少数据值的列也不应该增加索引。例如性别列。</li><li>对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</li><li>经常插入、删除、修改的表。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。</li><li>对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</li></ol><blockquote><p>分区技术：</p><p>场景：表非常大，无法全部存在内存。</p><p>好处：数据更易维护，可以对独立的分区进行独立的操作。</p><p>​可以备份和恢复独立的分区</p><p>分区与分表的区别：分区从逻辑上来讲只有一张表，而分表则是将一张表分解成多张表。</p></blockquote><h3 id="b树索引和哈希索引的区别"><a class="markdownIt-Anchor" href="#b树索引和哈希索引的区别"></a> <code>B+树索引</code>和<code>哈希索引</code>的区别</h3><ul><li><p>B+树是一个平衡的多叉树，而且同层级的节点间有指针相互链接，是<strong>有序</strong>的</p></li><li><p>哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可,是<strong>无序</strong>的</p></li></ul><p><strong>哈希索引的优势：</strong></p><ul><li><p>能以 O(1) 时间进行查找</p></li><li><p>等值查询（与范围查询相对应）。哈希索引具有绝对优势</p><blockquote><p>前提：没有大量重复键值，否则效率很低，因为存在所谓的哈希碰撞问题。</p></blockquote></li></ul><p><strong>哈希索引的劣势：</strong></p><ul><li><p>无法用于排序与分组；</p></li><li><p>只支持精确查找，无法用于范围查询。</p></li></ul><p>通常，B+树索引结构适用于绝大多数场景</p><p>Mysql数据库的InnoDB 存储引擎采用的是B+树索引，但它有一个特殊的功能叫“<code>自适应哈希索引</code>”。</p><p>当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的O(1) 查找。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>候选键、主键、外键</title>
      <link href="/2020/04/194061811.html"/>
      <url>/2020/04/194061811.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="什么是候选键-主键-外键"><a class="markdownIt-Anchor" href="#什么是候选键-主键-外键"></a> 什么是候选键、主键、外键</h2><h4 id="候选键"><a class="markdownIt-Anchor" href="#候选键"></a> 候选键</h4><p>能唯一标识一条元组的属性或属性集合（列或多个列），称为候选键。<br />表中可能有多个候选键。</p><h4 id="主键"><a class="markdownIt-Anchor" href="#主键"></a> 主键</h4><p>从候选键中选择出主键。<br />主键的列不能包含空值<code>null</code>。主键可以为自增<code>AUTO_INCREMENT</code>字段。<br />表中<code>可以没有主键</code>，但是，一般表设计中，往往都会有主键，以避免记录重复。Mysql的表<code>要求</code>使用主键。</p><h4 id="外键"><a class="markdownIt-Anchor" href="#外键"></a> 外键</h4><p>严格来说，当一个关系中的某个属性或属性集合与另一个关系（也可以是自身）的候选键匹配时，就称作这个属性或属性集合是外键。</p><p>可以没有外键，当值还没有确定的时候。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主从复制（同步）</title>
      <link href="/2020/04/109989557.html"/>
      <url>/2020/04/109989557.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="主从复制同步"><a class="markdownIt-Anchor" href="#主从复制同步"></a> 主从复制（同步）</h2><p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p><ul><li><p>（主）<strong>binlog 线程</strong>  ：负责将主服务器上的数据更改写入二进制日志中。</p></li><li><p>（从）<strong>I/O 线程</strong>  ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志。</p></li><li><p>（从）<strong>SQL 线程</strong>  ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放</p></li></ul><h5 id="mysql主从同步的作用"><a class="markdownIt-Anchor" href="#mysql主从同步的作用"></a> MYSQL主从同步的作用</h5><ul><li>数据备份</li><li>读写分离，减轻单一数据库的压力</li></ul><p>因为复制是异步进行的，所以从服务器不需要一直连接着主服务器，从服务器甚至可以通过拨号断断续续地连接主服务器。通过配置文件，可以指定复制所有的数据库，某个数据库，甚至是某个数据库上的某个表。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>完整性约束</title>
      <link href="/2020/04/2002369954.html"/>
      <url>/2020/04/2002369954.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="完整性约束"><a class="markdownIt-Anchor" href="#完整性约束"></a> 完整性约束</h2><h3 id="完整性约束-2"><a class="markdownIt-Anchor" href="#完整性约束-2"></a> 完整性约束</h3><h3 id="关系模型的完整性约束"><a class="markdownIt-Anchor" href="#关系模型的完整性约束"></a> 关系模型的完整性约束</h3><ol><li><h6 id="实体完整性若违反则拒绝执行"><a class="markdownIt-Anchor" href="#实体完整性若违反则拒绝执行"></a> 实体完整性（若违反，则拒绝执行）</h6><p>主键不重复且唯一，不能为空。</p></li><li><h6 id="引用参照完整性若违反则拒绝执行并有附加操作保证正确性"><a class="markdownIt-Anchor" href="#引用参照完整性若违反则拒绝执行并有附加操作保证正确性"></a> 引用（参照）完整性（若违反，则拒绝执行，并有附加操作保证正确性）</h6><p>定义外键与主键之间的引用规则。</p></li><li><h6 id="用户定义完整性若违反则拒绝执行"><a class="markdownIt-Anchor" href="#用户定义完整性若违反则拒绝执行"></a> 用户定义完整性（若违反，则拒绝执行）</h6><p>Mysql数据库对完整性约束的支持：</p><ol><li>NOT NULL： 非空约束，指某列不能为空。</li><li>UNIQUE:    唯一约束，指定某列或则几列组合不能重复。</li><li>PRIMARY KEY: 主键约束，指定该列的值可以唯一地标识该条记录。</li><li>FOREIGN KEY: 外键约束，指定该行记录从属于主表中的一条记录，主要用于保证参照完整性。<ul><li>HCECK: 检查约束，指定一个布尔表达式，用于指定对应列的值必须满足该表达式</li></ul></li></ol><blockquote><p>MySQL不支持check约束，但可以使用check约束，而没有任何效果。</p></blockquote></li></ol><h2 id="外键约束的操作"><a class="markdownIt-Anchor" href="#外键约束的操作"></a> 外键约束的操作</h2><p><strong><code>RESTRICT、NO ACTION</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除：从表记录不存在时，主表才可以删除。删除从表，主表不变</span><br><span class="line">更新：从表记录不存在时，主表才可以更新。更新从表，主表不变</span><br></pre></td></tr></table></figure><p><strong><code>CASCADE</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除：删除主表时自动删除从表。删除从表，主表不变</span><br><span class="line">更新：更新主表时自动更新从表。更新从表，主表不变</span><br></pre></td></tr></table></figure><p><strong><code>SET NULL</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除：删除主表时自动更新从表值为NULL。删除从表，主表不变</span><br><span class="line">更新：更新主表时自动更新从表值为NULL。更新从表，主表不变</span><br></pre></td></tr></table></figure><h5 id="关系模型的三个组成部分"><a class="markdownIt-Anchor" href="#关系模型的三个组成部分"></a> 关系模型的三个组成部分</h5><ul><li>…的数据结构</li><li>…的操作集合</li><li>…的完整性约束</li></ul><p>数据库的完整性和安全性之间的区别</p><ul><li>完整性：防范的是不符合语义的数据</li><li>正确性：防范的是非法用户和非法操作</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>事务及其一致性问题和解决方法</title>
      <link href="/2020/04/614400982.html"/>
      <url>/2020/04/614400982.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>数据库：物理操作文件系统或其他形式文件类型的集合；</p><h1 id="一-事务"><a class="markdownIt-Anchor" href="#一-事务"></a> 一、事务</h1><h4 id="事务的定义"><a class="markdownIt-Anchor" href="#事务的定义"></a> <strong>事务的定义：</strong></h4><p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p><h4 id="事务的目的"><a class="markdownIt-Anchor" href="#事务的目的"></a> <strong>事务的目的：</strong></h4><p>1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。<br />2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</p><h4 id="事物的特性"><a class="markdownIt-Anchor" href="#事物的特性"></a> <strong>事物的特性：</strong></h4><p><strong>原子性</strong>、<strong>一致性</strong>、<strong>隔离性</strong>、<strong>持久性</strong>，这四个属性通常称为ACID特性。<br /><strong>原子性</strong>：事务作为一个整体被执行，对数据库的操作要么全部执行，要么都不执行，已执行的部分回滚。<code>（如何保证原子性）</code></p><blockquote><p>回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</p></blockquote><p><strong>一致性</strong>：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。</p><p><strong>隔离性</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。<br /><strong>持久性</strong>：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。 即使系统发生崩溃，事务执行的结果也不能丢失。</p><blockquote><p>系统发生奔溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。</p></blockquote><hr /><p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：</p><ul><li>只有满足一致性，事务的执行结果才是正确的。</li><li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li><li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li><li>事务满足持久化是为了能应对系统崩溃的情况。</li></ul><h6 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例：</h6><p>用一个常用的“A账户向B账号汇钱”的例子来说明如何通过数据库事务保证数据的准确性和完整性。熟悉关系型数据库事务的都知道从帐号A到帐号B需要6个操作：<br />1、从A账号中把余额读出来（500）；<br />2、对A账号做减法操作（500-100）；<br />3、把结果写回A账号中（400）；<br />4、从B账号中把余额读出来（500）；<br />5、对B账号做加法操作（500+100）；<br />6、把结果写回B账号中（600）。</p><h6 id="原子性"><a class="markdownIt-Anchor" href="#原子性"></a> 原子性：</h6><p>保证1-6所有过程要么都执行，要么都不执行；一旦在执行某一步骤的过程中发生问题，就需要执行回滚操作；<br />假如执行到第五步的时候，B账户突然不可用（比如被注销），那么之前的所有操作都应该回滚到执行事务之前的状态。</p><h6 id="一致性"><a class="markdownIt-Anchor" href="#一致性"></a> 一致性：</h6><p>在转账之前，A和B的账户中共有500+500=1000元钱。在转账之后，A和B的账户中共有400+600=1000元；<br />也就是说，数据的状态在执行该事务操作之后从一个状态改变到了另外一个状态。同时一致性还能保证账户余额不会变成负数等。</p><h6 id="隔离性"><a class="markdownIt-Anchor" href="#隔离性"></a> 隔离性：</h6><p>在A向B转账的整个过程中，只要事务还没有提交（commit），查询A账户和B账户的时候，两个账户里面的钱的数量都不会有变化；<br />如果在A给B转账的同时，有另外一个事务执行了C给B转账的操作，那么当两个事务都结束的时候，B账户里面的钱应该是A转给B的钱加上C转给B的钱再加上自己原有的钱。</p><h6 id="持久性"><a class="markdownIt-Anchor" href="#持久性"></a> 持久性：</h6><p>一旦转账成功（事务提交），两个账户的里面的钱就会真的发生变化（会把数据写入数据库做持久化保存）！</p><p>​</p><h1 id="二-并发一致性问题"><a class="markdownIt-Anchor" href="#二-并发一致性问题"></a> 二、并发一致性问题</h1><p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p><h4 id="丢失修改"><a class="markdownIt-Anchor" href="#丢失修改"></a> 丢失修改</h4><p>T<sub>1</sub> 和 T<sub>2</sub> 两个事务都对一个数据进行修改，T<sub>1</sub> 先修改，T<sub>2</sub> 随后修改，T<sub>2</sub> 的修改覆盖了 T<sub>1</sub> 的修改。</p><h4 id="读脏数据"><a class="markdownIt-Anchor" href="#读脏数据"></a> 读脏数据</h4><p>T<sub>1</sub> 修改一个数据但未提交，T<sub>2</sub> 随后读取这个更新后的数据。如果 T<sub>1</sub> 撤销了这次修改，那么 T<sub>2</sub> 读取的数据是脏数据。</p><h4 id="不可重复读"><a class="markdownIt-Anchor" href="#不可重复读"></a> 不可重复读</h4><p>T<sub>1</sub> 读取一个数据，T<sub>2</sub> 对该数据做了修改。如果 T<sub>1</sub> 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p><h4 id="幻影读"><a class="markdownIt-Anchor" href="#幻影读"></a> 幻影读</h4><p>T<sub>1</sub> 读取某个范围的数据，T<sub>2</sub> 在这个范围内插入新的数据，T<sub>1</sub> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p><hr /><h5 id="不可重复读和幻读区别"><a class="markdownIt-Anchor" href="#不可重复读和幻读区别"></a> 不可重复读和幻读区别</h5><ol><li>不可重复读的重点是修改: 同样的条件, 你读取过的数据, 再次读取出来发现值不一样了</li><li>幻读的重点在于新增或者删除 (数据条数变化)，同样的条件， 第1次和第2次读出来的记录数不一样</li></ol><blockquote><p>产生并发不一致性问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</p></blockquote><h2 id="三-封锁"><a class="markdownIt-Anchor" href="#三-封锁"></a> 三、封锁</h2><p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p><p>封锁就是事务T在对某个数据操作之前，先向系统发出请求对其加锁。在事务T释放它的锁之前，其他事务不能更新此对象的数据。<code>封锁是实现并发控制的一个非常重要的技术。</code></p><blockquote><p>基本的锁有两种类型。1.排它锁   2.共享锁</p></blockquote><h2 id="四-四种隔离级别从高到低"><a class="markdownIt-Anchor" href="#四-四种隔离级别从高到低"></a> 四、四种隔离级别（从高到低）</h2><ol><li><p>串行化：可避免脏读、不可重复读、幻读的发生。</p><blockquote><p>事务间完全隔离，不能并发，只能串行执行。</p></blockquote></li><li><p>可重复读：可避免脏读、不可重复读的发生。（mysql默认）</p></li><li><p>读已提交：可避免脏读的发生。（oracal默认）</p></li><li><p>读未提交：最低级别，任何情况都无法保证。</p></li></ol><p>隔离级别越高，并行性越低，数据库性能越低，当前事务处理的中间结果对其它事务不可见程度越高。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关系型数据库与非关系型数据库的区别</title>
      <link href="/2020/04/824944234.html"/>
      <url>/2020/04/824944234.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><p>SQL      - 主要代表：SQL Server，Oracle，MySQL(开源)，PostgreSQL(开源)。</p><p>NoSQL - 主要代表：MongoDB，Redis，CouchDB，HBase。</p><h2 id="主要区别"><a class="markdownIt-Anchor" href="#主要区别"></a> 主要区别</h2><h4 id="1-存储方式"><a class="markdownIt-Anchor" href="#1-存储方式"></a> 1. 存储方式：</h4><p>SQL数据存在二维表中；而NoSQL则更加灵活和可扩展，存储方式可以省是JSON文档、哈希表或者其他方式。</p><p>例如，存个学生借书数据，存储方式分别为：</p><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/1744544-a9b6a180eb06a2ba.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" style="zoom: 50%;" /><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/1744544-e7d6976369ed43e6.png?imageMogr2/auto-orient/strip|imageView2/2/w/756/format/webp" alt="img" style="zoom: 67%;" /><h4 id="2-join查询"><a class="markdownIt-Anchor" href="#2-join查询"></a> 2. join查询</h4><p>SQL中可以使用join链接方式将多个关系数据表中的数据用一条简单的查询语句查询出来。</p><p>而<code>NoSQL不支持join处理</code>。</p><blockquote><p>join包括内连接与外连接</p></blockquote><h4 id="3-查询性能"><a class="markdownIt-Anchor" href="#3-查询性能"></a> 3. 查询性能</h4><p>这个比较有争议。在相同水平的系统设计的前提下，因为NoSQL中省略了JOIN查询的消耗，故理论上性能上是优于SQL的。</p><h4 id="4-增删改查语法"><a class="markdownIt-Anchor" href="#4-增删改查语法"></a> 4. 增删改查语法</h4><h4 id="5-外部数据存储"><a class="markdownIt-Anchor" href="#5-外部数据存储"></a> 5. 外部数据存储</h4><p>SQL中如何需要增加外部关联数据的话，规范化做法是在原表中增加一个外键，然后新建一个表，用外键来关联。</p><p>而在NoSQL中除了这种做法以外，我们还能用如下的非规范化方式把外部数据直接放到原数据集中，以提高查询效率。缺点也比较明显，更新审核人数据的时候将会比较麻烦。</p><p><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/1744544-456469a12715e9b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/763/format/webp" alt="img" /></p><h4 id="6-添加数据时的要求"><a class="markdownIt-Anchor" href="#6-添加数据时的要求"></a> 6. 添加数据时的要求：</h4><p>在SQL中，必须定义好表和字段结构后才能添加数据，例如定义表的主键(primary key)，索引(index),触发器(trigger),存储过程(stored procedure)等。表结构可以在被定义之后更新，但是如果有比较大的结构变更的话就会变得比较复杂。</p><p>在NoSQL中，数据可以在任何时间、地点添加，不需要先定义表。例如下面这段代码会自动添加一条新的信息：</p><p><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/1744544-630c95f239c9583c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/754/format/webp" alt="img" /></p><p>从这点来看，NoSQL可能更加适合初始化数据还不明确或者未定的项目中。</p><h4 id="7-数据耦合性"><a class="markdownIt-Anchor" href="#7-数据耦合性"></a> 7. 数据耦合性</h4><p>SQL中不允许删除已经被使用的外部数据，例如审核人表中的&quot;熊三&quot;已经被分配给了借阅人熊大，那么在审核人表中将不允许删除熊三这条数据，以保证数据完整性。</p><p>而NoSQL中则没有这种强耦合的概念，可以随时删除任何数据。</p><h4 id="8-事务"><a class="markdownIt-Anchor" href="#8-事务"></a> 8. 事务</h4><p>SQL中如果多张表数据需要同批次被更新，即如果其中一张表更新失败的话其他表也不能更新成功。这种场景可以通过事务来控制，可以在所有命令完成后再统一提交事务。</p><p>而NoSQL中没有事务这个概念，每一个数据集的操作都是原子级的。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>范式</title>
      <link href="/2020/04/1517359428.html"/>
      <url>/2020/04/1517359428.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="函数依赖"><a class="markdownIt-Anchor" href="#函数依赖"></a> 函数依赖</h2><p>记 A-&gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</p><p>对于 A-&gt;B，如果能找到 A 的真子集 A’，使得 A’-&gt; B，那么 A-&gt;B 就是部分函数依赖，</p><blockquote><p>比如：（学号，学生姓名）-&gt; 院系</p><p>​              但也可以直接：学号 -&gt; 院系</p></blockquote><p>否则就是完全函数依赖。</p><blockquote><p>比如：（学号，课程号）-&gt; 成绩</p><p>​          不可拆开</p></blockquote><p><strong>另一种解释</strong>：对于（A,B,C）</p><p>有(A,B)-&gt;C，且C不能单独通过A或B得到，则该依赖为完全函数依赖。</p><p>有(A,B)-&gt;C，且C可以单独通过A或B得到，则该依赖为部分函数依赖。（会造成冗余）</p><p>有 A-&gt;B，B-&gt;C，则 A-&gt;C 是一个传递函数依赖。（会造成冗余）</p><h2 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h2><p>以下的学生课程关系中，{学号, 课程号} 为键码，有如下函数依赖：</p><blockquote><p>学号 -&gt; 学生姓名，院系</p><p>院系 -&gt; 院长姓名</p><p>课程号 -&gt; 课程名</p><p>(学号,课程号) -&gt; 成绩</p></blockquote><table><thead><tr><th style="text-align:center">学号</th><th style="text-align:center">学生姓名</th><th style="text-align:center">院系</th><th style="text-align:center">院长姓名</th><th style="text-align:center">课程号</th><th style="text-align:center">课程名</th><th>成绩</th></tr></thead><tbody><tr><td style="text-align:center">学生1</td><td style="text-align:center">学生A</td><td style="text-align:center">学院1</td><td style="text-align:center">院长A</td><td style="text-align:center">课程1</td><td style="text-align:center">课程A</td><td>90</td></tr><tr><td style="text-align:center">学生2</td><td style="text-align:center">学生B</td><td style="text-align:center">学院2</td><td style="text-align:center">院长B</td><td style="text-align:center">课程1</td><td style="text-align:center">课程A</td><td>80</td></tr><tr><td style="text-align:center">学生2</td><td style="text-align:center">学生B</td><td style="text-align:center">学院2</td><td style="text-align:center">院长B</td><td style="text-align:center">课程2</td><td style="text-align:center">课程B</td><td>100</td></tr><tr><td style="text-align:center">学生3</td><td style="text-align:center">学生C</td><td style="text-align:center">学院3</td><td style="text-align:center">院长C</td><td style="text-align:center">课程2</td><td style="text-align:center">课程B</td><td>95</td></tr></tbody></table><p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p><ul><li>冗余数据：例如 <code>学生B</code> 出现了两次。</li><li>修改异常：修改<code>学生B</code> 一条记录中的某个信息，但另一条记录中相同的位置却没被修改。</li><li>删除异常：删除<code>学生B</code> 一条记录中的某个信息，那么该条记录中的其他信息也会丢失。</li><li>插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</li></ul><h2 id="范式"><a class="markdownIt-Anchor" href="#范式"></a> 范式</h2><p>范式是为了消除重复数据减少冗余数据，让磁盘空间得到更有效利用的一种标准。</p><p>高级别范式的满足低级别的范式，比如2NF一定满足1NF。</p><h3 id="1-第一范式-1nf"><a class="markdownIt-Anchor" href="#1-第一范式-1nf"></a> 1. 第一范式 (1NF)</h3><p>属性不可分，均为简单属性。但四种异常均无法解决。究其原因是其中存在各种各样的函数依赖关系。</p><p>例子中的关系就是一个1NF。</p><h3 id="2-第二范式-2nf"><a class="markdownIt-Anchor" href="#2-第二范式-2nf"></a> 2. 第二范式 (2NF)</h3><p>满足1NF，并且每个非主属性完全函数依赖于键码。</p><p>可以通过分解来满足。</p><h4 id="分解前"><a class="markdownIt-Anchor" href="#分解前"></a> 分解前</h4><p>{学号, 课程号} 为键码。有如下函数依赖：</p><blockquote><p>学号 -&gt; 学生姓名，院系</p><p>院系 -&gt; 院长姓名</p><p>课程号 -&gt; 课程名</p><p>(学号,课程号) -&gt; 成绩</p></blockquote><ul><li><p><code>成绩</code><strong>完全依赖</strong>于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。</p></li><li><p><code>学生姓名</code>、 <code>院系</code>和 <code>课程名</code>都<strong>部分依赖</strong>于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</p></li><li><p><code>院长姓名</code><strong>传递依赖</strong>于键码。  （2NF不考虑）</p></li></ul><h4 id="分解后"><a class="markdownIt-Anchor" href="#分解后"></a> 分解后</h4><blockquote><p>关系1</p><blockquote><p>学号-&gt; 学生姓名, 院系</p><p>院系-&gt; 院长姓名</p></blockquote></blockquote><blockquote><p>关系-2</p><blockquote><p>学号, 课程号-&gt;  成绩</p></blockquote></blockquote><blockquote><p>关系-3</p><blockquote><p>课程号 -&gt; 课程名</p></blockquote></blockquote><h3 id="3-第三范式-3nf"><a class="markdownIt-Anchor" href="#3-第三范式-3nf"></a> 3. 第三范式 (3NF)</h3><p>满足1NF，并且非主属性不传递函数依赖于键码。</p><p>上面的 关系1 中存在以下传递函数依赖：</p><p><code>学号-&gt; 院系-&gt; 院长姓名</code></p><p>可以进行以下分解：</p><blockquote><p>关系-11</p><blockquote><p>学号-&gt; 学生姓名, 院系</p></blockquote></blockquote><blockquote><p>关系-12</p><blockquote><p>院系-&gt; 院长姓名</p></blockquote></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2020/04/127297243.html"/>
      <url>/2020/04/127297243.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="程序设计数据结构算法"><a class="markdownIt-Anchor" href="#程序设计数据结构算法"></a> 程序设计=数据结构+算法</h3><h4 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h4><p>定义：数据元素相互之间存在的一种或多种特定关系的集合。</p><p>分类：<strong>逻辑结构</strong>、<strong>物理结构</strong>。</p><h3 id="逻辑结构"><a class="markdownIt-Anchor" href="#逻辑结构"></a> 逻辑结构</h3><p>数据与数据之间的关联关系，准确的说是数据元素之间的关联关系。</p><blockquote><p>注：数据元素是数据的基本构成单位。而数据元素由多个数据项构成。数据项是最小单位。</p></blockquote><p>逻辑结构有四大结构：（两大分类：线性、非线性）</p><ol><li>集合结构 : 元素间除了同属一个集合这个关系以外，再无其他关系。（不是线性，也不是非线性）</li><li>线性结构：元素间的关系为一对一</li><li>树形结构：元素间的关系为一对多</li><li>图形结构：元素间的关系为多对多。举例：一个人可以通过6个人间接认识到世界上的每一个人。</li></ol><h3 id="物理结构"><a class="markdownIt-Anchor" href="#物理结构"></a> 物理结构</h3><p>数据结构在计算机中的表示（又称映像）称为数据的物理结构，或称存储结构。</p><p>物理结构有四大结构：</p><p>一般有四种：顺序存储，链式存储，散列，索引</p><ol><li>顺序：把数据元素存放在<strong>地址连续</strong>的存储单元里，其数据间的逻辑关系和物理关系是一致的。</li><li>链式：把数据元素存放在内存中的任意存储单元里。这些数据在内存中的地址可以连续，也可以不连续。</li><li>索引：</li><li>散列：</li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>散列表</title>
      <link href="/2020/04/2439909564.html"/>
      <url>/2020/04/2439909564.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>理想散列表（哈希表）是一个包含关键字的具有固定大小的数组，它能够<strong>以常数时间执行插入，删除和查找操作</strong>。</p><ul><li>每个关键字被映射到0到数组大小N-1范围，并且放到合适的位置，这个<strong>映射规则就叫散列函数</strong></li><li>理想情况下，两个不同的关键字映射到不同的单元，然而由于数组单元有限，关键字范围可能远超数组单元，因此就会出现两个关键字散列到同一个值得时候，这就是<strong>散列冲突</strong></li></ul><h6 id="解决散列冲突通常有以下几种方法"><a class="markdownIt-Anchor" href="#解决散列冲突通常有以下几种方法"></a> 解决散列冲突通常有以下几种方法：</h6><ul><li><p>开放定址法</p><p>位置开放，如果冲突发生，就按照某策略选择另外一个可用的位置（策略：线性探测、平方探测）</p></li><li><p>拉链法</p><p>使用<strong>数组+链表</strong>的思想，数组装载不同的散列值，为每一个散列值建立一个链表，如果发生冲突，将冲突元素插入对应的散列值链表末端。</p></li></ul><h2 id="开放寻址法"><a class="markdownIt-Anchor" href="#开放寻址法"></a> 开放寻址法</h2><p><strong>优点</strong></p><ul><li>数据存储在数组中，有效利用CPU缓存加快查询速度</li><li>不需要额外空间</li></ul><p><strong>缺点</strong></p><ul><li>查找、删除数据时，涉及到<code>delete</code>标记，比较麻烦</li><li>所有数据存储在一个数组中，冲突代价比较高</li><li>装载因子的上限不能太大，更浪费空间</li></ul><h2 id="链表法"><a class="markdownIt-Anchor" href="#链表法"></a> 链表法</h2><p><strong>优点</strong></p><ul><li>由于拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况；</li><li>拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度较短；</li><li>开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间；</li><li>删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。</li></ul><p><strong>缺点</strong></p><ul><li>需要额外的空间来保存指针</li><li>结点零散分布在内存中，不连续，对CPU缓存不友好</li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h3><p>当数据量比较小、装载因子小的时候，适合采用开放寻址法。存储大对象、大数据量的散列表，适合采用链表法。而且，比起开放寻址法，链表法更加灵活，支持更多的优化策略，比如用红黑树代替链表。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>B树与B+树</title>
      <link href="/2020/04/4250998147.html"/>
      <url>/2020/04/4250998147.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="avl树-红黑树"><a class="markdownIt-Anchor" href="#avl树-红黑树"></a> AVL树、红黑树</h2><p>红黑树的算法时间复杂度和AVL相同，但<strong>统计性能</strong>比AVL树更高。</p><blockquote><p>1、红黑树和AVL树都能够以O(log2 n)的时间复杂度进行搜索、插入、删除操作。<br />2、由于设计，红黑树的任何不平衡都会在三次旋转之内解决。AVL树增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。</p></blockquote><p>在<strong>查找</strong>方面：<br />  红黑树的性质(最长路径长度不超过最短路径长度的2倍)，其查找代价基本维持在O(logN)左右，但在最差情况下(最长路径是最短路径的2倍少1)，比AVL要略逊色一点。<br />  AVL是严格平衡的二叉查找树（平衡因子不超过1）。查找过程中不会出现最差情况的单支树。因此查找效率最好，最坏情况都是O(logN)数量级的。</p><p>所以，综上：<br />  AVL比RBtree更加平衡，但是AVL的插入和删除会带来大量的旋转。</p><p>所以如果<strong>插入和删除比较多</strong>的情况，应该使用<strong>RBtree</strong>； 如果<strong>查询操作比较多</strong>，应该使用<strong>AVL</strong>。</p><h2 id="二叉查找树-b树b-树"><a class="markdownIt-Anchor" href="#二叉查找树-b树b-树"></a> 二叉查找树   B树（B-树）</h2><h5 id="b树的引入"><a class="markdownIt-Anchor" href="#b树的引入"></a> B树的引入：</h5><p>因为我们要考虑磁盘IO的影响。数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘页。对于树来说，I/O次数等价于树的高度，B树通过多叉的实现来降低树的高度，从而减少IO操作的次数。（m的大小取决于磁盘页的大小）</p><p>即：B树是为实现高效的磁盘存取而设计的多叉平衡搜索树</p><ul><li>每个节点最多只有m个子节点。</li><li>每个非叶子节点（除了根）具有至少⌈ m/2⌉子节点。</li><li>如果根不是叶节点，则根至少有两个子节点。</li><li>具有<em>k</em>个子节点的非叶节点包含<em>k</em> -1个键。</li><li>所有叶子都出现在同一水平，存有部分信息。</li></ul><h5 id="b树与avl树或者是红黑树的区别"><a class="markdownIt-Anchor" href="#b树与avl树或者是红黑树的区别"></a> B树与AVL树（或者是红黑树）的区别</h5><p>其每个节点可以存多个键值，并且其子女不止两个，但仍满足键值数=子女数-1。因此，对于相同数量的键值，B树比二叉搜索树要更加矮一些，特别是当M较大时，树高会更低。</p><h5 id="b树的搜索"><a class="markdownIt-Anchor" href="#b树的搜索"></a> B树的搜索</h5><p>B树的搜索与二叉搜索树类似，只不过需要在每个节点内部进行一次二分搜索查找。</p><blockquote><p>插入、删除。更好的叙述：（但不适合背）</p><p><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/lianzhilei/p/11250589.html</a></p></blockquote><h5 id="b树的插入"><a class="markdownIt-Anchor" href="#b树的插入"></a> B树的插入</h5><p>​    B树的插入首先查找插入所在的节点，若该节点未满，插入即可，若该节点已经满了，则需要将该节点分裂，并将该节点的中间的元素移动到父节点上，若父节点未满，则结束，若父节点也满了，则需要继续分裂父节点，如此不断向上，直到根节点，如果根节点也满了，则分裂根节点，从而树的高度+1。</p><h5 id="b树的删除"><a class="markdownIt-Anchor" href="#b树的删除"></a> B树的删除</h5><p>​    B树的删除首先要找到删除的节点，并删除节点中的元素，如果删除的元素有左右孩子，则上移左孩子最右节点或右孩子最左节点到父节点，若没有左右孩子，则直接删除。删除后，若某结点中元素数目不符合B树要求(小于M/2-1取上整)，则需看其相邻的兄弟节点是否有多余的元素，若有，则可以向父节点借一个元素，然后将最丰满的相邻兄弟节点中上移最后或最前一个元素到父节点中(有点类似于左旋)。若其相邻兄弟节点没有多余的元素，则与其兄弟节点合并成一个节点，此时也需要将父节点中的一个元素一起合并。</p><h2 id="b树-b树"><a class="markdownIt-Anchor" href="#b树-b树"></a> B树     B+树</h2><h5 id="引入b树的原因"><a class="markdownIt-Anchor" href="#引入b树的原因"></a> 引入B+树的原因</h5><p><code>B树 因为每个节点都有储存数据</code>（data域指针），所以节点就变大了。（节点增大，会增加磁盘IO次数，因为磁盘IO一次读取数据量固定，单个数据变大，需要的IO次数就变多了。<code>B+ 树因为只有叶子节点存放数据，其余节点用来索引，更“矮胖”。</code>更“矮胖”所以读取数据时候的IO会小一些，而且B+ 树会将全部在叶子节点的数据用指针串联起来，这样遍历叶子节点就 可以获取全部数据，进行区间访问。所以，<code>B+树的查询性能比B-树更高</code>。</p><p>数据库系统普遍采用B-/+Tree作为索引结构</p><blockquote><ul><li>基于以上优势，mysql的InnoDB引擎使用的索引就是B+树</li><li>而MongoDB 是它以json格式作为储存的NOsql，对于区间访问数据的需求并没有那么强烈的要求。所以它只要找到对应的索引节点就可以拿到数据，不需要一直找到对应的叶子节点，单次查询的效率要比 B+ 树来的快</li></ul></blockquote><h5 id="为什么说b树比b树更适合数据库索引"><a class="markdownIt-Anchor" href="#为什么说b树比b树更适合数据库索引"></a> 为什么说B+树比B树更适合数据库索引？</h5><ol><li>b+树的中间节点不保存数据，所以磁盘页能容纳更多节点元素，更“矮胖”，I/O次数更低；</li><li>b+树查询必须查找到叶子节点，所有关键字查询的路径长度相同，导致每一个数据的查询效率相当，因此b+树查找更稳定</li><li>（最重要）B树在提高了IO性能的同时并没有解决元素遍历效率低下的问题。对于<code>范围查询</code>来说，b+树只需扫一遍叶子节点即可，b树却需要重复地中序遍历</li></ol><h5 id="b-树的特点"><a class="markdownIt-Anchor" href="#b-树的特点"></a> B+ 树的特点</h5><ol><li><p>有k棵子树的非叶子结点中含有k个关键字（b树是k-1个），这些关键字不保存数据，只用来索引。</p></li><li><p>所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链表链接。 (而B 树的叶子节点并没有包括全部需要查找的信息)</p></li><li><p>所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B 树的非终节点也包含需要查找的有效信息)；</p></li></ol><h5 id="b树的操作"><a class="markdownIt-Anchor" href="#b树的操作"></a> B+树的操作</h5><p>进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p><p>插入删除操作会破坏平衡树的平衡性，因此在插入删除操作之后，需要对树进行一个分裂、合并、旋转等操作来维护平衡性。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信道复用技术</title>
      <link href="/2020/04/2869290193.html"/>
      <url>/2020/04/2869290193.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="信道复用技术"><a class="markdownIt-Anchor" href="#信道复用技术"></a> 信道复用技术</h1><h5 id="1-频分复用"><a class="markdownIt-Anchor" href="#1-频分复用"></a> 1. 频分复用</h5><p>​频分复用的所有主机在相同的时间占用不同的频率带宽资源。</p><h5 id="2-时分复用"><a class="markdownIt-Anchor" href="#2-时分复用"></a> 2. 时分复用</h5><p>​时分复用的所有主机在不同的时间占用相同的频率带宽资源。</p><blockquote><p>使用频分复用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。</p></blockquote><h5 id="3-统计时分复用"><a class="markdownIt-Anchor" href="#3-统计时分复用"></a> 3. 统计时分复用</h5><p>​是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。</p><h5 id="4-波分复用"><a class="markdownIt-Anchor" href="#4-波分复用"></a> 4. 波分复用</h5><p>​光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</p><h5 id="5-码分复用"><a class="markdownIt-Anchor" href="#5-码分复用"></a> 5. 码分复用</h5><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络层协议</title>
      <link href="/2020/04/3830803598.html"/>
      <url>/2020/04/3830803598.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="ip-协议"><a class="markdownIt-Anchor" href="#ip-协议"></a> IP 协议</h2><p>ip是tcp/ip协议族中最为核心的协议，所有的tcp、udp、icmp、igmp都是以ip数据报格式传输的，但它提供的是不可靠、无连接的数据包传输服务</p><ul><li>不可靠代表它不能保证ip数据报能成功的到达目的地。</li><li>无连接 表示ip并不维护任何关于后续数据报的状态信息，每个数据报的处理是相互独立的。</li></ul><p>它的主要目的就是将一个IP地址的数据发送到另外一个IP地址所代表的设备</p><h2 id="地址解析协议-arp"><a class="markdownIt-Anchor" href="#地址解析协议-arp"></a> 地址解析协议 ARP</h2><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p><p>ARP 将 IP转化为 MAC 地址。</p><blockquote><p>在OSI模型中ARP协议属于链路层；而在TCP/IP模型中，ARP协议属于网络层。</p></blockquote><h2 id="网际控制报文协议-icmp"><a class="markdownIt-Anchor" href="#网际控制报文协议-icmp"></a> 网际控制报文协议 ICMP</h2><p>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</p><p>ICMP 报文分为差错报告报文和询问报文。</p><h4 id="1-ping"><a class="markdownIt-Anchor" href="#1-ping"></a> 1. Ping</h4><p>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p><p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p><h4 id="2-traceroute"><a class="markdownIt-Anchor" href="#2-traceroute"></a> 2. Traceroute</h4><p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>时延</title>
      <link href="/2020/04/2700787963.html"/>
      <url>/2020/04/2700787963.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="时延"><a class="markdownIt-Anchor" href="#时延"></a> 时延</h2><p><strong>总时延 = 排队时延 + 处理时延 + 传输时延 + 传播时延</strong></p><h6 id="1-排队时延"><a class="markdownIt-Anchor" href="#1-排队时延"></a> 1. 排队时延</h6><p>分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。</p><h6 id="2-处理时延"><a class="markdownIt-Anchor" href="#2-处理时延"></a> 2. 处理时延</h6><p>主机或路由器收到分组时进行处理所需要的时间，例如分析首部、从分组中提取数据、进行差错检验或查找适当的路由等。</p><h6 id="3-传输时延"><a class="markdownIt-Anchor" href="#3-传输时延"></a> 3. 传输时延</h6><p>主机或路由器传输数据帧所需要的时间。</p><h6 id="4-传播时延"><a class="markdownIt-Anchor" href="#4-传播时延"></a> 4. 传播时延</h6><p>电磁波在信道中传播所需要花费的时间，电磁波传播的速度接近光速。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三次握手、四次挥手</title>
      <link href="/2020/04/374366983.html"/>
      <url>/2020/04/374366983.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>三次握手、四次挥手代表TCP的连接与释放</p></blockquote><h1 id="tcp三次握手"><a class="markdownIt-Anchor" href="#tcp三次握手"></a> TCP三次握手</h1><div align="center"> <img src= "/img/loading.gif" data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e92d0ebc-7d46-413b-aec1-34a39602f787.png" width="600"/> </div><br><p>首先 服务器 处于 LISTEN（监听）状态，等待客户的连接请求。</p><ul><li><p>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</p></li><li><p>第二次握手：服务器收到syn包，确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p></li><li><p>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，</p></li></ul><p>服务器 收到 客户端 的确认后，连接建立，客户端和服务器进入ESTABLISHED状态。</p><p><strong>三次握手的原因</strong>  （步骤3）</p><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>如果客户端发送的连接请求在网络中滞留，那么在等待一个超时重传时间之后，便会重新请求连接，并认为滞留的那个请求失效，但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h1 id="tcp四次挥手"><a class="markdownIt-Anchor" href="#tcp四次挥手"></a> TCP四次挥手</h1><div align="center"> <img src= "/img/loading.gif" data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" width="600"/> </div><br><ul><li>A 发送连接释放报文 FIN。</li><li>B 收到 FIN 之后被动进入<code>CLOSE-WAIT状态</code>，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文 FIN。</li><li>A 收到 FIN 后发出确认 ACK，主动进入 <code>TIME-WAIT 状态</code>，等待 2 倍的 MSL（最大报文存活时间）后释放连接。</li><li>B 收到A的 ACK报文 后释放连接。</li></ul><p><strong>四次挥手的原因</strong>  (步骤2)</p><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是被动关闭连接时形成的，<code>目的是为了让服务器端发送还未传送完毕的数据</code>，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p><strong>TIME_WAIT</strong><br />TIME_WAIT 是主动关闭链接时形成的，等待2MSL时间，约4分钟。<code>主要是防止最后一个ACK丢失</code>，如果没有收到，服务器就要重发FIN。  由于TIME_WAIT 的时间会非常长，因此server端应尽量减少主动关闭连接</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>路由器</title>
      <link href="/2020/04/1469694131.html"/>
      <url>/2020/04/1469694131.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="路由器的结构"><a class="markdownIt-Anchor" href="#路由器的结构"></a> 路由器的结构</h1><p>路由器从功能上可以划分为：路由选择和分组转发。</p><p>分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。</p><h2 id="路由器分组转发流程"><a class="markdownIt-Anchor" href="#路由器分组转发流程"></a> 路由器分组转发流程</h2><ul><li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li><li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li><li>报告转发分组出错。</li></ul><h2 id="路由选择协议"><a class="markdownIt-Anchor" href="#路由选择协议"></a> 路由选择协议</h2><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p><p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ul><li>自治系统内部的路由选择：RIP 和 OSPF</li><li>自治系统间的路由选择：BGP</li></ul><h4 id="1-内部网关协议-rip"><a class="markdownIt-Anchor" href="#1-内部网关协议-rip"></a> 1. 内部网关协议 RIP</h4><p>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p><h4 id="2-内部网关协议-ospf"><a class="markdownIt-Anchor" href="#2-内部网关协议-ospf"></a> 2. 内部网关协议 OSPF</h4><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>OSPF 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h4 id="3-外部网关协议-bgp"><a class="markdownIt-Anchor" href="#3-外部网关协议-bgp"></a> 3. 外部网关协议 BGP</h4><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>局域网与交换机</title>
      <link href="/2020/04/806376355.html"/>
      <url>/2020/04/806376355.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="局域网"><a class="markdownIt-Anchor" href="#局域网"></a> 局域网</h1><p>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。</p><p>主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。</p><p>可以按照网络拓扑结构对局域网进行分类：</p><h1 id="交换机"><a class="markdownIt-Anchor" href="#交换机"></a> 交换机</h1><p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。</p><p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的分层</title>
      <link href="/2020/04/4253251706.html"/>
      <url>/2020/04/4253251706.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="计算机网络体系结构"><a class="markdownIt-Anchor" href="#计算机网络体系结构"></a> 计算机网络体系结构</h1><div align="center"> <img src= "/img/loading.gif" data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png" width="450"/> </div><br><h1 id="网络为什么要分层"><a class="markdownIt-Anchor" href="#网络为什么要分层"></a> 网络为什么要分层</h1><p>分层的本质是通过分离关注点而让问题简单化。</p><p>分层后， 每层都是内聚的，对外屏蔽复杂性。 那么宏观上来看，容易进行模块管理和问题定位。</p><h2 id="1-五层协议"><a class="markdownIt-Anchor" href="#1-五层协议"></a> 1. 五层协议</h2><ul><li><p><strong>应用层</strong>  ：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。</p></li><li><p><strong>传输层</strong>  ：为进程提供通用数据传输服务。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</p></li><li><p><strong>网络层</strong>  ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。IP、ICMP、IGMP、ARP(OSI模型中属于链路层)</p></li><li><p><strong>数据链路层</strong>  ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组<code>封装成帧</code>。PPP</p></li><li><p><strong>物理层</strong>  ：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。      双绞线</p></li></ul><h2 id="3-tcpip"><a class="markdownIt-Anchor" href="#3-tcpip"></a> 3. TCP/IP</h2><p>它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p><p>TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。</p><div align="center"> <img src= "/img/loading.gif" data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/48d79be8-085b-4862-8a9d-18402eb93b31.png" width="250"/> </div><br><h2 id="4-数据在各层之间的传递过程"><a class="markdownIt-Anchor" href="#4-数据在各层之间的传递过程"></a> 4. 数据在各层之间的传递过程</h2><p>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>传输层（TCP、UDP）</title>
      <link href="/2020/04/1742518097.html"/>
      <url>/2020/04/1742518097.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信。</p><h1 id="udp-和-tcp-的特点"><a class="markdownIt-Anchor" href="#udp-和-tcp-的特点"></a> UDP 和 TCP 的特点</h1><ul><li><p>TCP是面向连接的，并且是一种可靠的协议，在基于TCP进行通信时，通信双方需要建立TCP连接，建立连接需要经过三次握手，握手成功才可以通信。但更容易被攻击，三次握手机制导致TCP容易被人利用，实现DOS，DDOS攻击。</p></li><li><p>UDP是一种无连接的，不可靠的协议，在通信过程中，它并不像TCP那样需要先建立一个连接，只要目的地址，端口号，源地址，端口号确定了，就可以直接发送信息报文，不会关心对方是否已经正确接收到数据。它仅仅提供了校验和机制来保障报文是否完整，若校验失败，则直接将报文丢弃，不做任何处理。</p></li></ul><h3 id="tcp和udp的比较"><a class="markdownIt-Anchor" href="#tcp和udp的比较"></a> TCP和UDP的比较</h3><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">UDP</th><th style="text-align:left">TCP</th></tr></thead><tbody><tr><td style="text-align:left">是否连接</td><td style="text-align:left">无连接</td><td style="text-align:left">面向连接</td></tr><tr><td style="text-align:left">是否可靠</td><td style="text-align:left">不可靠传输，网络拥塞不会影响主机的发送效率</td><td style="text-align:left">可靠传输，使用数据校验、超时重传、三次握手、流量控制和拥塞控制</td></tr><tr><td style="text-align:left">连接对象个数</td><td style="text-align:left">支持一对一，一对多，多对一和多对多交互通信</td><td style="text-align:left">只能是一对一通信</td></tr><tr><td style="text-align:left">传输方式</td><td style="text-align:left">面向报文</td><td style="text-align:left">面向字节流</td></tr><tr><td style="text-align:left">报文长度</td><td style="text-align:left">动态，取决于接收方窗口大小和网络拥塞情况</td><td style="text-align:left">面向保温，不合并，不拆分</td></tr><tr><td style="text-align:left">首部开销</td><td style="text-align:left">首部开销小，仅8字节</td><td style="text-align:left">首部最小20字节，最大60字节</td></tr><tr><td style="text-align:left">适用场景</td><td style="text-align:left">适用于实时应用、要保证速度（IP电话、视频会议、直播等）</td><td style="text-align:left">适用于要求可靠传输的应用，不严苛速度。例如文件传输、浏览器使用的：HHTP</td></tr></tbody></table><h1 id="tcp如何保证可靠传输"><a class="markdownIt-Anchor" href="#tcp如何保证可靠传输"></a> TCP如何保证可靠传输？</h1><h2 id="一-超时重传"><a class="markdownIt-Anchor" href="#一-超时重传"></a> 一、超时重传</h2><p>如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p><h2 id="二-流量控制"><a class="markdownIt-Anchor" href="#二-流量控制"></a> 二、流量控制</h2><p>TCP 利用滑动窗口实现流量控制。</p><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h4 id="滑动窗口"><a class="markdownIt-Anchor" href="#滑动窗口"></a> 滑动窗口</h4><p>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报。</p><h2 id="三-拥塞控制"><a class="markdownIt-Anchor" href="#三-拥塞控制"></a> 三、拥塞控制</h2><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><p>拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。</p><h4 id="慢开始"><a class="markdownIt-Anchor" href="#慢开始"></a> 慢开始</h4><p>慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。</p><h4 id="拥塞避免"><a class="markdownIt-Anchor" href="#拥塞避免"></a> 拥塞避免</h4><p>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。</p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。</p><h4 id="快速重传"><a class="markdownIt-Anchor" href="#快速重传"></a> 快速重传</h4><p>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p><h4 id="快速恢复"><a class="markdownIt-Anchor" href="#快速恢复"></a> 快速恢复</h4><p>快恢复算法，有以下两个要点:</p><ol><li>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。</li><li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC地址与IP地址</title>
      <link href="/2020/04/606586065.html"/>
      <url>/2020/04/606586065.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="mac地址"><a class="markdownIt-Anchor" href="#mac地址"></a> MAC地址</h2><p>MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。</p><p>一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。</p><h2 id="ip地址"><a class="markdownIt-Anchor" href="#ip地址"></a> IP地址</h2><p>我们访问的所有的网站，例如baidu.com等等网站，最终访问的都是一个ip地址，而baidu.com这些东西都叫做域名，域名的产生是因为ip地址不容易使人记住，而造成了域名的产生，便于人的记忆。</p><p><strong>补充：DNS是将域名解析成ip地址的东西，以供访问。</strong></p><blockquote><p>ARP 协议实现由 IP 地址得到 MAC 地址。</p></blockquote><p>我们通讯双方在进行通讯的时候，一定要有两个ip地址，一个叫做源ip地址，一个叫做目的ip地址。有了目的ip地址我们就知道把数据发给谁，而对方通过源ip地址对我们进行回复。</p><p>Ip地址就像手机号一样，手机号标识着一个人，而ip地址标识着网络中的一台设备。</p><blockquote><p>IP地址分为IPV4 IPV6，即IP数据报有两个版本</p></blockquote><h3 id="mac地址与ip地址区别"><a class="markdownIt-Anchor" href="#mac地址与ip地址区别"></a> MAC地址与IP地址区别</h3><p>IP地址和MAC地址相同点是它们都唯一，不同的特点主要有：</p><ul><li><p>对于网络上的某一设备，如一台计算机或一台路由器，其<code>IP地址可变</code>（但必须唯一），而MAC地址不可变。</p><blockquote><p>我们可以根据需要给一台主机指定任意的IP地址，如我们可以给局域网上的某台计算机分配IP地址为192.168.0.112 ，也可以将它改成192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其MAC地址永远唯一且不能由用户改变。</p></blockquote></li><li><p>长度不同。IP地址为32位，MAC地址为48位。</p></li><li><p>分配依据不同。IP地址的分配是基于网络拓扑，MAC地址的分配是基于制造商。</p></li><li><p>寻址协议层不同。IP地址应用于OSI第三层，即网络层，而MAC地址应用在OSI第二层，即数据链路层。</p></li></ul><h3 id="为什么有ip地址还需要mac地址"><a class="markdownIt-Anchor" href="#为什么有ip地址还需要mac地址"></a> 为什么有IP地址还需要MAC地址</h3><p>IP可以保证要发送的包在网络中传输，到达目标服务器所在的局域网的网关。<br />但是到了网关后，IP就没用了，因为局域网的IP对应的机器是不确定的，可能今天对应A机器，明天对应B机器。<br />这时就需要MAC地址来唯一对应一台机器，这样网络包就可以准确的传输到需要的主机上了</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>http协议</title>
      <link href="/2020/04/1415133061.html"/>
      <url>/2020/04/1415133061.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h1><p>HTTP协议又称超文本传输协议,是用于从<code>万维网服务器</code>传输<code>超文本</code>到<code>本地浏览器</code>的传送协议。</p><h2 id="http的三个特点"><a class="markdownIt-Anchor" href="#http的三个特点"></a> HTTP的三个特点</h2><p>**无状态：**对于事务处理没有记忆能力。无法保存之前发送过的请求或响应（这是为了能更快地处理大量事务）。解决办法：cookie、session会话。</p><p><strong>有连接：</strong> 是因为它基于TCP协议，是面向连接的，需要3次握手、4次挥手。<br /><strong>短连接：</strong> Http1.1之前，都是一个请求一个连接，而Tcp连接的创建销毁成本高，对服务器有很大的影响。所以，自Http1.1开始，支持keep-alive，默认也开启，一个连接打开后，会保持一段时间（可设置），浏览器再访问该服务器就使用这个Tcp连接，减轻了服务器压力，提高了效率。</p><h2 id="http方法"><a class="markdownIt-Anchor" href="#http方法"></a> HTTP方法</h2><ol><li>get:客户端向服务端发起请求，获得资源。请求获得URL处所在的资源</li><li>post:向服务端提交新的请求字段。请求URL的资源后添加新的数据</li><li>head:请求获取URL资源的响应报告，即获得URL资源的头部</li><li>patch：请求局部修改URL所在资源的数据项</li><li>put：请求修改URL所在资源的数据元素</li><li>delete：请求删除url资源的数据</li></ol><h2 id="http的缺点"><a class="markdownIt-Anchor" href="#http的缺点"></a> http的缺点</h2><p>(1).通信使用明文不加密,内容可能被窃听,也就是被抓包分析；<br />(2).不验证通信方身份,可能遭到伪装；<br />(3).无法验证报文完整性,可能被篡改；</p><h2 id="http优化"><a class="markdownIt-Anchor" href="#http优化"></a> http优化</h2><p>利用负载均衡优化、加速HTTP应用、利用HTTP Cache来优化网站。</p><h2 id="http网络劫持"><a class="markdownIt-Anchor" href="#http网络劫持"></a> http网络劫持</h2><p>大多数情况是运营商HTTP劫持，当我们使用HTTP请请求一个网站页面的时候，网络运营商会在正常的数据流中插入精心设计的网络数据报文，让客户端（通常是浏览器）展示“错误”的数据，并以弹出新窗口的形式在使用者界面展示宣传性广告或者直接显示某网站的内容，这个相信大家经常见（浏览器右下角广告，app底部广告）。</p><blockquote><p>解决方案：全站使用https</p></blockquote><h2 id="http请求内容"><a class="markdownIt-Anchor" href="#http请求内容"></a> HTTP请求内容</h2><p>HTTP 请求由请求行、请求头、空行、请求体组成</p><img src= "/img/loading.gif" data-src="C:\Users\Seven\AppData\Roaming\Typora\typora-user-images\image-20200317132630163.png" alt="image-20200317132630163" style="zoom: 80%;" />            <p>请求行：请求方式 + URL + 协议版本<br />请求头：客户端向服务器发送请求的补充说明<br />请求体：一般携带的请求参数</p><h2 id="http响应内容"><a class="markdownIt-Anchor" href="#http响应内容"></a> HTTP响应内容</h2><p>HTTP 响应格式与请求的格式很相似，也是由响应行、响应头、空行、响应体组成。</p> <img src= "/img/loading.gif" data-src="C:\Users\Seven\AppData\Roaming\Typora\typora-user-images\image-20200317132654457.png" alt="image-20200317132654457" style="zoom:80%;" /><p>状态行：HTTP 版本号 + 响应状态码 + 状态说明</p><p>·    响应状态码有 1XX、2XX、3XX、4XX、5XX、5XX。   （HTTP返回码）</p><p>o   1XX 提示信息 - 表示请求已被成功接收，继续处理<br />o   2XX 成功 - 表示请求已被成功接收，理解，接受<br />o   3XX 重定向 - 要完成请求必须进行更进一步的处理<br />o   4XX 客户端错误 - 请求有语法错误或请求无法实现<br />o   5XX 服务器端错误 -  服务器未能实现合法的请求响应头</p><p>响应头：响应头与请求头对应，是服务器对该响应的一些附加说明<br />响应体：它才是真正的响应数据，这些数据其实就是网页的 HTML 源代码</p><h2 id="https与http的区别"><a class="markdownIt-Anchor" href="#https与http的区别"></a> https（与http的区别）</h2><p>HTTPS 并非是应用层的一种新协议。它是由HTTP协议添加SSL构建的可进行加密传输、身份认证的网络协议。比http协议安全。</p><p>另外不同的是，http默认使用80端口，https默认使用443端口。</p><h2 id="https的具体原理"><a class="markdownIt-Anchor" href="#https的具体原理"></a> https的具体原理</h2><ul><li><p><strong>加密传输</strong></p><p>对数据进行加密，使得第三方难以修改我们的数据内容。就像字条上的文字只有甲方跟丙方能够看懂，作为乙方根本不知道纸条上写的是什么内容，就不从下手对内容进行修改。</p></li><li><p><strong>身份认证</strong></p><p>同时，给字条加上信封，再加上一次性的印戳，使得乙方根本无法看到字条上的内容。因为一旦拆开信封，丙方就知道自己的信息被第三方看到了。从而对纸条内容产生怀疑。SSL证书就像信封，把我们的数据放在里面，只有指定的一方可以解读这个数据，一旦数据被第三方劫持.接受数据的用户就会产生不信任，从而丟弃数据。</p></li></ul><h2 id="https缺点"><a class="markdownIt-Anchor" href="#https缺点"></a> https缺点</h2><ul><li>由于进行http会话之前还要进行SSL握手，所以整个握手延迟较高</li><li>部署成本高。一是需要进行加密解密计算，导致占用的CPU资源多；二是需要购买CA证书</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DNS域名解析</title>
      <link href="/2020/04/1623410974.html"/>
      <url>/2020/04/1623410974.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="dns域名解析"><a class="markdownIt-Anchor" href="#dns域名解析"></a> DNS域名解析</h3><p>域名是为了方便记忆而专门建立的一套地址转换系统，要访问一台互联网上的服务器，归根结底还是通过访问IP地址实现的。</p><p>域名解析就是将域名转换为IP的过程。一个域名对应一个IP地址，而一个IP地址可以绑定多个域名。</p><h3 id="dns使用的协议"><a class="markdownIt-Anchor" href="#dns使用的协议"></a> DNS使用的协议</h3><blockquote><p>既使用TCP又使用UDP</p></blockquote><p>首先了解一下TCP与UDP传送字节的长度限制：</p><p>UDP报文的最大长度为512字节，而TCP则允许报文长度超过512字节。</p><ul><li><p>区域传送时使用TCP，主要有一下两点考虑：</p><p>TCP是一种可靠的连接，保证了数据的准确性。</p></li><li><p>域名解析时使用UDP协议：</p><p>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过TCP三次握手，这样DNS服务器负载更低，响应更快。</p></li></ul><h3 id="dns劫持"><a class="markdownIt-Anchor" href="#dns劫持"></a> DNS劫持</h3><p>DNS劫持就是通过劫持了DNS服务器，修改用户访问的域名的解析结果，将原IP地址修改为指定的IP，使用户对原本的网址不能访问或访问指定的假网址，例如：输入Google的域名，跳转到的是baidu的页面。</p><blockquote><p><strong>解决方案</strong></p><p>1、换个DNS<br />2、工信部投诉（DNS劫持问题的终结者！）</p><p><code>注：使用https没有用，会白屏</code></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中断</title>
      <link href="/2020/04/2175935713.html"/>
      <url>/2020/04/2175935713.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="中断"><a class="markdownIt-Anchor" href="#中断"></a> 中断</h1><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><p>程序执行过程中，遇到急需处理的事件时，暂时中止CPU上现行程序的运行，转去执行相应的事件处理程序，待处理完成后再返回原程序被中断处或调度其他程序执行的过程。</p><blockquote><p>操作系统是“中断驱动”的，中断是激活操作系统的<code>唯一方式</code>。</p></blockquote><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><ul><li><h5 id="外中断"><a class="markdownIt-Anchor" href="#外中断"></a> 外中断</h5><p>由 CPU 执行指令以外的事件引起，如 I/O 完成、时钟中断、控制台中断等。</p></li><li><h5 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h5><p>由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。</p></li><li><h5 id="陷入"><a class="markdownIt-Anchor" href="#陷入"></a> 陷入</h5><p>在用户程序中使用系统调用。</p></li></ul><h3 id="系统处理流程"><a class="markdownIt-Anchor" href="#系统处理流程"></a> 系统处理流程</h3><ol><li>保护CPU现场</li><li>分析中断原因</li><li>转入中断处理程序进行处理</li><li>恢复CPU现场，继续执行</li></ol><h3 id="中断屏蔽"><a class="markdownIt-Anchor" href="#中断屏蔽"></a> 中断屏蔽</h3><p>含义：当计算机检测到中断时，中断装置通过中断屏蔽位决定是否响应已发送的中断</p><h3 id="中断的嵌套处理"><a class="markdownIt-Anchor" href="#中断的嵌套处理"></a> 中断的嵌套处理</h3><p>当计算机响应中断后，在中断处理过程中，可以再响应其他中断</p><p>考虑系统效率和实现代价问题，中断的嵌套处理应限制在一定层数内，如三层</p><p>中断的嵌套处理改变中断处理次序，<code>先响应的有可能后处理</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟内存、逻辑地址、物理地址</title>
      <link href="/2020/04/241584371.html"/>
      <url>/2020/04/241584371.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="虚拟存储器"><a class="markdownIt-Anchor" href="#虚拟存储器"></a> 虚拟存储器</h2><p>每个程序都拥有自己的地址空间，这个地址空间被分成大小相等的页，这些页被映射到物理内存；但不需要所有的页都在物理内存中，当程序引用到不在物理内存中的页时，由操作系统将缺失的部分装入物理内存。这样，对于程序来说，逻辑上似乎有很大的内存空间，但实际上是有一部分是存储在磁盘上，因此叫做虚拟内存。</p><p>虚拟内存的优点是让程序可以获得更多的可用内存。</p><h6 id="虚拟存储器的特征"><a class="markdownIt-Anchor" href="#虚拟存储器的特征"></a> 虚拟存储器的特征</h6><ol><li>多次性</li><li>对换性</li><li>虚拟性（本质）</li></ol><p><strong>段式内存管理中的“段”和进程地址空间中的“代码段，数据段，bss段，堆栈段”不是同一个东西</strong></p><p>理由：段式内存管理中的段是一个处理器概念，由处理器来将段地址例如CS:EIP等映射成线性地址，这个过程程序感知不到，因为这是一个硬件过程，操作系统也控制不了。而程序地址空间中的段是一个与程序装载有关的概念，将进程空间划分成只读代码段、只读数据段、可读写数据段等等是为了便于管理和提高安全性，比如C语言程序中的全局变量就在可读写数据段，而代码就在只读代码段，const变量则被放在只读数据段，这种划分是有操作系统控制的</p><h5 id="处理器的两种工作方式实模式-保护模式"><a class="markdownIt-Anchor" href="#处理器的两种工作方式实模式-保护模式"></a> 处理器的两种工作方式：实模式、保护模式</h5><p>8086就只有实模式。而现在的windows操作系统则是运行在保护模式下。</p><blockquote><ul><li><p>实模式下：段寄存器存放段基址</p></li><li><p>保护模式下：段寄存器存放段选择子</p><p>​   段选择子就是一个索引，索引段描述符，段描述符长度为64位，存于GDT(全局描述符表)</p><p>​       其中有32位用来存放段基址，剩下32位存放着段界限等信息。</p></li></ul></blockquote><p>在 Intel 32 位平台下<code>保护模式</code>代码段：(不讲 64 位是因为在 64位 下的分段直接被禁用了，内存平坦)</p><h4 id="一-逻辑地址"><a class="markdownIt-Anchor" href="#一-逻辑地址"></a> 一、逻辑地址</h4><hr /><p>逻辑地址是 selector:offset 这种形式。</p><p>selector （段选择子）是 CS 寄存器的值，</p><p><strong>offset    （段内偏移）是 EIP 寄存器的值</strong>。 （16位）</p><h4 id="二-线性地址-20位"><a class="markdownIt-Anchor" href="#二-线性地址-20位"></a> 二、线性地址 （20位）</h4><hr /><p>如果用 selector 去 GDT( 全局描述符表 ) 里拿到 <code>段基址</code>， 然后加上 offset(段内偏移)，这就得到了 <strong>线性地址</strong>。我们把这个过程称作<strong>段式内存管理</strong>。</p><h4 id="三-物理地址-20位"><a class="markdownIt-Anchor" href="#三-物理地址-20位"></a> 三、物理地址 （20位）</h4><hr /><p>如果再把 线性地址 切成四段，用前三段分别作为索引去页表中查找，就会得到一个页表项(Page Table Entry)，那里面的值就是一页物理内存的起始地址，把它加上 第四段的内容(段内偏移)就得到了最终的 <strong>物理地址</strong>。我们把这个过程称作<strong>页式内存管理</strong>。</p><h4 id="四-虚拟地址"><a class="markdownIt-Anchor" href="#四-虚拟地址"></a> 四、虚拟地址</h4><hr /><p>对于虚拟地址，他和线性地址在本质上就是相同的。（线性地址与逻辑地址数值相同，但本质不同）</p><blockquote><p>总结：</p><ul><li><p>保护模式下：线性地址 = 段基址 &lt;&lt; 4 + 段内偏移</p></li><li><p>实模式下：    物理地址 = 段基址 &lt;&lt; 4 + 段内偏移</p></li><li><p>程序中直接用的是逻辑地址，先经过分段变为线性地址，再经过分页最后转变为物理地址。</p></li><li><p>对软件就讲逻辑地址，针对cpu就讲线性地址，针对硬件就讲物理地址</p></li></ul></blockquote><p>物理地址总是一一对应于实际物理内存空间的位置；但可以有多个线性地址对应到一个物理地址上。<br />因为线性地址的值是由二元组相加的。即5=1+4，也有5=2+3.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/2020/04/448453639.html"/>
      <url>/2020/04/448453639.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="死锁和活锁的区别"><a class="markdownIt-Anchor" href="#死锁和活锁的区别"></a> 死锁和活锁的区别</h5><ul><li>死锁：拼命去争资源，陷入僵持状态</li><li>活锁：面对资源，谁都不去第一个拿，陷入僵持状态</li></ul><h3 id="什么是死锁"><a class="markdownIt-Anchor" href="#什么是死锁"></a> 什么是死锁？</h3><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。</p><h3 id="死锁产生的原因"><a class="markdownIt-Anchor" href="#死锁产生的原因"></a> <strong>死锁产生的原因：</strong></h3><ul><li>系统资源的竞争</li><li>进程运行推进顺序不当引起死锁</li></ul><h3 id="死锁产生的必要条件缺失任何一个都不会发生死锁"><a class="markdownIt-Anchor" href="#死锁产生的必要条件缺失任何一个都不会发生死锁"></a> 死锁产生的必要条件（缺失任何一个，都不会发生死锁）</h3><ul><li>互斥：每个资源要么已经分配给了一个进程，要么就是可用的。</li><li>占有和等待：已经得到了某个资源的进程可以再请求新的资源。</li><li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。</li><li>环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</li></ul><h3 id="处理方法"><a class="markdownIt-Anchor" href="#处理方法"></a> 处理方法</h3><p>主要有以下四种方法：</p><ul><li>鸵鸟策略</li><li>死锁检测与死锁恢复</li><li>死锁预防</li><li>死锁避免</li></ul><h3 id="鸵鸟策略"><a class="markdownIt-Anchor" href="#鸵鸟策略"></a> 鸵鸟策略</h3><p>把头埋在沙子里，假装根本没发生问题。</p><blockquote><p>大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</p></blockquote><h6 id="为什么可行"><a class="markdownIt-Anchor" href="#为什么可行"></a> 为什么可行？</h6><ol><li>解决死锁问题的代价很高，这种方案会获得更高的性能。</li><li>发生死锁时不会对用户造成多大影响，或发生死锁的概率很低</li></ol><h3 id="死锁检测"><a class="markdownIt-Anchor" href="#死锁检测"></a> 死锁检测</h3><p>事先不采取任何限制性措施,也不检查系统是否进入不安全区,此方法允许系统在运行过程中发生死锁。但可通过检测机构,及时地检测出死锁的发生,并精确地确定与死锁有关的进程和资源,然后采取适当措施,从系统中将已发生的死锁清除掉。</p><h3 id="死锁恢复"><a class="markdownIt-Anchor" href="#死锁恢复"></a> 死锁恢复</h3><ul><li>利用抢占恢复</li><li>利用回滚恢复</li><li>通过杀死进程恢复</li></ul><h3 id="死锁预防破坏必要条件之一"><a class="markdownIt-Anchor" href="#死锁预防破坏必要条件之一"></a> 死锁预防（破坏必要条件之一）</h3><h5 id="1-破坏互斥条件"><a class="markdownIt-Anchor" href="#1-破坏互斥条件"></a> 1. 破坏互斥条件</h5><h5 id="2-破坏占有和等待条件"><a class="markdownIt-Anchor" href="#2-破坏占有和等待条件"></a> 2. 破坏占有和等待条件</h5><p>​一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。</p><h5 id="3-破坏不可抢占条件"><a class="markdownIt-Anchor" href="#3-破坏不可抢占条件"></a> 3. 破坏不可抢占条件</h5><h5 id="4-破坏环路等待"><a class="markdownIt-Anchor" href="#4-破坏环路等待"></a> 4. 破坏环路等待</h5><p>​给资源统一编号，进程只能按编号顺序来请求资源。</p><h3 id="死锁避免"><a class="markdownIt-Anchor" href="#死锁避免"></a> 死锁避免</h3><p>在资源的动态分配过程中,用某种方法去防止系统进入不安全状态,从而避免发生死锁。</p><p>常用的实施方法是撤销或挂起一些进程，以便回收一些资源，再将这些资源分配给处于阻塞状态的进程,使之转为就绪状态，以继续运行。</p><h3 id="死锁解答题"><a class="markdownIt-Anchor" href="#死锁解答题"></a> 死锁解答题</h3><ul><li><h6 id="n个进程竞争m个资源问最少需要多少个资源系统才不会发生死锁"><a class="markdownIt-Anchor" href="#n个进程竞争m个资源问最少需要多少个资源系统才不会发生死锁"></a> n个进程竞争m个资源，问最少需要多少个资源，系统才不会发生死锁?</h6><p>最极端的情况是每个进程有m-1个资源，而总资源一共就有n(m-1)个，那么这个时候也会发生死锁，这个时候只需要再多出一个资源，就可以保证某一个进程执行成功，然后执行成功以后，就会有更多的资源释放，后面的进程也可以执行。所以最终的结果就是<code>n(m-1)+1</code></p></li><li><h6 id="有同类资源m个被n个进程共享当mn和-mn时候每个进程最多请求多少个这类资源一定不会死锁"><a class="markdownIt-Anchor" href="#有同类资源m个被n个进程共享当mn和-mn时候每个进程最多请求多少个这类资源一定不会死锁"></a> 有同类资源m个，被n个进程共享，当M&gt;N和 M&lt;=N时候，每个进程最多请求多少个这类资源，一定不会死锁？</h6><p>例如11个同类资源被5个进程共享，每个进程最多可以请求多3个资源才能保证系统不会发生死锁。<br />因为如每个进程都已分配到2个资源，系统还剩下一个资源，就能保证某一个进程能分配到全部3个资源，并能运行到底，最终释放这3个资源。</p></li></ul><p>​   当m＞n时，设一个进程最多可以请求多x个资源，故当m &gt; n * (x-1)时，系统不会发生死锁。<br />于是：<br />​   x – 1 &lt; m / n<br />​   x &lt; m / n +1</p><p>​   <code>当 m 能被n除尽时，x = m/n</code><br />​   <code>当 m 不能被n除尽时，x = (m/n)+1</code><br />​   <code>当m &lt;＝n时，每个进程最多可以请求1个资源。</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>局部性原理</title>
      <link href="/2020/04/2429405312.html"/>
      <url>/2020/04/2429405312.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="程序访问的局部性原理"><a class="markdownIt-Anchor" href="#程序访问的局部性原理"></a> 程序访问的局部性原理</h3><p>程序的局部性原理包括<code>时间局部性</code>和<code>空间局部性</code>。</p><ul><li>空间局部性：在最近的未来要用到的信息，很可能与现在正在使用的信息在存储空间上是邻近的。</li><li>时间局部性：在最近的未来要用到的信息（指令和数据），很可能是现在正在使用的信息。</li></ul><p>高速缓冲技术是利用程序访问的局部性原理，把程序中正在使用的部分存放在一个高速的、容量较小的Cache中，使CPU的访存操作大多数针对Cache进行，从而大大提高程序的执行速度。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程状态</title>
      <link href="/2020/04/2848453009.html"/>
      <url>/2020/04/2848453009.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>进程控制块 ( PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。</p><ul><li><strong>PCB</strong>必须长驻内存</li><li><strong>作为独立运行单位的标志</strong></li><li><strong>PCB</strong>是感知进程存在的唯一标志</li></ul><h3 id="概念级的进程状态三态模型"><a class="markdownIt-Anchor" href="#概念级的进程状态三态模型"></a> 概念级的进程状态（三态模型）</h3><ol><li>运行态：进程占有CPU运行</li><li>就绪态：进程具备运行条件，在等待CPU</li><li>等待（阻塞、睡眠）态：进程由于等待资源、输入输出等而不具备运行条件，暂时不能运行<ol><li>运行——&gt;就绪：该进程用完了时间片，被高优先级进程抢占。</li><li>就绪——&gt;运行：上一个进程的时间片用完，通过调度程序得到CPU使用权</li><li>运行——&gt;阻塞：正在执行着的进程在等待某个事件发生，比如I/O请求</li><li>阻塞——&gt;就绪：进程所等待的事件已经发生，重新进入就绪队列</li></ol></li></ol><ul><li>对单个进程：<br />–任何时刻，进程只能处理三种基本状态之一；</li><li>对整个系统：<br />–每个时刻允许同时有多个进程处于就绪/阻塞状态；<br />–而对于执行状态的进程，每个处理机最多只允许有一个。</li></ul><h3 id="进程的其他状态"><a class="markdownIt-Anchor" href="#进程的其他状态"></a> 进程的其他状态</h3><p>进程的三种其他状态：</p><ul><li><p>创建态（New）</p><ul><li>已完成创建一进程所必要的工作，例如创建PID、PCB。但因资源有限，尚未同意执行该进程</li></ul></li><li><p>终止态（Terminate）</p></li><li><p>挂起态（Suspend）</p><ul><li><p>挂起的**含义：**将进程从内存搬至外存，通过激活解除挂起（激活是将进程从外存搬至内存）。激活后进入就绪状态，获得处理机之后，才可以继续执行。</p></li><li><p>引起挂起的<strong>原因：</strong></p><p>–  终端用户的请求；</p><p>–  父进程请求；</p><p>–  负荷调节的需要；</p><p>–  操作系统的需要</p></li></ul><blockquote><p>阻塞态与挂起态的区别：</p><p>阻塞：资源保留，在内存中等待</p><p>挂起：释放资源，被调换到外存</p></blockquote></li></ul><p>五态模型：</p><p>七态模型：</p><p>线程状态：</p><p><img src= "/img/loading.gif" data-src="D:%5C%E5%A4%8D%E8%AF%95%5C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%5C%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.jpg" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程同步</title>
      <link href="/2020/04/1306556738.html"/>
      <url>/2020/04/1306556738.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-临界区"><a class="markdownIt-Anchor" href="#1-临界区"></a> 1. 临界区</h3><p>对临界资源进行访问的那段代码称为临界区。</p><p><strong>同步机制应遵循的原则</strong>（为了实现进程互斥的访问临界区）</p><p><strong>（1）空闲让进</strong></p><p><strong>（2）忙则等待</strong></p><p><strong>（3）有限等待</strong></p><p><strong>（4）让权等待</strong>    （整形信号量机制不满足）</p><h3 id="2-同步与互斥"><a class="markdownIt-Anchor" href="#2-同步与互斥"></a> 2. 同步与互斥</h3><ul><li>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。</li><li>互斥：多个进程在同一时刻只有一个进程能进入临界区。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程调度算法</title>
      <link href="/2020/04/950925693.html"/>
      <url>/2020/04/950925693.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="进程调度算法"><a class="markdownIt-Anchor" href="#进程调度算法"></a> 进程调度算法</h1><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p><h5 id="按调度方式可以将实时调度算法分为哪几种"><a class="markdownIt-Anchor" href="#按调度方式可以将实时调度算法分为哪几种"></a> 按调度方式可以将实时调度算法分为哪几种？</h5><ul><li>抢占式<ol><li>基于时钟</li><li>立即抢占</li></ol></li><li>非抢占式<ol><li>基于时间片</li><li>基于优先级</li></ol></li></ul><h5 id="在各类系统中个采用哪几种调度算法"><a class="markdownIt-Anchor" href="#在各类系统中个采用哪几种调度算法"></a> 在各类系统中，个采用哪几种调度算法？</h5><ul><li>批处理系统：短作业优先、优先权、高相应比、多级反馈队列</li><li>分时系统：时间片轮转法、</li><li>实时系统：最早截止时间优先、最低松弛度优先</li></ul><h2 id="1-批处理系统"><a class="markdownIt-Anchor" href="#1-批处理系统"></a> 1. 批处理系统</h2><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p><p><strong>1.1 先来先服务 first-come first-serverd（FCFS）</strong></p><p><code>先来先服务（FCFS）</code>调度算法是一种<code>最简单</code>的调度算法，按照队列的顺序，该算法既可用于作业调度， 也可用于进程调度。FCFS算法比较<code>有利于长作业（进程）</code>，而<code>不利于短作业（进程）</code>。由此可知，本算法适合于<code>CPU繁忙型</code>作业， 而不利于<code>I/O繁忙型</code>的作业（进程）。</p><p><strong>1.2 短作业优先 shortest job first（SJF）</strong></p><p>短作业（进程）优先调度算法是指对短作业或短进程优先调度的算法，该算法既可用于作业调度， 也可用于进程调度。但其对长作业不利；不能保证紧迫性作业（进程）被及时处理；作业的长短只是被估算出来的。</p><p><strong>1.3 最短剩余时间优先 shortest remaining time next（SRTN）</strong></p><p>最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。</p><h2 id="2-交互式系统"><a class="markdownIt-Anchor" href="#2-交互式系统"></a> 2. 交互式系统</h2><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p><p><strong>2.1 时间片轮转</strong></p><p><code>时间片轮转法</code>一般用于<code>进程调度</code>，每次调度，把CPU分配<code>队首</code>进程，并令其执行一个<code>时间片</code>。 当执行的时间片<code>用完</code>时，由一个记时器发出一个<code>时钟中断</code>请求，该进程被停止，并被送往<code>就绪队列末尾</code>；依次循环。</p><p><strong>2.2 优先级调度</strong></p><p>为了照顾<code>紧迫性</code>作业，使之进入系统后便获得<code>优先处理</code>，引入了<code>最高优先权优先（FPF）调度算法</code>。 此算法常被用在<code>批处理系统</code>中，作为作业调度算法，<code>也作为</code>多种操作系统中的<code>进程调度</code>，还可以用于<code>实时系统</code>中。当其用于作业调度， 将后备队列中若干个优先权最高的作业装入内存。当其用于进程调度时，把处理机分配给<code>就绪队列中</code>优先权最高的进程，此时， 又可以进一步把该算法分成以下两种：<br />(1)非抢占式优先权算法;<br />(2)抢占式优先权调度算法（高性能计算机操作系统）;</p><p><strong>2.3 多级反馈队列</strong></p><p>多级反馈队列调度算法，不必事先知道各种进程所需要执行的时间，它是目前被公认的一种较好的进程调度算法。 其实施过程如下：<br />(1) 设置<code>多个就绪队列</code>，并为各个队列<code>赋予不同的优先级</code>。在<code>优先权越高</code>的队列中， 为每个进程所规定的执行<code>时间片就越小</code>。<br />(2) 当一个新进程进入内存后，首先放入第一队列的末尾，<code>按FCFS原则排队</code>等候调度。 如果他能在<code>一个时间片</code>中<code>完成</code>，便可<code>撤离</code>；如果<code>未完成</code>，就转入<code>第二队列的末尾</code>，再<code>同样</code>等待调度…… 如此下去，当一个<code>长作业</code>（进程）从<code>第一队列</code>依次将到<code>第n队列</code>（最后队列）后，便按第n队列时间片轮转运行。<br />(3) <code>仅当</code>第一队列空闲时，调度程序才调度<code>第二队列中</code>的进程运行；<code>仅当</code>第1到第（ i-1 ）队列空时， 才会调度<code>第i队列中</code>的进程运行，并执行相应的时间片轮转。<br />(4) 如果<code>处理机</code>正在处理<code>第i队列中</code>某进程，又有<code>新进程</code>进入<code>优先权较高</code>的队列， 则此<code>新队列</code>抢占<code>正在运行</code>的处理机，并把正在运行的进程放在<code>第i队列</code>的队尾。</p><p><strong>3.实时系统</strong></p><p>实时系统要求一个请求在一个确定时间内得到响应。</p><p>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p><p><strong>最早截止时间优先调度算法(Earliest DeadlineFirst):</strong><br /><code>最早截止时间优先EDF算法</code>是非常著名的<code>实时调度</code>算法之一。在每一个<code>新的就绪状态</code>，<code>调度器</code>都是<code>从那些已就绪</code>但<code>还没有完全处理完毕</code>的任务中选择<code>最早截止时间</code>的任务，并将执行该任务所需的资源分配给它。在有<code>新任务到来时</code>，调度器必须<code>立即计算EDF</code>，排出<code>新的定序</code>，即<code>正在运行</code>的任务被剥夺，并且<code>按照新任务</code>的截止时间<code>决定</code>是否调度<code>该新任务</code>。如果新任务的<code>最后期限早于</code>被中断的<code>当前任务</code>，就<code>立即处理</code>新任务。按照EDF算法，被中断任务的处理将在<code>稍后继续进行</code>。</p><p>该算法的思想是<code>从两个任务</code>中选择<code>截至时间</code>最早的任务,把它<code>暂作</code>为<code>当前处理任务</code>,再<code>判断</code>该任务是否在<code>当前周期内</code>,<code>若不在</code>当前周期内,就让另一任务暂作当前处理任务,若该任务<code>也不</code>在当前周期内,就让CPU空跑到<code>最靠近</code>的下一个截至时间的开始,若有任务在该周期内,就判断该任务的剩余时间是否小于<code>当前截至</code>时间与<code>当前时间</code>的差,若小于,则<code>让该任务运行到结束</code>.否则,就让该任务运行到<code>该周期</code>的截止时间,就<code>立即抢回</code>处理器,再判断紧接着的最早截至时间,并把处理器给它,做法同上,如此反复执行.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程特征</title>
      <link href="/2020/04/4119281203.html"/>
      <url>/2020/04/4119281203.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="进程的特征"><a class="markdownIt-Anchor" href="#进程的特征"></a> 进程的特征：</h3><ul><li><p><strong>动态性</strong></p><p>进程的实质是进程实体的一次执行过程</p><p>进程具有一定的生命周期：由创建而产生，由调度而执行，由撤消而消亡。</p></li><li><p><strong>并发性</strong></p><p>多个进程实体同存于内存中，且能在一段时间内同时运行。</p></li><li><p><strong>独立性</strong></p><p>进程实体是一个能独立运行、独立分配资源和独立接受调度的基本单位。</p></li><li><p><strong>异步性</strong></p><p>进程可按各自独立的、不可预知的速度向前推进。</p><p>进程的并发执行结果是可再现的。</p></li><li><p><strong>结构特征</strong></p><p>进程实体 = 程序段 + 数据段 + PCB</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程、线程间的通信</title>
      <link href="/2020/04/3073790560.html"/>
      <url>/2020/04/3073790560.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="进程间通信"><a class="markdownIt-Anchor" href="#进程间通信"></a> 进程间通信</h2><ol><li><strong>管道pipe</strong>：是一种半双工的通信方式，数据只能单向流动，而且只能在父子进程间使用。</li><li>命名管道FIFO：也是半双工的通信方式，但它允许非父子进程间的通信。</li><li><strong>消息队列</strong>：消息队列是由消息组成的链表，存放在内核中并由消息队列标识符标识。</li><li><strong>共享内存</strong>：这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式。</li><li>信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>套接字Socket：与其它通信机制不同的是，它可用于不同机器间的进程通信。</li><li>信号： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ol><h2 id="线程间通信"><a class="markdownIt-Anchor" href="#线程间通信"></a> 线程间通信</h2><ul><li><p>锁机制</p><ol><li>互斥锁：工厂里只能容下一个人的房间，需要一把锁一把钥匙挂在门上，一次只能进一个。</li><li>读写锁：允许多个线程同时进入读共享数据，但不允许同时进入写数据。</li><li>条件变量：以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。<code>条件变量始终与互斥锁一起使用</code>。</li></ol></li><li><p>信号量机制（工厂里能容下n个人的房间，需要n把锁n把钥匙挂在门上，这就叫信号量）</p><ol><li>无名线程信号量</li><li>命名线程信号量</li></ol></li></ul><p>注意：线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>管态与目态</title>
      <link href="/2020/04/1685808488.html"/>
      <url>/2020/04/1685808488.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="管态与目态"><a class="markdownIt-Anchor" href="#管态与目态"></a> 管态与目态</h2><p>将CPU执行状态分为管态与目态。CPU交替执行操作系统程序和用户程序。</p><ul><li><p>**管态又叫系统态或核心态。**CPU在管态下可以执行指令系统的全集。通常，操作系统在管态下运行。</p><p>管态下的程序可以访问计算机的任何资源，即它的<code>资源访问权限不受限制</code>。</p></li><li><p><strong>目态又叫用户态</strong>。机器处于目态时，程序只能执行非特权指令，只能<code>受限的访问内存</code>。用户程序只能在目态下运行，如果用户程序在目态下执行特权指令，硬件将发生中断。</p></li></ul><blockquote><p>从目态转换为管态的唯一途径是中断。</p><p>从管态到目态可以通过修改程序状态字PSW来实现</p></blockquote><h5 id="为什么要分内核态与用户态"><a class="markdownIt-Anchor" href="#为什么要分内核态与用户态"></a> 为什么要分内核态与用户态？</h5><p>为了安全性。如果用错指令，可能会导致整个系统崩溃。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分页、分段与地址转换</title>
      <link href="/2020/04/1782550004.html"/>
      <url>/2020/04/1782550004.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="分页"><a class="markdownIt-Anchor" href="#分页"></a> 分页</h1><h3 id="基本原理"><a class="markdownIt-Anchor" href="#基本原理"></a> 基本原理</h3><p>虚拟内存位于程序和物理内存之间，程序只能看见虚拟内存，再也不能直接访问物理内存。但程序最终肯定是运行在物理内存中的，解决方法就是分段和分页两种技术。<br /><code>分页机制</code>就是把内存地址空间分为若干个很小的<code>固定大小</code>的页，每一页的大小由内存决定</p><h5 id="为实现分页存储管理需要哪些硬件的支持"><a class="markdownIt-Anchor" href="#为实现分页存储管理需要哪些硬件的支持"></a> 为实现分页存储管理，需要哪些硬件的支持？</h5><ol><li>动态重定位技术</li><li>虚拟存储技术</li><li>多道程序设计技术</li></ol><h2 id="页面置换算法"><a class="markdownIt-Anchor" href="#页面置换算法"></a> 页面置换算法</h2><p>在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。</p><blockquote><p>最佳置换OPT：（理想置换算法）替换最长时间不需要访问的页面<br />先进先出FIFO：按照队列的顺序<br />最近最久未使用LRU：替换在最近一段时间内最久不用的页面<br />时钟Clock：类似轮询，初始标记位0 加入或者使用时标记为1，替换标记为0的，当全部为1时，遍历并全更换为0</p></blockquote><p>页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。</p><h3 id="快表存放在高速存储器中的页表部分"><a class="markdownIt-Anchor" href="#快表存放在高速存储器中的页表部分"></a> 快表：存放在高速存储器中的页表部分</h3><ol><li>为提供地址转换速度，设置一个专用的高速存储器，用来存放页表的一部分</li><li>快表表项：页号，页架号</li><li>这种高速存储器是联想存储器，即<code>按照内容寻址，而非按照地址访问·</code></li></ol><h3 id="基于快表的地址转换流程"><a class="markdownIt-Anchor" href="#基于快表的地址转换流程"></a> 基于快表的地址转换流程</h3><ol><li><p>按逻辑地址中的页号查快表</p></li><li><p>若该页已在快表中，则由页架号和单元号形成绝对地址</p></li><li><p>若该页不在快表中，则再查主存页表形成绝对地址，同时将该页登记到快表中</p></li><li><p>当快表填满后，又要登记新页时，则需在快表中按一定策略淘汰一个旧登记项</p></li></ol><h5 id="颠簸抖动"><a class="markdownIt-Anchor" href="#颠簸抖动"></a> 颠簸（抖动）</h5><p>在页面置换时，如果换出的页面是一个很快会再次访问的页面，则缺页后会继续缺页，导致整个系统的效率急剧降低。</p><p>解决方法：1.改进替换策略  2.增大物理内存</p><h1 id="分段"><a class="markdownIt-Anchor" href="#分段"></a> 分段</h1><p>虚拟内存采用的是分页技术，也就是将地址空间划分成固定大小的页，每一页再与内存进行映射。</p><p>分段的做法是把每个表分成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。</p><h1 id="段页式"><a class="markdownIt-Anchor" href="#段页式"></a> 段页式</h1><p>程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样<code>既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。</code></p><h3 id="分页与分段的区别"><a class="markdownIt-Anchor" href="#分页与分段的区别"></a> 分页与分段的区别</h3><ul><li><p>对程序员的透明性：分页透明，但是分段需要程序员显式划分每个段。</p></li><li><p>地址空间的维度：分页是一维地址空间，分段是二维的。</p></li><li><p>大小是否可以改变：页的大小不可变，段的大小可以动态改变。</p></li><li><p>出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段有助于共享和保护。</p></li></ul><h3 id="缺页中断与一般中断的区别"><a class="markdownIt-Anchor" href="#缺页中断与一般中断的区别"></a> 缺页中断与一般中断的区别</h3><ul><li>一条指令在执行期间，可能产生多次缺页中断</li><li>缺页中断返回的是中断的那一条指令；而一般中断返回的是下一条指令</li></ul><h5 id="什么是大端小端以及如何判断他们"><a class="markdownIt-Anchor" href="#什么是大端小端以及如何判断他们"></a> 什么是大端小端，以及如何判断他们？</h5><p>大端是指低字节存储在高地址；小端是指低字节存储在低地址。</p><p>可以通过联合体union来判断，因为union变量总是从低地址存储</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">union</span> test</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> i;</span><br><span class="line">         <span class="keyword">char</span> c;</span><br><span class="line">     &#125;;</span><br><span class="line">     </span><br><span class="line">     test t;</span><br><span class="line">     t.i = <span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//如果是大端，则t.c=0x00，t.c!=1，返回0 ； 如果是小端，则t.c==0x01，则t.c==1，返回1</span></span><br><span class="line">     <span class="keyword">return</span> (t.c == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="x86架构下页面大小为什么是4k-x64架构呢"><a class="markdownIt-Anchor" href="#x86架构下页面大小为什么是4k-x64架构呢"></a> x86架构下，页面大小为什么是4K？ x64架构呢？</h5><p>页面大了，浪费的内存也多了，4K是一个综合评价后的结果.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>磁盘调度</title>
      <link href="/2020/04/1301296170.html"/>
      <url>/2020/04/1301296170.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="读写一个磁盘块的时间的影响因素有"><a class="markdownIt-Anchor" href="#读写一个磁盘块的时间的影响因素有"></a> 读写一个磁盘块的时间的影响因素有：</h3><ul><li>旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）</li><li>寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）</li><li>实际的数据传输时间</li></ul><p>其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p><h3 id="磁盘调度算法-电梯算法"><a class="markdownIt-Anchor" href="#磁盘调度算法-电梯算法"></a> 磁盘调度算法   —   电梯算法</h3><p>电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p><p><strong>电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。</strong></p><p>因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统基本特征</title>
      <link href="/2020/04/746355648.html"/>
      <url>/2020/04/746355648.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="操作系统定义"><a class="markdownIt-Anchor" href="#操作系统定义"></a> 操作系统定义：</h3><p>操作系统是管理计算机硬件与软件资源的计算机程序。</p><h5 id="操作系统的基本功能"><a class="markdownIt-Anchor" href="#操作系统的基本功能"></a> 操作系统的基本功能</h5><ol><li>进程管理</li><li>内存管理</li><li>文件管理</li><li>设备管理</li></ol><h2 id="操作系统基本特征"><a class="markdownIt-Anchor" href="#操作系统基本特征"></a> 操作系统基本特征</h2><p><strong>1.并发</strong>(最基本的)</p><p>​并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。</p><p><strong>2.共享</strong></p><p>​共享是指系统中的资源可以被多个并发进程共同使用。</p><p>​有两种共享方式：互斥共享和同时共享。</p><p><strong>3.虚拟</strong></p><p>​虚拟技术把一个物理实体转换为多个逻辑实体。</p><p>​主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。</p><p>​多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。</p><p>​虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。</p><p><strong>4.异步</strong></p><p>​异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IO方式</title>
      <link href="/2020/04/2244756814.html"/>
      <url>/2020/04/2244756814.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="轮询方式"><a class="markdownIt-Anchor" href="#轮询方式"></a> 轮询方式</h3><p>又称程序直接控制方式，CPU询问设备控制器的状态，闲则传输数据，忙则继续查询。如果有多个设备，则轮流查询。这种方式，CPU是以<code>轮询</code>的方式来响应的。</p><h3 id="中断方式"><a class="markdownIt-Anchor" href="#中断方式"></a> 中断方式</h3><p>设备控制器当取到一个数据之后向CPU发送一个中断，CPU将数据从控制器取到CPU寄存器，再转移到内存中。这种方式，CPU是以<code>字节</code>的方式来响应的。</p><h3 id="直接存储器访问dma"><a class="markdownIt-Anchor" href="#直接存储器访问dma"></a> 直接存储器访问（DMA）</h3><p>DMA申请总线控制权，打开一条内存到设备的通道，模仿CPU来完成I/O存取。缺点是，有多少设备就需要多少DMA。这种方式，CPU是以<code>数据块</code>的方式来响应的。</p><h3 id="io通道通道控制器-io处理器"><a class="markdownIt-Anchor" href="#io通道通道控制器-io处理器"></a> I/O通道（通道控制器、I/O处理器）</h3><p>IO通道相当于一个简单的处理机，有自己的指令，也可以执行指令。 一条IO通道可以连接所有的设备控制器。CPU向IO通道发出指令，IO通道将会自动进行获取数据。 这种方式，CPU是以<code>多个数据块</code>的方式来响应的。</p><blockquote><p>以上I/O控制方式中，CPU的干预程度：（越多干预，效率越低）</p><p><strong>程序I/O方式（轮询）&gt;  中断方式（字节）&gt;  DMA方式（块）&gt;  通道方式（几个块）</strong></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>（多）进程、（多）线程、协程</title>
      <link href="/2020/04/2761280894.html"/>
      <url>/2020/04/2761280894.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>进程：进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><blockquote><p>进程实体 = 程序段 + 数据段 + PCB</p></blockquote><p>进程的引入：实现并发，并对并发执行的程序加以描述和控制。（用PCB描述）</p><p>线程的引入：减少并发的时空开销，从而进一步提高了资源的利用率和系统的吞吐量</p><h2 id="进程和线程的区别"><a class="markdownIt-Anchor" href="#进程和线程的区别"></a> 进程和线程的区别</h2><ul><li>进程是进程实体的运行过程，是系统进行资源分配和调度的独立（最小）单位；一个进程包括多个线程，线程是CPU调度和分派的基本单位。线程不拥有资源，但可以访问隶属进程的资源。</li><li>进程的频繁切换需要包含进程资源的保护和恢复动作，因此会引起多额外的开销进而影响系统的性能，另外进程间的通信要求复杂的系统级实现，线程的切换比较快，容易实现并发，而且可以通过共享资源的方式进行多线程之间的通信，但是需要考虑同步的问题。</li></ul><p>存储资源的最小单位？最小的资源管理单元？   进程</p><p>程序的最小单位？最小的执行单元？  线程</p><h2 id="多进程与多线程"><a class="markdownIt-Anchor" href="#多进程与多线程"></a> 多进程与多线程</h2><ul><li><p>多进程：指计算机同时执行多个进程，一般是同时运行多个软件。</p></li><li><p>多线程：指一个进程中同时有多个线程正在执行。同样，可以理解为：同时运行一个软件中的多个功能。</p></li></ul><h5 id="多线程的优点"><a class="markdownIt-Anchor" href="#多线程的优点"></a> <strong>多线程的优点</strong></h5><p>​在一个程序中，有很多的操作是非常耗时的，如数据库读写操作，IO操作等，如果使用单线程，那么程序就必须等待这些操作执行完成之后才能执行其他操作。使用多线程，可以在将耗时任务放在后台继续执行的同时，同时执行其他操作。以此提高程序的效率。</p><h5 id="多线程的缺点"><a class="markdownIt-Anchor" href="#多线程的缺点"></a> <strong>多线程的缺点：</strong></h5><ul><li>因为线程需要开辟内存，使用太多线程，很耗系统资源。</li><li>线程切换影响系统性能。</li><li>需要考虑线程操作对程序的影响，如线程挂起，中止等操作对程序的影响。</li><li>线程安全性。</li></ul><h3 id="多进程多线程的并发-并行问题"><a class="markdownIt-Anchor" href="#多进程多线程的并发-并行问题"></a> 多进程，多线程的并发、并行问题</h3><p><strong>先说结论：</strong></p><blockquote><p><strong>单CPU中进程只能是并发，多CPU计算机中进程可以并行。</strong></p><p><strong>单CPU单核中线程只能并发，单CPU多核中线程可以并行。</strong></p></blockquote><hr /><p>多线程是并行还是并发取决于你的CPU核心数量。如果是单核CPU，只能并发；如果是多核心CPU，就可以并行<br />多进程是并行还是并发取决于你的CPU数量。现代计算机（单CPU多核）只能并发执行多进程，无法并行。</p><p><strong>理由如下：</strong></p><p>一个CPU同时刻只能执行一个进程，他只能看到线程，即使是多核CPU，也只能是同时刻并行处理一个进程中的多个线程。如果想同时刻并行处理多个进程，只能用多CPU计算机（现阶段不存在）或多个计算机。</p><p>形象一些：<code>一个进程相当于一个软件，线程相当于软件中的某个功能。</code>现代计算机（单CPU多核）可以同时运行多个软件，但那不是并行的多进程，而是并发的多进程，系统是用时间片来切换的。但对于单个软件，比如在网易云音乐中一边听歌一边看评论，这就叫单CPU多核下的多线程并行。如果换成老旧的单CPU单核电脑，也可以达到两件事情同时做，但那叫并发多线程，而非并行多线程。</p><h4 id="多进程-多线程的选择"><a class="markdownIt-Anchor" href="#多进程-多线程的选择"></a> 多进程、多线程的选择</h4><p><code>桌子：进程</code>      <code>人：线程</code>       <code>动作：人在桌子上吃饭</code></p><ol><li>对于 Windows 系统来说，【开桌子】的开销很大，因此 Windows 鼓励大家在一个桌子上吃菜。因此 Windows 多线程学习重点是要大量面对资源争抢与同步方面的问题。</li><li>对于 Linux 系统来说，【开桌子】的开销很小，因此 Linux 鼓励大家尽量每个人都开自己的桌子吃菜。这带来新的问题是：坐在两张不同的桌子上，说话不方便。因此，Linux 下的学习重点大家要学习进程间通讯的方法。</li></ol><h2 id="进程和作业的区别"><a class="markdownIt-Anchor" href="#进程和作业的区别"></a> 进程和作业的区别</h2><p>一个<code>进程</code>是一个程序的<code>执行过程</code>，是<code>分配资源</code>的基本单位。</p><p><code>作业</code>是用户需要计算机完成的<code>某项任务</code>，是要求计算机所做<code>工作</code>的<code>集合</code>。</p><p>其主要区别如下:</p><ul><li><code>一个</code>作业可由<code>多个</code>进程组成，且必须<code>至少</code>由<code>一个进程</code>组成，反过来则不成立</li><li>作业的概念主要用在<code>批处理系统</code>中。而<code>进程</code>的概念则用在几乎<code>所有</code>的<code>多道程序系统</code>中。</li><li><code>操作系统</code>只认识<code>进程</code>，只对<code>进程</code>进行<code>调度</code>，<code>作业</code>其实和<code>操作系统</code>没有关系。</li></ul><h2 id="进程与程序的区别"><a class="markdownIt-Anchor" href="#进程与程序的区别"></a> 进程与程序的区别</h2><ul><li>进程包括程序和程序处理的对象（数据集）</li><li>程序是静止，进程是动态的；</li><li>进程具有并发性，而程序没有；</li><li>进程是竞争计算机资源的基本单位，程序不是。</li><li>进程和程序不是一一对应的：一个程序可由多个进程执行；一个进程可以执行一个或几个程序。</li></ul><h5 id="游戏服务器应该没给个用户开辟一斤进程还是一个线程"><a class="markdownIt-Anchor" href="#游戏服务器应该没给个用户开辟一斤进程还是一个线程"></a> 游戏服务器应该没给个用户开辟一斤进程还是一个线程？</h5><p>进程。</p><p>因为同一进程间的线程会互相影响，一个线程崩溃可能会导致其他线程崩溃。因此要为每个用户开辟一个进程。</p><h5 id="如何设计server使得能够接收多个客户端的请求"><a class="markdownIt-Anchor" href="#如何设计server使得能够接收多个客户端的请求"></a> 如何设计server，使得能够接收多个客户端的请求？</h5><p>多线程、线程池、io复用</p><h2 id="协程"><a class="markdownIt-Anchor" href="#协程"></a> 协程</h2><p>协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。这样带来的好处就是性能得到了很大的提升，不会像线程那样需要上下文切换来消耗资源，因此<strong>协程的开销远远小于线程的开销</strong>。</p><h2 id="僵尸进程"><a class="markdownIt-Anchor" href="#僵尸进程"></a> 僵尸进程</h2><p>僵尸进程是当子进程比父进程先结束，而父进程又没有回收子进程，释放子进程占用的资源，此时子进程将成为一个僵尸进程。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向过程与面向对象</title>
      <link href="/2020/04/1558057985.html"/>
      <url>/2020/04/1558057985.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="面向过程与面向对象"><a class="markdownIt-Anchor" href="#面向过程与面向对象"></a> 面向过程与面向对象</h4><ul><li><p><code>面向过程</code>是一种以事件为中心、自顶向下的编程。把问题模块化。分析出解决问题所需的步骤，然后用函数把这写步骤实现，并按顺序调用。</p></li><li><p><code>面向对象</code>是以“对象”为中心的编程思想。把问题对象化。先建立抽象模型，然后再使用模型解决问题。抽象出对象的目的并不在于完成某个步骤，而是描述其在整个解决问题的步骤中的行为。</p></li></ul><a id="more"></a><h6 id="从代码层结构上来说面向对象和面向过程的主要区别就是数据是单独存放还是与操作存储在一起-前者是在一起"><a class="markdownIt-Anchor" href="#从代码层结构上来说面向对象和面向过程的主要区别就是数据是单独存放还是与操作存储在一起-前者是在一起"></a> 从代码层结构上来说，面向对象和面向过程的主要区别就是数据是单独存放还是与操作存储在一起。（前者是在一起）</h6><p>简单的举个例子：汽车发动、汽车到站。</p><ul><li><p>这对于“面向过程”来说，是两个事件，汽车启动是一个事件，汽车到站是另一个事件。针对上述两个事件，写两个函数，之后依次调用。</p></li><li><p>然而这对于“面向对象”来说，我们关心的是汽车这类对象，两个事件只是这类对象所具有的行为。而且对于这两个行为的顺序没有强制要求。</p></li></ul><p>面向过程</p><blockquote><p>优点：性能高，因为类调用时需要实例化，开销比较大；比如单   片机、嵌入式开发、 Linux/Unix等一般采用面向过程开发，性能是最重要的因素。在程序较小的时候，面向过程就会体现出一种优势，其程序流程十分清楚。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p></blockquote><p>面向对象</p><blockquote><p>优点：易维护、易复用、易扩展，支持封装、继承、多态性的特性，可以设计出低耦合的系统<br />缺点：性能低</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的特征</title>
      <link href="/2020/04/3735727917.html"/>
      <url>/2020/04/3735727917.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="面向对象的特征"><a class="markdownIt-Anchor" href="#面向对象的特征"></a> 面向对象的特征</h4><ul><li><p>封装是指将某事物的属性和行为包装到对象中，这个对象可选择性的对外公开自己的属性和行为。具体来说，用private、protected、public三种修饰符或不用（即默认defalut）对外部对象的访问进行限制。</p></li><li><p>继承是子对象可以拥有父对象的属性和行为，其子对象也就拥有了这些属性和行为。</p></li><li><p>多态是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以按照自身需求<code>重写</code>父对象中的行为，使其拥有不同于父对象和其它子对象的表现。多态体现在overriding（重写）上，而overload（重载）不属于面向对象中多态的范畴，因为overload（重载）概念在非面向对象中也存在。</p><p>多态存在的三个必要条件：</p><ul><li>要有继承</li><li>要有重写</li><li>父类引用指向子类对象。</li></ul></li></ul><p>多态实现的两种方式：</p><ul><li>父类指针指向子类对象</li><li>将一个基类的引用类型赋值为它的派生类实例。</li></ul><blockquote><p>构造函数、析构函数不能被继承</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c语言中基本数据类型的大小和表示范围</title>
      <link href="/2020/04/1577022031.html"/>
      <url>/2020/04/1577022031.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="intdoublecharfloat空指针分别是几个字节"><a class="markdownIt-Anchor" href="#intdoublecharfloat空指针分别是几个字节"></a> int，double，char，float，空指针，分别是几个字节</h4><p>和机器字长及编译器有关：</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">32位编译器</th><th style="text-align:center">64位编译器</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">bool</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">true,false</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">-128 ~ 127</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">-128 ~ 127</td></tr><tr><td style="text-align:center">unsigned char</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0 ~ 255</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">-2^15 ~ 2^15-1</td></tr><tr><td style="text-align:center">unsigned short</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">0 ~ 2^16-1</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">-2^31 ~ 2^31-1</td></tr><tr><td style="text-align:center">unsigned int</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">0 ~ 2^32-1</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">二者不同</td></tr><tr><td style="text-align:center">unsigned long</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">二者不同</td></tr><tr><td style="text-align:center">long long</td><td style="text-align:center">8</td><td style="text-align:center">8</td><td style="text-align:center">-2^63 ~ 2^63-1</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">范围-3.4**10^38 ~ 3.4* *10^38-1<br/>精度为6~7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">8</td><td style="text-align:center">范围-1.7**10^308 ~ 1.7 *10^308-1<br/>精度为15~16位</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">12</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">二者不同</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">24</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p><code>整型</code>：表示整数、字符和布尔值的算术类型合称为整型（integral type）</p><p><code>关于long double</code>：80位是是C语言，ANSI/ISO标准规定的，128位出自谭浩强的书，具体位数的话取决于具体的平台 ，比如GNU g++里的“long double”，是96位。VC是64位等等</p><p><code>关于指针</code>：1.指针（指针变量）也是变量，是存储地址的变量。即：指针里装的是地址</p><p>​               2.指针占4字节（空指针也是4字节，只是里面的地址值是 0而已）（地址没有大小一说）</p><p>​</p><p><code>float与double的范围和精度</code></p><p><strong>范围</strong><br />float和double的范围是由指数的位数来决定的。<br />float的指数位有8位，而double的指数位有11位，分布如下：</p><blockquote><p>float：<br />1bit（符号位） 8bits（指数位） 23bits（尾数位）<br />double：<br />1bit（符号位） 11bits（指数位） 52bits（尾数位）</p></blockquote><p>于是，float的指数范围为-127<sub>+128，而double的指数范围为-1023</sub>+1024。</p><p>float的范围为-2^128 ~ +2^128，也即-3.40E+38 ~ +3.40E+38；</p><p>double的范围为-2^1024 ~ +2^1024，也即-1.79E+308 ~ +1.79E+308。</p><p><strong>精度</strong><br />float和double的精度是由尾数的位数来决定的。浮点数在内存中是按科学计数法来存储的，其整数部分始终是一个隐含着的“1”，由于它是不变的，故不能对精度造成影响。<br />float：2^23 = 8388608，一共七位，这意味着最多能有7位有效数字，但绝对能保证的为6位，也即float的精度为6~7位有效数字；<br />double：2^52 = 4503599627370496，一共16位，同理，double的精度为15~16位。</p><p>Java 支持的数据类型包括基本数据类型和引用类型。</p><p><strong>八种基本数据</strong>类型如下：</p><ul><li>整数值型：byte、short、int、long</li><li>字符型：char</li><li>浮点类型：float、double</li><li>布尔型：boolean</li></ul><p><strong>引用类型</strong>声明的变量是指该变量在内存中实际存储的是一个引用地址，实体在<code>堆</code>中。</p><ul><li><p>引用类型包括类、接口、数组等。</p><p>特别注意，String 是类，是引用类型而不是基本类型。</p></li></ul><p>c++相较于c，多了<strong>枚举类型enum</strong>和<strong>字符串类型string</strong>。<code>string是c++提供的一个类，而不是基本类型</code>。要使用string类，必须在程序中添加头文件string。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++中的构造函数与析构函数</title>
      <link href="/2020/04/2644606270.html"/>
      <url>/2020/04/2644606270.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>构造函数、析构函数不能被继承</p></blockquote><h1 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h1><p>​     <strong>构造函数</strong>主要用来在创建对象时完成对对象属性的一些初始化等操作, 当创建对象时, 对象会自动调用它的构造函数。一般来说, 构造函数有以下三个方面的作用:<br />​       ■ 给创建的对象建立一个标识符;<br />​       ■ 为对象数据成员开辟内存空间;<br />​       ■ 完成对象数据成员的初始化。<br />​<br /><strong>2. 默认构造函数</strong><br />​     当用户没有显式的去定义构造函数时, 编译器会为类生成一个默认的构造函数, 称为 “<strong>默认构造函数</strong>”, 默认构造函数不能完成对象数据成员的初始化, 只能给对象创建一标识符, 并为对象中的数据成员开辟一定的内存空间。不带参数,不包含函数代码。<br />​<br /><strong>3. 构造函数的特点</strong><br />​     无论是用户自定义的构造函数还是默认构造函数都主要有以下特点:<br />​       ①. 在对象被创建时自动执行;<br />​       ②. 构造函数的函数名与类名相同;<br />​       ③. 没有返回值类型、也没有返回值;<br />​       ④. 构造函数不能被显式调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#给Python程序员的注释: C++中的构造函数类似于Python中的 __init__ 方法.</span><br></pre></td></tr></table></figure><h1 id="析构函数"><a class="markdownIt-Anchor" href="#析构函数"></a> 析构函数</h1><p>与构造函数相反, 析构函数是在对象被撤销时被自动调用, 用于对成员撤销时的一些清理工作, 例如在前面提到的手动释放使用 new 或 malloc 进行申请的内存空间。析构函数具有以下特点:<br />■ 析构函数函数名与类名相同, 紧贴在名称前面用波浪号 ~ 与构造函数进行区分, 例如: <strong>~Point();</strong><br />■ 构造函数没有返回类型, 也不能指定参数, 因此析构函数只能有一个, 不能被重载;<br />■ 当对象被撤销时析构函数被自动调用, 与构造函数不同的是, 析构函数可以被显式的调用, 以释放对象中动态申请的内存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#给Python程序员的注释: C++中的析构函数类似于Python中的 __del__ 方法.</span><br></pre></td></tr></table></figure><p>当用户没有显式定义析构函数时, 编译器同样会为对象生成一个默认的析构函数, 但默认生成的析构函数只能释放类的普通数据成员所占用的空间, 无法释放通过 new 或 malloc 进行申请的空间, 因此有时我们需要自己显式的定义析构函数对这些申请的空间进行释放, 避免造成内存泄露。</p><p><strong>派生类中构造函数与析构函数，调用顺序</strong></p><p><strong>构造函数的调用顺序：</strong></p><p>基类构造函数----&gt;成员类对象构造函数----&gt;派生类构造函数。</p><p><strong>析构函数正好和构造函数相反。</strong></p><h5 id="为什么析构函数需要是虚函数"><a class="markdownIt-Anchor" href="#为什么析构函数需要是虚函数"></a> 为什么析构函数需要是虚函数？</h5><p>​将有可能作为父类的析构函数设置为虚函数，可以保证当释放掉基类指针时同时释放掉子类的空间，防止内存泄漏。</p><h5 id="为什么构造函数不能是虚函数"><a class="markdownIt-Anchor" href="#为什么构造函数不能是虚函数"></a> 为什么构造函数不能是虚函数？</h5><p>​构造函数在进行调用时还不存在父类和子类的概念，因此不存在动态绑定的概念。</p><h5 id="为什么静态函数不能是虚函数"><a class="markdownIt-Anchor" href="#为什么静态函数不能是虚函数"></a> 为什么静态函数不能是虚函数？</h5><p>​静态成员函数是以类为单位的函数，与具体对象无关，虚函数是与对象动态绑定的。</p><blockquote><p><a href="https://www.cnblogs.com/mr-wid/archive/2013/02/19/2917911.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/mr-wid/archive/2013/02/19/2917911.html</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c、c++、Java编程语言的对比</title>
      <link href="/2020/04/715736860.html"/>
      <url>/2020/04/715736860.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h6 id="什么是编程"><a class="markdownIt-Anchor" href="#什么是编程"></a> 什么是编程</h6><p>编程即程序员根据需求把自己的思想流程按照某种编程语言的规范编写下来，产生的结果就是包含字符的文件。</p><h6 id="编程的目的"><a class="markdownIt-Anchor" href="#编程的目的"></a> 编程的目的</h6><p>计算机的发明，是为了用机器解放人力，而编程的目的则是将人类的思想流程按照某种能够被计算机识别的表达方式传递给计算机，从而达到让计算机能够像人脑一样自动执行的结果。</p><h6 id="什么是编程语言"><a class="markdownIt-Anchor" href="#什么是编程语言"></a> 什么是编程语言</h6><p>上面提及的<code>能够被计算机识别的表达方式</code>即编程语言。编程语言是程序员与计算机沟通的介质。</p><a id="more"></a><h4 id="java与cc的区别"><a class="markdownIt-Anchor" href="#java与cc的区别"></a> Java与c/c++的区别</h4><ul><li><p>c是面向过程的语言。c++和Java都是面向对象的。在c中没有类或者对象的概念。</p></li><li><p><strong>跨平台</strong>：java运行在虚拟机上，与平台无关。c和c++都是直接编译成可执行文件，是否能跨平台主要看你用到的编译器特性是否有多平台支持。</p></li><li><p><strong>内存管理与垃圾回收</strong>：java因为是运行在虚拟机上，具有内存管理和垃圾回收机制。而c和c<ins>语言如果用到指针就一定要考虑内存申请和释放。内存泄漏是c和c</ins>最头疼的问题。C++使用显式的存储管理，析构函数。</p></li><li><p><strong>指针</strong>：C/C++需要程序员手动操作指针；而Java 不提供指针来直接访问内存，程序内存更加安全。</p></li><li><p>**多继承：**Java 的类是单继承的，C++ 支持多重继承；但Java 的接口可以多继承。</p></li><li><p><strong>运行效率</strong>：因为c和c++是直接编译成可执行文件，所以运行效率要比java高。</p></li><li><p><strong>适用范围</strong>：c：偏底层和硬件，基本上所有的操作系统都是用C写的。</p><p>​                   c++：c能用的地方它都能用，此外还应用于大型游戏等追求速度的应用。</p></li></ul><p>​                           Java：应用于网络WEB开发，手机软件、游戏。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些“区别”</title>
      <link href="/2020/04/2735690565.html"/>
      <url>/2020/04/2735690565.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数组和结构体的区别"><a class="markdownIt-Anchor" href="#数组和结构体的区别"></a> 数组和结构体的区别</h3><p>数组、结构体都是自建的数据结构，二者是相似的，但也有区别，其区别是：</p><ul><li><p>数组内部数据类型相同，结构体内部数据可以不同；</p></li><li><p>数组按下标访问，结构体因为数据类型不同，，只能使用<code>类名.变量名</code>来访问；</p></li></ul><h3 id="struct结构体和union共同体的异同点"><a class="markdownIt-Anchor" href="#struct结构体和union共同体的异同点"></a> struct结构体和union共同体的异同点</h3><p><strong>相同点：</strong></p><ul><li>都是由多个不同的数据类型成员组成</li></ul><p><strong>不同点：</strong></p><ul><li><p>在struct中，每个成员都有自己的内存，它们同时存在，</p><p>在union中，所有成员不能同时占用各自的一块内存，因此不能同时存在，只能存在一个</p></li><li><p>struct的长度为所有成员长度之和，union的长度为最长成员的长度</p></li><li><p>对struct的不同成员之间的赋值互不影响，而union不同成员赋值会重写其他成员</p></li></ul><h3 id="c中结构体和类的区别"><a class="markdownIt-Anchor" href="#c中结构体和类的区别"></a> C++中结构体和类的区别</h3><ul><li><p>默认继承权限<br />class 的默认继承权限是 <code>private</code> ；struct的默认继承权限是 <code>public</code></p></li><li><p>成员的默认访问权限<br />​class 定义的成员变量和函数的都是 <code>private</code> ；struct定义的变量和成员函数都是 <code>public</code></p></li></ul><p>另：在C语言中 struct 只能定义数据成员，而不能定义成员函数。而在C++中，struct 类似于class，既可以定义成员变量，也可以定义成员函数.</p><h3 id="数组与链表的区别"><a class="markdownIt-Anchor" href="#数组与链表的区别"></a> 数组与链表的区别</h3><ul><li>数组静态分配内存；链表动态分配内存；</li><li>数组在内存中连续；链表可以不连续；</li><li>数组元素在栈区；链表元素在堆区；</li><li>数组利用下标定位，时间复杂度为O(1)；链表定位元素时间复杂度O(n)；</li><li>数组插入或删除元素的时间复杂度O(n)；链表的时间复杂度O(1)。</li></ul><h3 id="数组与指针的区别"><a class="markdownIt-Anchor" href="#数组与指针的区别"></a> 数组与指针的区别</h3><ol><li><p>数组：<strong>对应</strong>一块内存区域。其地址和大小在生命期里不会改变，只有数组的内容可以改变。</p><p>指针：<strong>指向</strong>一块内存区域。它指向的内存区域的大小可以随时改变，当指针指向字符串时，它的内容是不可以被修改的，否则在运行时会报错。</p></li><li><p>用运算符sizeof可以计算出数组的容量（字节数），而无法计算指针所指内存的容量，得到的结果永远4（即指针变量所占内存单元的字节数）</p></li><li><p>在进行参数传递时，数组会自动退化为同类型的指针。</p></li></ol><h3 id="指针和引用的区别"><a class="markdownIt-Anchor" href="#指针和引用的区别"></a> 指针和引用的区别</h3><ul><li>指针是变量，存放地址的变量，占用4Byte或者8Byte；引用是对象的别名，大小为被引用对象的大小。</li><li>指针可以为空，可以声明之后再初始化，初始化后可以再改变；引用必须在声明的时候初始化，而且初始化之后不可再改变</li><li>指针可以有多级，引用只能是一级</li><li>指针和引用的自增(++)运算意义不一样。指针自增表示地址加1，引用自增表示值加1</li></ul><h3 id="数组指针和指针数组"><a class="markdownIt-Anchor" href="#数组指针和指针数组"></a> 数组指针和指针数组</h3><ul><li>int (*ptr)[5]，数组指针相当于二维数组，也就是指针的指针</li><li>int *ptr[5]，  指针数组是一个数组，数组存放的元素为指针</li></ul><h3 id="strlen和sizeof的区别"><a class="markdownIt-Anchor" href="#strlen和sizeof的区别"></a> strlen和sizeof的区别</h3><ul><li>strlen是函数，在运行时才能计算，返回字符串的长度，必须以‘\0’结尾</li><li>sizeof是运算符，在编译时就计算好了。</li></ul><h3 id="define与const的区别"><a class="markdownIt-Anchor" href="#define与const的区别"></a> #define与const的区别</h3><ul><li>define不会做类型检查（容易出错），const拥有类型，会执行相应的类型检查</li><li>define仅仅是宏替换，不占用内存，而const会占用内存</li><li>const内存效率更高，编译器可能将const变量保存在符号表中，而不会分配存储空间，这使得它成 为一个编译期间的常量，没有存储和读取的操作</li></ul><h3 id="new和malloc的区别"><a class="markdownIt-Anchor" href="#new和malloc的区别"></a> new和malloc的区别</h3><ul><li>new按照数据类型进行分配，malloc 按照指定的大小分配</li><li>new返回的是指定对象的指针，而malloc返回的是void*，因此malloc的返回值一般都需要进行类型转化。</li><li>new 不仅分配一段内存，而且会调用构造函数，malloc 不会。</li><li>new分配的内存要用delete销毁，malloe 要用free来销毁；delete 会调用对象的析构函数，而free则不会。</li><li>new是一个操作符可以重载，malloc 是一个库函数。</li><li>malloc分配的内存不够的时候，可以用realloc扩容。 new没用这样操作。</li><li>new 如果分配失败了会抛出bad_malloc 的异常，而malloc失败了会返回NULL.</li><li>申请数组时： new[]一次分配所有内存， 多次调用构造函数，搭配使用delete[], delete[]多次调用析构函数，销毁数组中的每个对象。而malloc则只能sizeof(int) * n.</li></ul><h3 id="逻辑结构与物理结构"><a class="markdownIt-Anchor" href="#逻辑结构与物理结构"></a> 逻辑结构与物理结构</h3><ul><li><h5 id="操作系统中的"><a class="markdownIt-Anchor" href="#操作系统中的"></a> 操作系统中的</h5></li></ul><p>逻辑结构：指一个文件在用户面前所呈现的形式.</p><p>​分类：①记录式文件(有结构式文件).<br />​②流式文件（无结构式文件）</p><p>物理结构：指文件在文件存储器上的存储形式.<br />分类：①连续文件结构<br />　②串联文件结构<br />​③索引文件结构<br />​④散列文件结构</p><ul><li><h5 id="数据结构中的"><a class="markdownIt-Anchor" href="#数据结构中的"></a> 数据结构中的</h5></li></ul><p>见另一文件</p><h3 id="逻辑文件和物理文件"><a class="markdownIt-Anchor" href="#逻辑文件和物理文件"></a> 逻辑文件和物理文件</h3><ul><li>逻辑文件是数据的一种视图形式，不包含具体数据，但包含数据的索引</li><li>物理文件是文件在外存上的存储组织形式</li></ul><h3 id="机器语言-汇编语言和高级语言有何区别"><a class="markdownIt-Anchor" href="#机器语言-汇编语言和高级语言有何区别"></a> 机器语言、汇编语言和高级语言有何区别？</h3><ul><li>机器语言：站在计算机的角度，说计算机能听懂的语言。就是直接用二进制编程，直接操作硬件。</li><li>汇编语言：站在计算机的角度，用简写的英文标识符取代二进制去编写程序，本质上仍然是直接操作硬件。</li><li>高级语言：站在人的角度，说人话，即用人类的字符去编写程序，屏蔽了硬件操作。</li></ul><h3 id="c对于对象的动态建立与静态建立"><a class="markdownIt-Anchor" href="#c对于对象的动态建立与静态建立"></a> C++对于对象的动态建立与静态建立</h3><ul><li><p>静态建立，例如 A a;<br />由编译器为对象在栈空间中分配内存。这种方法是直接调用类的构造函数。</p></li><li><p>动态建立，例如 A* a = new A();<br />使用new运算符为对象在堆空间中分配内存。这种方法是间接调用类的构造函数。</p><blockquote><p>第一步：执行operator new( )函数，在堆空间中搜索一块内存并进行分配</p><p>第二步：调用类的构造函数构造对象</p></blockquote></li></ul><p><strong>使用场景选择：</strong></p><p>​静态对象由于是在栈中生成的，因而比动态的效率要高，而且不会造成内存泄露。静态较好<br />但标明动态对象的是一个指针，而标明静态对象的是一个值。当对象作为参数时，动态更好<br />另外，如果对象要在多个函数中使用，或者要在一个函数中建立，而在另一个函数中使用，动态更好</p><h3 id="java变量的静态绑定与动态绑定"><a class="markdownIt-Anchor" href="#java变量的静态绑定与动态绑定"></a> Java变量的静态绑定与动态绑定</h3><ul><li>静态绑定发生在编译时期；动态绑定发生在运行时</li><li>静态绑定使用类信息完成；动态绑定使用对象信息完成</li><li>使用static或final修饰的，为静态绑定；使用虚函数的，为动态绑定</li><li>重载的方法为静态绑定；重写的方法为动态绑定</li></ul><h3 id="并行与并发的区别"><a class="markdownIt-Anchor" href="#并行与并发的区别"></a> 并行与并发的区别</h3><ul><li><p>并发是指宏观上在一段时间内能同时运行多个程序，在微观上，只是把这段时间再分成若干段，使多个进程快速交替的执行，使看起来像是在同时运行。</p></li><li><p>并行则指同一时刻能运行多个指令。无论从微观还是宏观，二者都是一起执行的。多处理机可以并行</p></li></ul><blockquote><p>从以上本质不难看出，“并发”执行，在多个进程而存在<code>资源冲突</code>时，并没有从根本提高执行效率。</p></blockquote><h3 id="内连接和外连接的区别"><a class="markdownIt-Anchor" href="#内连接和外连接的区别"></a> 内连接和外连接的区别</h3><p><code>join：将多个表连接起来查询。包括内连接与外连接</code></p><p>内连接是保证两个表中所有的行都要满足连接条件，而外连接则不然。</p><p>外连接在查询时，表有主从之分。如果符合连接条件则返回到结果集中；如果没有找到区配行，则在结果集中仍然保留主表的行，相对应的从表中的列被填上NULL值。</p><p>外连接分左连接（主表为左表）、右连接（…）、全连接三种。</p><blockquote><p><strong>注意</strong>：</p><p>内连接：A表的所有行<strong>交</strong>上B表的所有行得出的结果集</p><p>全连接：A表的所有行<strong>并</strong>上B表的所有行得出的结果集</p></blockquote><h3 id="等值连接和自然连接的区别"><a class="markdownIt-Anchor" href="#等值连接和自然连接的区别"></a> 等值连接和自然连接的区别</h3><ul><li>等值连接使用’==‘符号，它是从两个关系的笛卡尔积中选出属性值相等的那些元组。</li><li>自然连接是一种特殊的等值连接。它要求去除重复列。</li></ul><h3 id="缓存cache和缓冲buffer的区别"><a class="markdownIt-Anchor" href="#缓存cache和缓冲buffer的区别"></a> 缓存（Cache）和缓冲（Buffer）的区别</h3><ul><li><p>cache 是为了提高cpu和内存之间的数据交换速度而引入的中间层，具体是利用局部性原理，把常用数据存储到可以快速获取的区域，以备重复利用。起到<strong>加快访问速度</strong>的作用。</p></li><li><p>buffer 的主要目的进行流量整形，把突发的大数量较小规模的 I/O 整理成平稳的小数量较大规模的 I/O，以<strong>减少I/O次数</strong>（比如从网上下电影，你不能下一点点数据就写一下硬盘，而是积攒一定量的数据以后一整块一起写，减少I/O次数）。</p></li></ul><h3 id="虚拟存储器和cache存储器的异同"><a class="markdownIt-Anchor" href="#虚拟存储器和cache存储器的异同"></a> 虚拟存储器和Cache存储器的异同</h3><ul><li><p>相同点</p><ul><li>都是基于程序局部性原理，把程序中最近常用的部分驻留在高速存储器中，一旦这部分程序不常用，把它们送回到低速存储器中。</li></ul></li><li><p>不同点</p><ul><li>cache是用硬件实现的，是一个物理存储器；虚拟存储用操作系统与硬件结合的方式实现，是一个逻辑存储器。</li><li>在虚拟存储未命中的性能损失要大于cache系统未命中的损失。</li></ul></li></ul><h3 id="栈和队列的异同"><a class="markdownIt-Anchor" href="#栈和队列的异同"></a> 栈和队列的异同</h3><p>相同点：</p><ul><li>都是线性结构。</li><li>插入操作都是限定在表尾进行。</li><li>都可以通过顺序结构和链式结构实现。</li><li>插入与删除的时间复杂度都是O（1），在空间复杂度上两者也一样。</li></ul><p>不同点：</p><ul><li><p>一个是单端操作，一个是双端操作</p></li><li><p>栈能够实现多栈空间共享，而队列不能。</p></li><li><p>应用场景不同。栈：括号匹配、表达式的转换和求值、函数调用和递归实现、深度优先搜索遍历等；</p><p>​   队列：打印机、广度优先搜索遍历等。</p></li></ul><h3 id="堆和栈的区别"><a class="markdownIt-Anchor" href="#堆和栈的区别"></a> 堆和栈的区别</h3><ul><li><p>按管理方式</p><ul><li>栈是系统编译器启动管理，不需要程序员手动管理</li><li>堆的释放由程序员手动管理，不及时回收容易产生内存泄露</li></ul></li><li><p>按分配方式</p><ul><li>栈有两种分配方式：静态分配和动态分配</li><li>堆是动态分配和回收内存的，没有静态分配的堆</li></ul></li><li><p>按分配大小</p><ul><li>栈是向低地址扩展的数据结构，是一块连续的内存区域</li><li>堆是向高地址扩展的数据结构，是不连续的内存区域</li></ul></li><li><p>按存储内容</p><ul><li>栈：存放函数的参数值，局部变变量的值等。</li><li>堆：new或者malloc出来的东西</li></ul></li></ul><h3 id="指令和程序的区别"><a class="markdownIt-Anchor" href="#指令和程序的区别"></a> 指令和程序的区别</h3><p>指令是指挥计算机执行各种操作的命令。程序是一组能由计算机识别和执行的指令序列。</p><blockquote><p>一条指令通常由两个部分组成：操作码+地址码。</p></blockquote><h3 id="数据库和数据仓库的区别"><a class="markdownIt-Anchor" href="#数据库和数据仓库的区别"></a> 数据库和数据仓库的区别</h3><blockquote><p>数据库主要用于<strong>事务处理</strong>；数据仓库主要用于<strong>数据分析</strong>。</p></blockquote><p>用途上的不同决定了这两种架构的特点不同。</p><p>数据库：</p><ul><li>相对复杂的表格结构，存储结构相对紧致，少冗余数据。</li><li>读和写都有优化。</li><li>相对简单的read/write query，单次作用于相对的少量数据。</li></ul><p>数据仓库：</p><ul><li>相对简单的(Denormalized)表格结构，存储结构相对松散，多冗余数据。</li><li>一般只是读优化。</li><li>相对复杂的read query，单次作用于相对大量的数据（历史数据）。</li></ul><h2 id="varchar和char的使用场景"><a class="markdownIt-Anchor" href="#varchar和char的使用场景"></a> varchar和char的使用场景</h2><ul><li><p>varchar字符长度可变，但是不能超过设置的长度</p></li><li><p>char字符长度不可变，固定长度</p></li></ul><blockquote><p>一般设置登录名可以使用varchar，而<code>加密后的</code>密码一般设置为char，因为加密算法的结果是固定长度的。</p></blockquote><h2 id="乐观锁和悲观锁"><a class="markdownIt-Anchor" href="#乐观锁和悲观锁"></a> 乐观锁和悲观锁</h2><ul><li>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作;</li><li>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</li></ul><h2 id="分区与分表的区别"><a class="markdownIt-Anchor" href="#分区与分表的区别"></a> 分区与分表的区别</h2><ul><li>分区：将一张表分解成多个更小的部分。从逻辑上看，还是一张表，但是底层却是由多个物理分区组成。</li><li>分表：指的是通过一定规则，将一张表分解成多张不同的表。</li></ul><blockquote><p>分表与分区的区别在于：分区从逻辑上来讲只有一张表，而分表则是将一张表分解成多张表。</p></blockquote><h3 id="重写和重载的区别"><a class="markdownIt-Anchor" href="#重写和重载的区别"></a> 重写和重载的区别</h3><ul><li><p>重写是子类根据自己的需要对父类的允许访问的方法的重新编写, 返回值和形参都不能改变。即<strong>外壳不变，核心重写</strong>！</p><blockquote><p>子类方法不能比父类的访问权限更严格。<br />子类方法不能抛出比父类方法更多的异常</p></blockquote></li><li><p>重载是在一个类里面，存在多个名字相同，而参数列表不同的函数。其返回类型可以相同也可以不同。</p></li></ul><blockquote><p><code>方法的重写和重载是多态性的不同表现。</code><br /><code>重写是父类与子类之间多态性的一种表现；重载是一个类中多态性的一种表现。</code></p></blockquote><h3 id="c中的map与set的区别"><a class="markdownIt-Anchor" href="#c中的map与set的区别"></a> c++中的map与set的区别</h3><p>map和set都是C++的关联容器，其底层实现都是红黑树（RB-Tree）。</p><p>map和set区别在于：</p><ul><li>map中的元素是键值对，关键字起到索引的作用；Set每个元素只包含一个关键字。</li><li>map允许修改value，但不允许修改key。set的迭代器是const的，不允许修改元素的值。</li><li>map支持下标操作，set不支持下标操作。</li></ul><blockquote><p>Collection<br />├-<strong>List</strong>（有序有重）<br />│ ├-LinkedList<br />│ ├-ArrayList<br />│ └-Vector<br />│　 └-Stack<br />└<strong>Set</strong>（无序无重）<br />├-HashSet<br />└-TreeSet<br /><strong>Map</strong>（无序。键值对映射，值可以重复，但键不可以重复）<br />├-Hashtable<br />├-HashMap<br />└-TreeMap</p><blockquote><p>Set的底层实现是Map，所以是无序的；又因为在Map中key的值不能重复，所以set中的元素不能重复。</p></blockquote></blockquote><h3 id="静态链接与动态链接的区别"><a class="markdownIt-Anchor" href="#静态链接与动态链接的区别"></a> 静态链接与动态链接的区别</h3><ul><li><p>在链接阶段，将汇编生成的.o目标文件与引用到的库一起链接打包到可执行文件中。</p><p>程序在运行时与函数库再无瓜葛，<strong>易于移植</strong>。</p></li><li><p>动态库把对库函数的链接推迟到程序运行时。可以实现进程之间的<strong>资源共享</strong>。</p><p>因此动态库也称为共享库</p></li></ul><h3 id="内存溢出与内存泄漏的区别"><a class="markdownIt-Anchor" href="#内存溢出与内存泄漏的区别"></a> 内存溢出与内存泄漏的区别</h3><ul><li><p>内存溢出：指程序申请内存时，没有足够的内存供申请者使用。</p></li><li><p>内存泄漏：指未能及时释放掉已经申请的但不再使用的内存。</p><blockquote><p>c++使用varglind、mtrace来处理内存泄漏</p></blockquote></li></ul><h3 id="uri和url的区别"><a class="markdownIt-Anchor" href="#uri和url的区别"></a> URI和URL的区别</h3><ul><li><p>URI(Identifier，统一资源标识符)，用来唯一的标识一个Web上的资源。</p></li><li><p>URL(Locator，统一资源定位符)，用来标识一个资源，而且还指明了如何寻找这个资源。</p><p>URL一般由三部组成：   例如：<code>https://host:port/path?xxx=aaa&amp;ooo=bbb</code></p><ol><li>协议(或称为服务方式)</li><li>存有该资源的主机IP地址(有时也包括端口号)</li><li>主机资源的访问路径。如目录和文件名等</li></ol></li></ul><p>​</p><h3 id="cookies和session区别"><a class="markdownIt-Anchor" href="#cookies和session区别"></a> Cookies和Session区别</h3><ul><li>cookie数据存放在浏览器上；session数据存放在服务器上</li><li>cookie是不安全的，别人可以分析存放在本地的cookie进行cookie欺骗</li><li>当访问量大时，session会占用服务器空间，影响性能</li></ul><h3 id="post与get的异同"><a class="markdownIt-Anchor" href="#post与get的异同"></a> post与get的异同</h3><ul><li><p>相同点</p><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP。GET和POST能做的事情是一样的。</p><p>你要给GET加上request body，给POST带上url参数，技术上是完全行的通的</p></li><li><p>不同点</p><ul><li>get用来从服务器上获得资源；post是向服务器提交数据</li><li>get将数据放在url上，使用&quot;?&quot;、&quot;&amp;&quot;连接；post将数据放在http协议的请求头或消息体中</li><li>get传输的数据要受到url长度限制(1024字节)；post可以传输大量数据</li><li>使用get时参数会显示在地址栏中，不安全</li></ul></li></ul><h3 id="cs和bs的区别"><a class="markdownIt-Anchor" href="#cs和bs的区别"></a> CS和BS的区别</h3><p><strong>CS:</strong> 即客户端、服务器编程。客户端、服务端之间需要使用Socket，约定数据格式、协议（往往使用的协议是TCP或者UDP），指定地址和端口，就可以通信了。</p><p><strong>BS:</strong> 即浏览器、服务器开发。Browser浏览器是一种特殊的客户端，支持HTTP(s)等协议，能够通过URL向服务端发起请求，等待服务端返回HTML等数据，并在浏览器内可视化展示的程序。</p><blockquote><p>本质上来说，BS是一种特殊的CS。HTTP协议底层基于TCP协议实现。</p></blockquote><h5 id="bs开发常用的技术"><a class="markdownIt-Anchor" href="#bs开发常用的技术"></a> BS开发常用的技术</h5><p>客户端开发，或称前端开发。<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>等…<br />服务端开发，有<code>Java</code>、<code>.net</code>、<code>Python中的Django框架</code>等…</p><h3 id="路由器和交换机的区别"><a class="markdownIt-Anchor" href="#路由器和交换机的区别"></a> 路由器和交换机的区别</h3><ul><li><p>路由器：作用在网络层。根据包头中的目标IP在路由表中寻找，由IP和子网掩码得出网络号，然后在路由表中的“目标地址项中的IP按位从左向右与刚刚算出的网络号对比，如果相同，就将包从此条记录的对应的“接口”选项发出去。</p></li><li><p>交换机：作用在数据链路层。根据包头中的MAC地址，在交换机内部的MAC地址表，找到该MAC地址对应的端口，然后将包从该端口（一个端口对应一个MAC地址）发送出去。</p></li></ul><h3 id="key和index的区别"><a class="markdownIt-Anchor" href="#key和index的区别"></a> key和index的区别</h3><ul><li><p>KEY是逻辑级别的东西，描述表和数据库设计</p></li><li><p>INDEX是物理级别的东西，有助于缩短表操作的访问时间。</p></li></ul><h3 id="重定向和转发的区别"><a class="markdownIt-Anchor" href="#重定向和转发的区别"></a> 重定向和转发的区别</h3><ul><li><p>转发是在服务器端的跳转，浏览器并不知情，地址栏不会改变。</p><p>具体：浏览器向服务器发送一个请求，服务器直接将请求相关的参数的信息原封不动的传递到该服务器的其他jsp或servlet去处理</p></li><li><p>而重定向是在浏览器的跳转，浏览器知情，地址栏变成重定向后的地址。</p><p>具体：服务器会返回给浏览器一个响应报头和新的URL地址，原来的参数或者其他的一些信息，如果服务器端没有特别处理就不存在了，浏览器会访问新的URL所指向的servlet 或 jsp。</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>程序执行过程</title>
      <link href="/2020/04/420662040.html"/>
      <url>/2020/04/420662040.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>解释型语言：源代码不是直接翻译成机器语言，而是先翻译成中间代码，再由解释器对中间代码进行解释运行。比如Python/JavaScript / Perl /Shell等都是解释型语言。</p><p>编译型语言**：**程序不需要编译，程序在运行时才翻译成机器语言，每执行一次都要翻译一次。像C/C++等都是编译型语言。</p><a id="more"></a><h3 id="cc"><a class="markdownIt-Anchor" href="#cc"></a> C/C++</h3><p>对于C/C++编写的程序，从源代码到可执行文件，一般经过下面四个步骤：</p><ul><li>预处理，产生.i文件</li><li>编译，产生汇编文件(.s文件)</li><li>汇编，产生目标文件(.o或.obj文件)</li><li>链接，产生可执行文件(.out或.exe文件)</li></ul><p>预处理阶段：头文件、宏替换、注释删除等。。。</p><p>编译阶段：对预处理完的文件进行一系列词法分析，语法分析，语义分析及优化后生成相应的汇编代码文件</p><p>汇编阶段：将汇编代码转变成机器可以执行的代码，即目标文件。</p><p>链接阶段：将多个目标文件及所需要的库连接成最终的可执行目标文件。</p><h3 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h3><ul><li>源文件（.java）由编译器（javac）编译成字节码（.class）</li><li>字节码被JVM的类加载器加载到内存，通过字节码校验器去做一些校验，校验通过后把每一条要执行的字节码交由<strong>解释器</strong>，翻译成对应的<strong>机器语言</strong>，最终由操作系统执行。</li></ul><p>校验内容：</p><blockquote><ul><li>变量要在使用前初始化</li><li>方法调用与对象引用类型之间要匹配</li><li>访问私有数据和方法的规则没有被违反</li><li>对本地变量的访问都在运行的堆栈内</li><li>运行时堆栈没有溢出</li></ul></blockquote><h5 id="一个由cc编译的程序占用的内存分为以下几个部分"><a class="markdownIt-Anchor" href="#一个由cc编译的程序占用的内存分为以下几个部分"></a> 一个由C/C++编译的程序占用的内存分为以下几个部分：</h5><ul><li>栈区（stack）:—由编译器自动分配释放，存放函数的参数值，局部变量的值等。可静态也可动态分配。其操作方式类似于数据结构中的栈。</li><li>堆区（heap）:一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。动态分配。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</li><li>全局区（静态区）:—程序结束后由系统释放，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域；未初始化的全局变量和静态变量在相邻的另一块区域(BSS，Block Started by Symbol)，在程序执行之前BSS段会自动清0。</li><li>文字常量区:—程序结束后由系统释放，常量字符串就是放在这里的。</li><li>程序代码区:—存放函数体的二进制代码。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库的三层模式和两级映射</title>
      <link href="/2020/04/1566758073.html"/>
      <url>/2020/04/1566758073.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>为了保障数据与程序之间的独立性。所以通常DBMS将数据库的体系结构分为三级模式。</p><h4 id="三级模式"><a class="markdownIt-Anchor" href="#三级模式"></a> 三级模式</h4><ul><li>外模式</li><li>模式</li><li>内模式</li></ul><p><code>一个数据库可以用很多外模式，但只能有一个模式和内模式</code></p><p>为了能够实现在这3个抽象层次之间的联系和转换，数据库管理系统在三级模式中提供了两层映射</p><h4 id="两层映射"><a class="markdownIt-Anchor" href="#两层映射"></a> <strong>两层映射</strong></h4><h6 id="1外模式模式映射"><a class="markdownIt-Anchor" href="#1外模式模式映射"></a> 1.外模式/模式映射</h6><p>​对于同一个模式可以有任意多个外模式。对于每一个外模式，数据库系统都有一个外模式/模式映射。当模式被改变时，数据库管理员对各个外模式/模式映射做相应的改变，可以使外模式保持不变。这样，依据数据外模式编写的应用程序就不用修改，保证了数据与程序的逻辑独立性。</p><p>​总结：外模式/模式映射保证了当模式改变时，外模式不用变，即<code>逻辑独立性</code>。</p><h6 id="2模式内模式映射"><a class="markdownIt-Anchor" href="#2模式内模式映射"></a> 2.模式/内模式映射</h6><p>​数据库中只有一个模式和一个内模式，所以模式/内模式的映射是唯一的，它定义了数据库的全局逻辑结构与存储结构之间的对应关系。当数据库的存储结构被改变时，数据库管理员对模式/内模式映射做相应的改变，可以使模式保持不变，应用程序相应地也不做变动。这样，保证了数据与程序的物理独立性。</p><p>​总结：模式/内模式映射保证了当内模式改变时，模式不用变，即<code>物理独立性</code>。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java发送邮件</title>
      <link href="/2020/04/569620930.html"/>
      <url>/2020/04/569620930.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用Java应用程序发送 E-mail 十分简单，程序依赖于两个必需的jar包 。</p><ul><li>您可以从 Java 网站下载最新版本的 <a href="http://www.oracle.com/technetwork/java/javamail/index.html" target="_blank" rel="noopener external nofollow noreferrer">JavaMail</a>，打开网页右侧有个 <strong>Downloads</strong> 链接，点击它下载。</li><li>您可以从 Java 网站下载最新版本的 <a href="http://www.oracle.com/technetwork/articles/java/index-135046.html" target="_blank" rel="noopener external nofollow noreferrer">JAF（版本 1.1.1）</a>。</li></ul><p>你也可以使用本文提供的下载链接：</p><ul><li><a href="http://static.runoob.com/download/mail.jar" target="_blank" rel="noopener external nofollow noreferrer">JavaMail mail.jar（版本  1.4.5）</a></li><li><a href="http://static.runoob.com/download/activation.jar" target="_blank" rel="noopener external nofollow noreferrer">activation.jar      （版本  1.1.1）</a></li></ul><p> </p><p><strong>关于邮件开发中的主要函数和参数：</strong></p><p><img src= "/img/loading.gif" data-src="http://img.blog.csdn.net/20161105094658308" alt="JavaMail" /></p><a id="more"></a><blockquote><p>图源：<a href="https://jackchan1999.github.io/2017/05/01/javaweb/JavaMail/" target="_blank" rel="noopener external nofollow noreferrer">https://jackchan1999.github.io/2017/05/01/javaweb/JavaMail/</a></p></blockquote><p> </p><p>因为在程序开发中使用邮件的目的多是发送验证码，我把生成验证码的函数分离出来，作为单独的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">regCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">rand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sources = <span class="string">"0123456789"</span>; <span class="comment">// 加上一些字母，就可以生成带字母的验证码</span></span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuffer flag = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">            flag.append(sources.charAt(rand.nextInt(<span class="number">9</span>)) + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><p>关于QQ邮箱，还要设置SSL加密；163邮箱便不需要。下面的代码是基于<code>QQ邮箱</code>。</p><p>此外，对于邮件内容，可以是正常的文本，也可以是HTML文本，当然，也要有<code>添加附件</code>的需求。在程序中，均会给出解决方案。<code>注释很详细。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String regcode = Utils.regCode.rand(); <span class="comment">//获取验证码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> GeneralSecurityException, MessagingException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 收件人电子邮箱</span></span><br><span class="line">        String tomail = <span class="string">"han-suyu@foxmail.com"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发件人电子邮箱</span></span><br><span class="line">        <span class="keyword">final</span> String frommail = <span class="string">"1121687782@qq.com"</span>;    <span class="comment">//邮箱账号</span></span><br><span class="line">        <span class="keyword">final</span> String fromcode = <span class="string">"XXXXXXXXXXXXXXXXX"</span>;     <span class="comment">//邮箱授权码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定发送邮件的主机为 smtp.qq.com</span></span><br><span class="line">        String host = <span class="string">"smtp.qq.com"</span>; <span class="comment">// QQ 邮件服务器,如果发件人为网易邮箱，则为"smtp.163.com"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统属性</span></span><br><span class="line">        Properties properties = System.getProperties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置邮件服务器</span></span><br><span class="line">        properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        properties.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">// 关于QQ邮箱，还要设置SSL加密</span></span><br><span class="line">        MailSSLSocketFactory sf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">        sf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">        properties.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, sf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取默认session对象</span></span><br><span class="line">        Session session = Session.getDefaultInstance(properties, <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(frommail, fromcode); <span class="comment">//发件人用户名、密码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建默认的 MimeMessage 对象</span></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set From: 头部头字段</span></span><br><span class="line">        message.setFrom(<span class="keyword">new</span> InternetAddress(frommail));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set To: 头部头字段</span></span><br><span class="line">        message.addRecipient(Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress(tomail));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set Subject: 头部头字段</span></span><br><span class="line">        message.setSubject(<span class="string">"这里是主题"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//邮件内容</span></span><br><span class="line"><span class="comment">/***************************************************************************************/</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//支持附件的邮件</span></span><br><span class="line">        <span class="comment">//创建多元素容器</span></span><br><span class="line">        MimeMultipart list = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本部分</span></span><br><span class="line">        MimeBodyPart part1 = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        part1.setContent(<span class="string">"&lt;h3&gt;验证码为:&lt;/h3&gt;"</span>+ regcode,<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        list.addBodyPart(part1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建附件部分</span></span><br><span class="line">        MimeBodyPart part2 = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        part2.attachFile(<span class="keyword">new</span> File(<span class="string">"D:/测试.jpg"</span>));<span class="comment">//设置附件的内容</span></span><br><span class="line">        <span class="comment">//设置显示的文件名称，其中encodeText用来处理中文乱码问题</span></span><br><span class="line">        part2.setFileName(MimeUtility.encodeText(<span class="string">"测试图片.txt"</span>));  </span><br><span class="line">        list.addBodyPart(part2); <span class="comment">// 把主体部件添加到集合中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把整个容器加入到邮件中</span></span><br><span class="line">        message.setContent(list);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//只有文本的邮件</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *          // 设置文字消息</span></span><br><span class="line"><span class="comment"> *         message.setText("此次验证码为:" + regcode);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         // 发送 HTML 消息, 可以插入html标签</span></span><br><span class="line"><span class="comment"> *         message.setContent("&lt;h1&gt;This is actual message&lt;/h1&gt;","text/html" );</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">/***************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        Transport.send(message);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"邮件发送成功...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><p> </p><blockquote><p>参考：</p><p><a href="https://jackchan1999.github.io/2017/05/01/javaweb/JavaMail/" target="_blank" rel="noopener external nofollow noreferrer">https://jackchan1999.github.io/2017/05/01/javaweb/JavaMail/</a></p><p><a href="https://www.runoob.com/java/java-sending-email.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.runoob.com/java/java-sending-email.html</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown特殊语法总结</title>
      <link href="/2020/04/88177642.html"/>
      <url>/2020/04/88177642.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一些不常见的markdown语法</p><a id="more"></a><h4 id="一-字体背景"><a class="markdownIt-Anchor" href="#一-字体背景"></a> 一、字体背景</h4><p><strong>实现方式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"FAEBD7"</span>&gt;</span>这里是段落文字。。。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>网页展示效果</strong></p>  <table>  <tr>    <td bgcolor="FAEBD7">这里是段落文字。。。</td>  </tr></table><p> </p><h4 id="二-字体颜色"><a class="markdownIt-Anchor" href="#二-字体颜色"></a> 二、字体颜色</h4><p><strong>实现方式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span> 这里是文字。。。<span class="tag">&lt;/<span class="name">font</span> &gt;</span></span><br></pre></td></tr></table></figure><p><strong>网页展示效果</strong><br /><font color=red> 这里是文字。。。</font ></p><h4 id="三-typora内开启行内公式"><a class="markdownIt-Anchor" href="#三-typora内开启行内公式"></a> 三、Typora内开启行内公式</h4><p><strong>文件→偏好设置→Markdown，勾选内联公式，重启typora</strong></p><p>输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi><mi mathvariant="normal">按</mi><mi>e</mi><mi>s</mi><mi>c</mi><mi mathvariant="normal">键</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">自</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi></mrow><annotation encoding="application/x-tex">，按esc键会自动在后面加上一个</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">按</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">自</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span></span></span></span>，然后在这两个$之间输入公式。</p><p>下标用<code>_</code>表示如：K_a表示K_a<br />上标及指数用<code>^</code>表示，如：10<sup>x表示10</sup>x<br />如果下标和上标有多个字符：则用{}括起来</p><p><a href="https://www.jianshu.com/p/cf36c5af997a" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/cf36c5af997a</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>matlab求解最短路径并自动画出路线图</title>
      <link href="/2020/03/53553.html"/>
      <url>/2020/03/53553.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以下是运行结果，节点1到节点9的最短路径为19</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/matlab%E6%B1%82%E8%A7%A3%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%B9%B6%E8%87%AA%E5%8A%A8%E7%94%BB%E5%87%BA%E8%B7%AF%E7%BA%BF%E5%9B%BE/1.png" alt="" /></p><p>代码如下，使用的是迪杰斯特拉算法：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S=[<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]; <span class="comment">%起始节点向量    </span></span><br><span class="line">E=[<span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span>]; <span class="comment">%终止节点向量</span></span><br><span class="line">W=[<span class="number">1</span> <span class="number">2</span> <span class="number">12</span> <span class="number">6</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">15</span> <span class="number">7</span> <span class="number">2</span> <span class="number">7</span> <span class="number">7</span> <span class="number">15</span> <span class="number">3</span> <span class="number">10</span>]; <span class="comment">%边权值向量，有向图，G(9,9)=0; 9个节点</span></span><br><span class="line">G=sparse(S,E,W); <span class="comment">%关联矩阵的稀疏矩阵表示</span></span><br><span class="line">G(<span class="number">9</span>,<span class="number">9</span>)=<span class="number">0</span>;</span><br><span class="line">P=biograph(G,[],<span class="string">'ShowWeights'</span>,<span class="string">'on'</span>);<span class="comment">%建立有向图对象P</span></span><br><span class="line">H=view(P);<span class="comment">%显示各个路径权值</span></span><br><span class="line">[Dist,Path]=graphshortestpath(G,<span class="number">1</span>,<span class="number">9</span>,<span class="string">'Method'</span>,<span class="string">'Dijkstra'</span>) <span class="comment">%求节点1到节点9的最短路径</span></span><br><span class="line">set(H.Nodes(Path),<span class="string">'Color'</span>,[<span class="number">1</span> <span class="number">0.4</span> <span class="number">0.4</span>]);<span class="comment">%以下三条语句用红色修饰最短路径</span></span><br><span class="line">edges=getedgesbynodeid(H,get(H.Nodes(Path),<span class="string">'ID'</span>));</span><br><span class="line">set(edges,<span class="string">'LineColor'</span>,[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">set(edges,<span class="string">'LineWidth'</span>,<span class="number">2.0</span>);</span><br></pre></td></tr></table></figure><p> </p><p> </p><p>另，弗洛伊德版本如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">32</span>;</span><br><span class="line">[w,txt,raw]=xlsread(<span class="string">'E:\w.xls'</span>);</span><br><span class="line">w(<span class="built_in">isnan</span>(w))=<span class="number">0</span></span><br><span class="line"><span class="comment">%Floyd算法求每对顶点之间的最短距离</span></span><br><span class="line">M=<span class="built_in">max</span>(<span class="built_in">max</span>(w))*n^<span class="number">2</span>;<span class="comment">%M为充分大的正实数</span></span><br><span class="line">d=w+((w==<span class="number">0</span>)-<span class="built_in">eye</span>(n))*M;</span><br><span class="line">path=<span class="built_in">zeros</span>(n);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:n</span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n</span><br><span class="line">      <span class="keyword">if</span> d(<span class="built_in">i</span>,<span class="built_in">j</span>)&gt;d(<span class="built_in">i</span>,k)+d(k,<span class="built_in">j</span>)</span><br><span class="line">         d(<span class="built_in">i</span>,<span class="built_in">j</span>)=d(<span class="built_in">i</span>,k)+d(k,<span class="built_in">j</span>);</span><br><span class="line">         path(<span class="built_in">i</span>,<span class="built_in">j</span>)=k;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">d</span><br><span class="line">path</span><br><span class="line">xlswrite(<span class="string">'E:\Path.xlsx,'</span>,path,<span class="string">'sheet1'</span>,<span class="string">'a1'</span>);</span><br><span class="line">xlswrite(<span class="string">'E:\FILE.xlsx'</span>,d,<span class="string">'sheet1'</span>,<span class="string">'a1'</span>);</span><br><span class="line"><span class="built_in">ans</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Mathematical Modeling </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>偏最小二乘法</title>
      <link href="/2020/03/2577138401.html"/>
      <url>/2020/03/2577138401.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>偏最小二乘法是一种数学优化技术，它通过最小化误差的平方和找到一组数据的最佳函数匹配。 用最简的方法求得一些绝对不可知的真值，而令误差平方之和为最小。 很多其他的优化问题也可通过最小化能量或最大化熵用最小二乘形式表达。</p><a id="more"></a><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%偏最小二乘法</span></span><br><span class="line">clc <span class="comment">% 清屏</span></span><br><span class="line">clear all; <span class="comment">% 删除workplace变量</span></span><br><span class="line">close all; <span class="comment">% 关掉显示图形窗口</span></span><br><span class="line">format short</span><br><span class="line">pz=[<span class="number">191</span> <span class="number">36</span>  <span class="number">50</span>  <span class="number">5</span>   <span class="number">162</span> <span class="number">60</span></span><br><span class="line"><span class="number">189</span> <span class="number">37</span>  <span class="number">52</span>  <span class="number">2</span>   <span class="number">110</span> <span class="number">60</span></span><br><span class="line"><span class="number">193</span> <span class="number">38</span>  <span class="number">58</span>  <span class="number">12</span>  <span class="number">101</span> <span class="number">101</span></span><br><span class="line"><span class="number">162</span> <span class="number">35</span>  <span class="number">62</span>  <span class="number">12</span>  <span class="number">105</span> <span class="number">37</span></span><br><span class="line"><span class="number">189</span> <span class="number">35</span>  <span class="number">46</span>  <span class="number">13</span>  <span class="number">155</span> <span class="number">58</span></span><br><span class="line"><span class="number">182</span> <span class="number">36</span>  <span class="number">56</span>  <span class="number">4</span>   <span class="number">101</span> <span class="number">42</span></span><br><span class="line"><span class="number">211</span> <span class="number">38</span>  <span class="number">56</span>  <span class="number">8</span>   <span class="number">101</span> <span class="number">38</span></span><br><span class="line"><span class="number">167</span> <span class="number">34</span>  <span class="number">60</span>  <span class="number">6</span>   <span class="number">125</span> <span class="number">40</span></span><br><span class="line"><span class="number">176</span> <span class="number">31</span>  <span class="number">74</span>  <span class="number">15</span>  <span class="number">200</span> <span class="number">40</span></span><br><span class="line"><span class="number">154</span> <span class="number">33</span>  <span class="number">56</span>  <span class="number">17</span>  <span class="number">251</span> <span class="number">250</span></span><br><span class="line"><span class="number">169</span> <span class="number">34</span>  <span class="number">50</span>  <span class="number">17</span>  <span class="number">120</span> <span class="number">38</span></span><br><span class="line"><span class="number">166</span> <span class="number">33</span>  <span class="number">52</span>  <span class="number">13</span>  <span class="number">210</span> <span class="number">115</span></span><br><span class="line"><span class="number">154</span> <span class="number">34</span>  <span class="number">64</span>  <span class="number">14</span>  <span class="number">215</span> <span class="number">105</span></span><br><span class="line"><span class="number">247</span> <span class="number">46</span>  <span class="number">50</span>  <span class="number">1</span>   <span class="number">50</span>  <span class="number">50</span></span><br><span class="line"><span class="number">193</span> <span class="number">36</span>  <span class="number">46</span>  <span class="number">6</span>   <span class="number">70</span>  <span class="number">31</span></span><br><span class="line"><span class="number">202</span> <span class="number">37</span>  <span class="number">62</span>  <span class="number">12</span>  <span class="number">210</span> <span class="number">120</span></span><br><span class="line"><span class="number">176</span> <span class="number">37</span>  <span class="number">54</span>  <span class="number">4</span>   <span class="number">60</span>  <span class="number">25</span></span><br><span class="line"><span class="number">157</span> <span class="number">32</span>  <span class="number">52</span>  <span class="number">11</span>  <span class="number">230</span> <span class="number">80</span></span><br><span class="line"><span class="number">156</span> <span class="number">33</span>  <span class="number">54</span>  <span class="number">15</span>  <span class="number">225</span> <span class="number">73</span></span><br><span class="line"><span class="number">138</span> <span class="number">33</span>  <span class="number">68</span>  <span class="number">2</span>   <span class="number">110</span> <span class="number">43</span>];<span class="comment">%每一列为一个指标，每一行为一个样本</span></span><br><span class="line">mu=<span class="built_in">mean</span>(pz); <span class="comment">%求均值</span></span><br><span class="line">sig=std(pz); <span class="comment">%求标准差</span></span><br><span class="line">rr=corrcoef(pz); <span class="comment">%求相关系数矩阵</span></span><br><span class="line">data=zscore(pz); <span class="comment">%数据标准化</span></span><br><span class="line">n=<span class="number">3</span>; <span class="comment">% n 是自变量的个数</span></span><br><span class="line">m=<span class="number">3</span>; <span class="comment">% m 是因变量的个数</span></span><br><span class="line">x0=pz(:,<span class="number">1</span>:n);y0=pz(:,n+<span class="number">1</span>:<span class="keyword">end</span>);<span class="comment">%定义自变量为前n列，因变量为n+1到m列</span></span><br><span class="line">e0=data(:,<span class="number">1</span>:n);f0=data(:,n+<span class="number">1</span>:<span class="keyword">end</span>);<span class="comment">%e0为自变量归一化值，f0为因变量归一化值</span></span><br><span class="line">num=<span class="built_in">size</span>(e0,<span class="number">1</span>);<span class="comment">%求样本点的个数</span></span><br><span class="line">chg=<span class="built_in">eye</span>(n); <span class="comment">% w 到 w* 变换矩阵的初始化</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    <span class="comment">%计算 w，w* 和t 的得分向量，</span></span><br><span class="line">    matrix=e0'*f0*f0'*e0;</span><br><span class="line">    [vec,val]=eig(matrix); <span class="comment">%求特征值和特征向量</span></span><br><span class="line">    val=<span class="built_in">diag</span>(val); <span class="comment">%提出对角线元素，即特征值</span></span><br><span class="line">    [val,ind]=<span class="built_in">sort</span>(val,<span class="string">'descend'</span>);<span class="comment">%降序排列，ind为排序后原下标序号</span></span><br><span class="line">    w(:,<span class="built_in">i</span>)=vec(:,ind(<span class="number">1</span>)); <span class="comment">%提出最大特征值对应的特征向量</span></span><br><span class="line">    w_star(:,<span class="built_in">i</span>)=chg*w(:,<span class="built_in">i</span>); <span class="comment">%计算w*的取值</span></span><br><span class="line">    t(:,<span class="built_in">i</span>)=e0*w(:,<span class="built_in">i</span>); <span class="comment">%计算成分ti 的得分</span></span><br><span class="line">    alpha=e0'*t(:,<span class="built_in">i</span>)/(t(:,<span class="built_in">i</span>)'*t(:,<span class="built_in">i</span>)); <span class="comment">%计算alpha_i</span></span><br><span class="line">    chg=chg*(<span class="built_in">eye</span>(n)-w(:,<span class="built_in">i</span>)*alpha'); <span class="comment">%计算w 到w*的变换矩阵</span></span><br><span class="line">    e=e0-t(:,<span class="built_in">i</span>)*alpha'; <span class="comment">%计算残差矩阵</span></span><br><span class="line">    e0=e;<span class="comment">%将残差矩阵带进下次循环</span></span><br><span class="line">    <span class="comment">%计算ss(i)的值</span></span><br><span class="line">    <span class="built_in">beta</span>=[t(:,<span class="number">1</span>:<span class="built_in">i</span>),<span class="built_in">ones</span>(num,<span class="number">1</span>)]\f0; <span class="comment">%求回归方程的系数</span></span><br><span class="line">    <span class="built_in">beta</span>(<span class="keyword">end</span>,:)=[]; <span class="comment">%删除回归分析的常数项</span></span><br><span class="line">    cancha=f0-t(:,<span class="number">1</span>:<span class="built_in">i</span>)*<span class="built_in">beta</span>; <span class="comment">%求残差矩阵</span></span><br><span class="line">    ss(<span class="built_in">i</span>)=sum(sum(cancha.^<span class="number">2</span>)); <span class="comment">%求误差平方和</span></span><br><span class="line">    <span class="comment">%计算p(i)</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:num</span><br><span class="line">        t1=t(:,<span class="number">1</span>:<span class="built_in">i</span>);f1=f0;</span><br><span class="line">        she_t=t1(<span class="built_in">j</span>,:);she_f=f1(<span class="built_in">j</span>,:); <span class="comment">%把舍去的第j 个样本点保存起来</span></span><br><span class="line">        t1(<span class="built_in">j</span>,:)=[];f1(<span class="built_in">j</span>,:)=[]; <span class="comment">%删除第j 个观测值</span></span><br><span class="line">        beta1=[t1,<span class="built_in">ones</span>(num<span class="number">-1</span>,<span class="number">1</span>)]\f1; <span class="comment">%求回归分析的系数</span></span><br><span class="line">        beta1(<span class="keyword">end</span>,:)=[]; <span class="comment">%删除回归分析的常数项</span></span><br><span class="line">        cancha=she_f-she_t*beta1; <span class="comment">%求残差向量</span></span><br><span class="line">        p_i(<span class="built_in">j</span>)=sum(cancha.^<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    p(<span class="built_in">i</span>)=sum(p_i);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">i</span>&gt;<span class="number">1</span></span><br><span class="line">        Q_h2(<span class="built_in">i</span>)=<span class="number">1</span>-p(<span class="built_in">i</span>)/ss(<span class="built_in">i</span><span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Q_h2(<span class="number">1</span>)=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> Q_h2(<span class="built_in">i</span>)&lt;<span class="number">0.0975</span></span><br><span class="line">        fprintf(<span class="string">'提出的成分个数r=%d'</span>,<span class="built_in">i</span>);</span><br><span class="line">        fprintf(<span class="string">'   '</span>);</span><br><span class="line">        fprintf(<span class="string">'交叉的有效性=%f'</span>,Q_h2(<span class="built_in">i</span>));</span><br><span class="line">        r=<span class="built_in">i</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">beta_z=[t(:,<span class="number">1</span>:r),<span class="built_in">ones</span>(num,<span class="number">1</span>)]\f0; <span class="comment">%求Y 关于t 的回归系数</span></span><br><span class="line">beta_z(<span class="keyword">end</span>,:)=[]; <span class="comment">%删除常数项</span></span><br><span class="line">xishu=w_star(:,<span class="number">1</span>:r)*beta_z; <span class="comment">%求Y 关于X 的回归系数，且是针对标准数据的回归系数，每一列是一个回归方程</span></span><br><span class="line">mu_x=mu(<span class="number">1</span>:n);</span><br><span class="line">mu_y=mu(n+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">sig_x=sig(<span class="number">1</span>:n);sig_y=sig(n+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m</span><br><span class="line">    ch0(<span class="built_in">i</span>)=mu_y(<span class="built_in">i</span>)-mu_x./sig_x*sig_y(<span class="built_in">i</span>)*xishu(:,<span class="built_in">i</span>); <span class="comment">%计算原始数据的回归方程的常数项</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m</span><br><span class="line">    xish(:,<span class="built_in">i</span>)=xishu(:,<span class="built_in">i</span>)./sig_x'*sig_y(<span class="built_in">i</span>); <span class="comment">%计算原始数据的回归方程的系数，每一列是一个回归方程</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'回归方程的系数，每一列是一个方程，每一列的第一个数是常数项,每一列为一个因变量与自变量们的回归方程'</span>)</span><br><span class="line">sol=[ch0;xish] <span class="comment">%显示回归方程的系数，每一列是一个方程，每一列的第一个数是常数项,每一列为一个因变量与自变量们的回归方程</span></span><br><span class="line"><span class="comment">%此为还原为原始变量后的方程</span></span><br><span class="line"><span class="comment">%% 感觉用途不大，用到的时候再查询怎么使用</span></span><br><span class="line">save mydata x0 y0 num xishu ch0 xish</span><br><span class="line">w1=w(:,<span class="number">1</span>)</span><br><span class="line">w2=w(:,<span class="number">2</span>)</span><br><span class="line">wx1=w_star(:,<span class="number">1</span>)</span><br><span class="line">wx2=w_star(:,<span class="number">2</span>)</span><br><span class="line">tx1=t(:,<span class="number">1</span>)'</span><br><span class="line">tx2=t(:,<span class="number">2</span>)'</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'回归系数'</span>)</span><br><span class="line">beta_z <span class="comment">%回归系数</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'系数矩阵,即未还原原始变量的系数,每一列为一个因变量与自变量的回归方程'</span>)</span><br><span class="line">xishu<span class="comment">%系数矩阵,即未还原原始变量的系数,每一列为一个因变量与自变量的回归方程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 用法：分别计算出第四列第五列第六列和前三列的线性回归关系，给出系数，系数以列的方式给出，</span></span><br><span class="line"><span class="comment">%%sol分别为常数项系数，x1 x2 x3的系数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%生成mydata数据，进行偏最小二乘检验</span></span><br><span class="line">format short</span><br><span class="line">load(<span class="string">'mydata.mat'</span>)<span class="comment">%mydata为计算偏最小二乘保存的数据集，可以用于检验</span></span><br><span class="line"><span class="comment">%% 更直观的解释各个自变量的作用</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">bar(xishu')<span class="comment">%分别画出三个自变量对三个因变量标准化后回归方程的系数的的长度图</span></span><br><span class="line">axis tight</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line">annotation(<span class="string">'textbox'</span>,[<span class="number">0.26</span> <span class="number">0.14</span> <span class="number">0.086</span> <span class="number">0.07</span>],<span class="string">'String'</span>,&#123;<span class="string">'单杠'</span>&#125;,<span class="string">'FitBoxToText'</span>,<span class="string">'off'</span>);</span><br><span class="line">annotation(<span class="string">'textbox'</span>,[<span class="number">0.56</span> <span class="number">0.14</span> <span class="number">0.086</span> <span class="number">0.07</span>],<span class="string">'String'</span>,&#123;<span class="string">'弯曲'</span>&#125;,<span class="string">'FitBoxToText'</span>,<span class="string">'off'</span>);</span><br><span class="line">annotation(<span class="string">'textbox'</span>,[<span class="number">0.76</span> <span class="number">0.14</span> <span class="number">0.086</span> <span class="number">0.07</span>],<span class="string">'String'</span>,&#123;<span class="string">'跳高'</span>&#125;,<span class="string">'FitBoxToText'</span>,<span class="string">'off'</span>);<span class="comment">%在指定位置加注释</span></span><br><span class="line"><span class="comment">%% 拟合效果的确定</span></span><br><span class="line"><span class="comment">%所有点都在对角线附近均匀分布，则效果较好</span></span><br><span class="line">ch0=<span class="built_in">repmat</span>(ch0,num,<span class="number">1</span>);<span class="comment">%repmat起复制矩阵组合为新矩阵的作用</span></span><br><span class="line">yhat=ch0+x0*xish; <span class="comment">%计算y 的预测值</span></span><br><span class="line">y1max=<span class="built_in">max</span>(yhat);</span><br><span class="line">y2max=<span class="built_in">max</span>(y0);</span><br><span class="line">ymax=<span class="built_in">max</span>([y1max;y2max]);</span><br><span class="line">cancha=yhat-y0; <span class="comment">%计算残差</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(<span class="number">0</span>:ymax(<span class="number">1</span>),<span class="number">0</span>:ymax(<span class="number">1</span>),yhat(:,<span class="number">1</span>),y0(:,<span class="number">1</span>),<span class="string">'*'</span>)</span><br><span class="line">title(<span class="string">'单杠成绩预测'</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(<span class="number">0</span>:ymax(<span class="number">2</span>),<span class="number">0</span>:ymax(<span class="number">2</span>),yhat(:,<span class="number">2</span>),y0(:,<span class="number">2</span>),<span class="string">'O'</span>)</span><br><span class="line">title(<span class="string">'弯曲成绩预测'</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(<span class="number">0</span>:ymax(<span class="number">3</span>),<span class="number">0</span>:ymax(<span class="number">3</span>),yhat(:,<span class="number">3</span>),y0(:,<span class="number">3</span>),<span class="string">'H'</span>)</span><br><span class="line">title(<span class="string">'跳高成绩预测'</span>)</span><br><span class="line"><span class="comment">%% 绘制拟合效果图和权重比重图</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Mathematical Modeling </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>异常点检测的方法</title>
      <link href="/2020/03/3464831122.html"/>
      <url>/2020/03/3464831122.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>一维坐标中的离群点检测</p></blockquote><a id="more"></a><h4 id="一-箱线法"><a class="markdownIt-Anchor" href="#一-箱线法"></a> 一、箱线法</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">data0=xlsread(<span class="string">'F:\数据一.xls'</span>);</span><br><span class="line">[m,n]=<span class="built_in">size</span>(data0);</span><br><span class="line">w1=<span class="built_in">round</span>(m/<span class="number">4</span>);  <span class="comment">%第一四分位位置，</span></span><br><span class="line"><span class="comment">%m1=m/2%中位数位置，</span></span><br><span class="line">w3=<span class="built_in">round</span>(<span class="number">3</span>*m/<span class="number">4</span>);<span class="comment">%第三四分位位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%变量1的异常值处理</span></span><br><span class="line"></span><br><span class="line">bl1=data0(:,<span class="number">1</span>);   <span class="comment">%在这里定义检索的范围</span></span><br><span class="line">[a1,b1]=<span class="built_in">sort</span>(bl1)<span class="comment">%[a,b]=sort(x);是从小到大排列，a是排序后结果，b是a结果中各元素的原始位置。</span></span><br><span class="line">q11=a1(w1,<span class="number">1</span>);    <span class="comment">%第一四分位数</span></span><br><span class="line">q13=a1(w3,<span class="number">1</span>);    <span class="comment">%第三四分位数</span></span><br><span class="line">qr1=q13-q11;       <span class="comment">%四分位距</span></span><br><span class="line">sx1=q13+<span class="number">1.5</span>*qr1;   <span class="comment">%上限</span></span><br><span class="line">xx1=q11<span class="number">-1.5</span>*qr1;   <span class="comment">%下限</span></span><br><span class="line">ycz1=[];<span class="comment">%异常值矩阵</span></span><br><span class="line">s1=<span class="number">1</span>;</span><br><span class="line"><span class="comment">%异常值被定义为小于Q1－1.5IQR或大于Q3＋1.5IQR的值。虽然这种标准有点任意性，但它来源于经验判断，经验表明它在处理需要特别注意的数据方面表现不错。 </span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m</span><br><span class="line">    <span class="keyword">if</span> bl1(<span class="built_in">i</span>,<span class="number">1</span>)&gt;sx1||bl1(<span class="built_in">i</span>,<span class="number">1</span>)&lt;xx1</span><br><span class="line">        ycz1(s1,<span class="number">1</span>)=bl1(<span class="built_in">i</span>,<span class="number">1</span>);</span><br><span class="line">        ycz1(s1,<span class="number">2</span>)=<span class="built_in">i</span>;</span><br><span class="line">        s1=s1+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ycz1  <span class="comment">%输出离群点</span></span><br></pre></td></tr></table></figure><h4 id="二-3西格玛方法拉伊达准则"><a class="markdownIt-Anchor" href="#二-3西格玛方法拉伊达准则"></a> 二、3西格玛方法（拉伊达准则）</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data0=xlsread(<span class="string">'F:\数据一.xls'</span>);</span><br><span class="line"><span class="comment">%变量1的异常值处理</span></span><br><span class="line">bl1=data0(:,<span class="number">1</span>);  <span class="comment">%在这里定义检索的范围</span></span><br><span class="line">[m,n]=<span class="built_in">size</span>(bl1);</span><br><span class="line">ave=<span class="built_in">mean</span>(bl1)<span class="comment">%均值</span></span><br><span class="line">sigma=<span class="built_in">sqrt</span>((bl1'-ave)*(bl1-ave)/m)</span><br><span class="line">jicha=<span class="built_in">max</span>(bl1)-<span class="built_in">min</span>(bl1);<span class="comment">%极差</span></span><br><span class="line"><span class="comment">%要求数据服从正态分布，认为大于μ＋3σ或小于μ—3σ的实验数据值作为异常值，其中μ为数据均值，σ为数据标准差 </span></span><br><span class="line">sx=ave+<span class="number">3</span>*sigma</span><br><span class="line">xx=ave<span class="number">-3</span>*sigma</span><br><span class="line">ycz=[];</span><br><span class="line">zcz=[];</span><br><span class="line">s=<span class="number">1</span>;</span><br><span class="line">s1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m</span><br><span class="line">    <span class="keyword">if</span> bl1(<span class="built_in">i</span>,<span class="number">1</span>)&lt;xx||bl1(<span class="built_in">i</span>,<span class="number">1</span>)&gt;sx</span><br><span class="line">        ycz(s,<span class="number">1</span>)=bl1(<span class="built_in">i</span>,<span class="number">1</span>);</span><br><span class="line">        ycz(s,<span class="number">2</span>)=<span class="built_in">i</span>;</span><br><span class="line">        s=s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ycz  <span class="comment">%输出离群点</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Mathematical Modeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DBSCAN去二维离群点坐标</title>
      <link href="/2020/03/649206110.html"/>
      <url>/2020/03/649206110.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>DBSCAN是基于密度空间的聚类算法，与KMeans算法不同，它不需要确定聚类的数量，而是基于数据推测聚类的数目，它能够针对任意形状产生聚类。</p><a id="more"></a><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line"><span class="comment">%% 导入数据集</span></span><br><span class="line"><span class="comment">% data = load('testData.txt');</span></span><br><span class="line">data = textread(<span class="string">'F:\DATA\二维离群点检测.txt'</span>);</span><br><span class="line"><span class="comment">% 定义参数Eps和MinPts</span></span><br><span class="line">MinPts = <span class="number">5</span>;</span><br><span class="line">Eps = epsilon(data, MinPts);</span><br><span class="line">[m,n] = <span class="built_in">size</span>(data);<span class="comment">%得到数据的大小</span></span><br><span class="line">x = [(<span class="number">1</span>:m)' data];</span><br><span class="line">[m,n] = <span class="built_in">size</span>(x);<span class="comment">%重新计算数据集的大小</span></span><br><span class="line">types = <span class="built_in">zeros</span>(<span class="number">1</span>,m);<span class="comment">%用于区分核心点1，边界点0和噪音点-1</span></span><br><span class="line">dealed = <span class="built_in">zeros</span>(m,<span class="number">1</span>);<span class="comment">%用于判断该点是否处理过,0表示未处理过</span></span><br><span class="line">dis = calDistance(x(:,<span class="number">2</span>:n));</span><br><span class="line">number = <span class="number">1</span>;<span class="comment">%用于标记类</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 对每一个点进行处理</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    <span class="comment">%找到未处理的点</span></span><br><span class="line">    <span class="keyword">if</span> dealed(<span class="built_in">i</span>) == <span class="number">0</span></span><br><span class="line">        xTemp = x(<span class="built_in">i</span>,:);</span><br><span class="line">        D = dis(<span class="built_in">i</span>,:);<span class="comment">%取得第i个点到其他所有点的距离</span></span><br><span class="line">        ind = <span class="built_in">find</span>(D&lt;=Eps);<span class="comment">%找到半径Eps内的所有点   </span></span><br><span class="line">        <span class="comment">%% 区分点的类型    </span></span><br><span class="line">        <span class="comment">%边界点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">length</span>(ind) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">length</span>(ind) &lt; MinPts+<span class="number">1</span></span><br><span class="line">            types(<span class="built_in">i</span>) = <span class="number">0</span>;</span><br><span class="line">            class(<span class="built_in">i</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">%噪音点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">length</span>(ind) == <span class="number">1</span></span><br><span class="line">            types(<span class="built_in">i</span>) = <span class="number">-1</span>;</span><br><span class="line">            class(<span class="built_in">i</span>) = <span class="number">-1</span>;</span><br><span class="line">            dealed(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">%核心点(此处是关键步骤)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">length</span>(ind) &gt;= MinPts+<span class="number">1</span></span><br><span class="line">            types(xTemp(<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">1</span>;</span><br><span class="line">            class(ind) = number;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">% 判断核心点是否密度可达</span></span><br><span class="line">            <span class="keyword">while</span> ~<span class="built_in">isempty</span>(ind)</span><br><span class="line">                yTemp = x(ind(<span class="number">1</span>),:);</span><br><span class="line">                dealed(ind(<span class="number">1</span>)) = <span class="number">1</span>;</span><br><span class="line">                ind(<span class="number">1</span>) = [];</span><br><span class="line">                D = dis(yTemp(<span class="number">1</span>,<span class="number">1</span>),:);<span class="comment">%找到与ind(1)之间的距离</span></span><br><span class="line">                ind_1 = <span class="built_in">find</span>(D&lt;=Eps);</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">length</span>(ind_1)&gt;<span class="number">1</span><span class="comment">%处理非噪音点</span></span><br><span class="line">                    class(ind_1) = number;</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">length</span>(ind_1) &gt;= MinPts+<span class="number">1</span></span><br><span class="line">                        types(yTemp(<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        types(yTemp(<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                     </span><br><span class="line">                    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(ind_1)</span><br><span class="line">                       <span class="keyword">if</span> dealed(ind_1(<span class="built_in">j</span>)) == <span class="number">0</span></span><br><span class="line">                          dealed(ind_1(<span class="built_in">j</span>)) = <span class="number">1</span>;</span><br><span class="line">                          ind=[ind ind_1(<span class="built_in">j</span>)];  </span><br><span class="line">                          class(ind_1(<span class="built_in">j</span>))=number;</span><br><span class="line">                       <span class="keyword">end</span>                   </span><br><span class="line">                   <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            number = number + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 最后处理所有未分类的点为噪音点</span></span><br><span class="line">ind_2 = <span class="built_in">find</span>(class==<span class="number">0</span>);</span><br><span class="line">class(ind_2) = <span class="number">-1</span>;</span><br><span class="line">types(ind_2) = <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 画出最终的聚类图</span></span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    <span class="keyword">if</span> class(<span class="built_in">i</span>) == <span class="number">-1</span></span><br><span class="line">        <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'.r'</span>);</span><br><span class="line">    <span class="keyword">elseif</span> class(<span class="built_in">i</span>) == <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> types(<span class="built_in">i</span>) == <span class="number">1</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'+b'</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'.b'</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> class(<span class="built_in">i</span>) == <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> types(<span class="built_in">i</span>) == <span class="number">1</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'+g'</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'.g'</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> class(<span class="built_in">i</span>) == <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> types(<span class="built_in">i</span>) == <span class="number">1</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'+c'</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'.c'</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> types(<span class="built_in">i</span>) == <span class="number">1</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'+k'</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">plot</span>(data(<span class="built_in">i</span>,<span class="number">1</span>),data(<span class="built_in">i</span>,<span class="number">2</span>),<span class="string">'.k'</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">hold</span> off</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Mathematical Modeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOPISIS综合评价算法</title>
      <link href="/2020/03/3627102178.html"/>
      <url>/2020/03/3627102178.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>TOPSIS的全称是“逼近于理想值的排序方法”</p><p>根据多项指标、对多个方案进行比较选择的分析方法，这种方法的中心思想在于首先确定各项指标的正理想值和负理想值，所谓正理想值是一设想的最好值（方案），它的的各个属性值都达到各候选方案中最好的值，而负理想解是另一设想的最坏的值（方案），然后求出各个方案与正理想值和负理想值之间的加权欧氏距离，由此得出各方案与最优方案的接近程度，作为评价方案的优劣标准。</p><a id="more"></a><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%A为决策矩阵，W为权值矩阵,M为正指标所在的列，N为负指标所在的列</span></span><br><span class="line"></span><br><span class="line">A=xlsread(<span class="string">'F:/DATA/q2.xls'</span>,<span class="string">'N15:U19'</span>);</span><br><span class="line">W=[<span class="number">0.125</span> <span class="number">0.125</span> <span class="number">0.125</span> <span class="number">0.125</span> <span class="number">0.125</span> <span class="number">0.125</span> <span class="number">0.125</span> <span class="number">0.125</span>];</span><br><span class="line">[ma,na]=<span class="built_in">size</span>(A);          <span class="comment">%ma为A矩阵的行数，na为A矩阵的列数</span></span><br><span class="line"> <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:na</span><br><span class="line">     B(:,<span class="built_in">i</span>)=A(:,<span class="built_in">i</span>)*W(<span class="built_in">i</span>);  <span class="comment">%按列循环得到[加权标准化矩阵]</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">V1=<span class="built_in">zeros</span>(<span class="number">1</span>,na);            <span class="comment">%初始化正理想解和负理想解</span></span><br><span class="line">V2=<span class="built_in">zeros</span>(<span class="number">1</span>,na);</span><br><span class="line">BMAX=<span class="built_in">max</span>(B);               <span class="comment">%取加权标准化矩阵每列的最大值和最小值</span></span><br><span class="line">BMIN=<span class="built_in">min</span>(B);               </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:na</span><br><span class="line">     <span class="comment">%if i&lt;=size(M,2)      %循环得到理想解和负理想解，注意判断，不然会超个数</span></span><br><span class="line">     V1(<span class="built_in">i</span>)=BMAX(<span class="built_in">i</span>);</span><br><span class="line">     V2(<span class="built_in">i</span>)=BMIN(<span class="built_in">i</span>);</span><br><span class="line">     <span class="comment">%end</span></span><br><span class="line">     <span class="comment">%if i&lt;=size(N,2)</span></span><br><span class="line">     <span class="comment">%V1(N(i))=BMIN(N(i));</span></span><br><span class="line">     <span class="comment">%V2(N(i))=BMAX(N(i));</span></span><br><span class="line">     <span class="comment">%end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:ma              <span class="comment">%按行循环求各方案的贴近度</span></span><br><span class="line">     C1=B(<span class="built_in">i</span>,:)-V1;</span><br><span class="line">     S1(<span class="built_in">i</span>)=norm(C1);    <span class="comment">%S1,S2分别为离正理想点和负理想点的距离，用二阶范数</span></span><br><span class="line"></span><br><span class="line">     C2=B(<span class="built_in">i</span>,:)-V2;</span><br><span class="line">     S2(<span class="built_in">i</span>)=norm(C2);</span><br><span class="line">     T(<span class="built_in">i</span>)=S2(<span class="built_in">i</span>)/(S1(<span class="built_in">i</span>)+S2(<span class="built_in">i</span>));     <span class="comment">%T为贴近度</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">output_args=T</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Mathematical Modeling </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一致性检验方法</title>
      <link href="/2020/03/2483492516.html"/>
      <url>/2020/03/2483492516.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><em>一致性检验</em>是指对由不同样本计算的各平均值或方差进行<em>检验</em>。</p><a id="more"></a><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disp</span>(<span class="string">'请输入判断矩阵A(n阶)'</span>);</span><br><span class="line">A=input(<span class="string">'A='</span>);</span><br><span class="line">[n,n]=<span class="built_in">size</span>(A);</span><br><span class="line">x=<span class="built_in">ones</span>(n,<span class="number">100</span>);</span><br><span class="line">y=<span class="built_in">ones</span>(n,<span class="number">100</span>);</span><br><span class="line">m=<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">m(<span class="number">1</span>)=<span class="built_in">max</span>(x(:,<span class="number">1</span>));</span><br><span class="line">y(:,<span class="number">1</span>)=x(:,<span class="number">1</span>);</span><br><span class="line">x(:,<span class="number">2</span>)=A*y(:,<span class="number">1</span>);</span><br><span class="line">m(<span class="number">2</span>)=<span class="built_in">max</span>(x(:,<span class="number">2</span>));</span><br><span class="line">y(:,<span class="number">2</span>)=x(:,<span class="number">2</span>)/m(<span class="number">2</span>);</span><br><span class="line">p=<span class="number">0.0001</span>;<span class="built_in">i</span>=<span class="number">2</span>;k=<span class="built_in">abs</span>(m(<span class="number">2</span>)-m(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span>  k&gt;p</span><br><span class="line">  <span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">  x(:,<span class="built_in">i</span>)=A*y(:,<span class="built_in">i</span><span class="number">-1</span>);</span><br><span class="line">  m(<span class="built_in">i</span>)=<span class="built_in">max</span>(x(:,<span class="built_in">i</span>));</span><br><span class="line">  y(:,<span class="built_in">i</span>)=x(:,<span class="built_in">i</span>)/m(<span class="built_in">i</span>);</span><br><span class="line">  k=<span class="built_in">abs</span>(m(<span class="built_in">i</span>)-m(<span class="built_in">i</span><span class="number">-1</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a=sum(y(:,<span class="built_in">i</span>));</span><br><span class="line">w=y(:,<span class="built_in">i</span>)/a;</span><br><span class="line">t=m(<span class="built_in">i</span>);</span><br><span class="line"><span class="built_in">disp</span>(w);</span><br><span class="line">         <span class="comment">%以下是一致性检验</span></span><br><span class="line">CI=(t-n)/(n<span class="number">-1</span>);RI=[<span class="number">0</span> <span class="number">0</span> <span class="number">0.52</span> <span class="number">0.89</span> <span class="number">1.12</span> <span class="number">1.26</span> <span class="number">1.36</span> <span class="number">1.41</span> <span class="number">1.46</span> <span class="number">1.49</span> <span class="number">1.52</span> <span class="number">1.54</span> <span class="number">1.56</span> <span class="number">1.58</span> <span class="number">1.59</span>];</span><br><span class="line">CR=CI/RI(n);</span><br><span class="line"><span class="keyword">if</span> CR&lt;<span class="number">0.10</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'此矩阵的一致性可以接受!'</span>);</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'λmax='</span>);<span class="built_in">disp</span>(t);</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'CI='</span>);<span class="built_in">disp</span>(CI);</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'CR='</span>);<span class="built_in">disp</span>(CR);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">6</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">7</span>,<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>/<span class="number">2</span>,<span class="number">1</span>/<span class="number">2</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">9</span>,<span class="number">1</span>/<span class="number">8</span>,<span class="number">1</span>/<span class="number">7</span>,<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>/<span class="number">2</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">3</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">8</span>,<span class="number">1</span>/<span class="number">7</span>,<span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>/<span class="number">4</span>,<span class="number">1</span>/<span class="number">2</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">4</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>;</span><br><span class="line"><span class="number">1</span>/<span class="number">6</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">4</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>/<span class="number">2</span>,<span class="number">1</span>;]</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Mathematical Modeling </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python程序打包成exe文件</title>
      <link href="/2020/03/2310216555.html"/>
      <url>/2020/03/2310216555.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><p>step1：安装pyinstaller，在cmd窗口使用pip install pyinstaller安装</p></li><li><p>step2：cd 到你的文件目录cd D:\Pycharm Destination\  (test.py文件所在的目录)</p></li><li><p>step3：运行pyinstaller -F <a href="http://test.py" target="_blank" rel="noopener external nofollow noreferrer">test.py</a></p></li><li><p>step4：看结果，结果在新生成的文件夹dist下就有test.exe</p></li></ul><a id="more"></a><p>遇到的错误：</p><ol><li><p>运行完“pyinstaller -F <a href="http://test.py" target="_blank" rel="noopener external nofollow noreferrer">test.py</a>”命令后，提示缺少一堆api文件。</p><p>解决办法：将C:\Windows\System32\downlevel目录下的所有文件复制到“F:\python\DLLs”目录下</p></li><li><p>上面的问题解决后，又报出<code>ModuleNotFoundError: No module named 'setuptools._vendor'</code>的错误</p><p>解决办法：使用pip install --upgrade setuptools 更新到最新版本后问题解决</p></li></ol><p> </p><blockquote><p>补充:</p><p>pyinstaller -F -i test.ico -w <a href="http://test.py" target="_blank" rel="noopener external nofollow noreferrer">test.py</a></p><p>-w为在GUI程序中略去控制台的显示效果，test.ico为想要的图标，需要和test.py在同一目录下</p></blockquote><p> </p><p> </p><p>注：程序中如果有中文，则会报错</p><pre><code> 解决办法：不要写完程序后复制粘贴到一个txt文本，再转成py文件。这样会不支持中文。正确的做法是：在   编辑器里写完程序直接保存，然后去找存储路径下的py文件，那个文件里有中文也没问题。</code></pre><p> </p><blockquote><p>多个文件：</p><p>pyinstaller -F -i 111.ico -w <a href="http://mian.py" target="_blank" rel="noopener external nofollow noreferrer">mian.py</a> -p <a href="http://utils.py" target="_blank" rel="noopener external nofollow noreferrer">utils.py</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Experience </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MD5加密算法学习</title>
      <link href="/2020/03/3753333684.html"/>
      <url>/2020/03/3753333684.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>加密算法学习</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对字符串md5加密(小写+字母)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 传入要加密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  MD5加密后的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD51</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生成一个MD5加密计算摘要</span></span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="comment">// 计算md5函数</span></span><br><span class="line">            md.update(str.getBytes());</span><br><span class="line">            <span class="comment">// digest()最后确定返回md5 hash值，返回值为8为字符串。因为md5 hash值是16位的hex值，实际上就是8位的字符</span></span><br><span class="line">            <span class="comment">// BigInteger函数则将8位的字符串转换成16位hex值，用字符串来表示；得到字符串形式的hash值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md.digest()).toString(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对字符串md5加密(大写+数字)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 传入要加密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  MD5加密后的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD52</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> hexDigits[]=&#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>&#125;;       </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] btInput = s.getBytes();</span><br><span class="line">            <span class="comment">// 获得MD5摘要算法的 MessageDigest 对象</span></span><br><span class="line">            MessageDigest mdInst = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="comment">// 使用指定的字节更新摘要</span></span><br><span class="line">            mdInst.update(btInput);</span><br><span class="line">            <span class="comment">// 获得密文</span></span><br><span class="line">            <span class="keyword">byte</span>[] md = mdInst.digest();</span><br><span class="line">            <span class="comment">// 把密文转换成十六进制的字符串形式</span></span><br><span class="line">            <span class="keyword">int</span> j = md.length;</span><br><span class="line">            <span class="keyword">char</span> str[] = <span class="keyword">new</span> <span class="keyword">char</span>[j * <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">byte</span> byte0 = md[i];</span><br><span class="line">                str[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">                str[k++] = hexDigits[byte0 &amp; <span class="number">0xf</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加盐Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD53</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到一个信息摘要器</span></span><br><span class="line">            MessageDigest digest = MessageDigest.getInstance(<span class="string">"md5"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] result = digest.digest(password.getBytes());</span><br><span class="line">            StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="comment">// 把每一个byte 做一个与运算 0xff;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : result) &#123;</span><br><span class="line">                <span class="comment">// 与运算</span></span><br><span class="line">                <span class="keyword">int</span> number = b &amp; <span class="number">0xff</span>;<span class="comment">// 加盐</span></span><br><span class="line">                String str = Integer.toHexString(number);</span><br><span class="line">                <span class="keyword">if</span> (str.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                    buffer.append(<span class="string">"0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                buffer.append(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 标准的md5加密后的结果</span></span><br><span class="line">            <span class="keyword">return</span> buffer.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(getMD51(<span class="string">"hansuyu"</span>));</span><br><span class="line">System.out.println(getMD52(<span class="string">"hansuyu"</span>));</span><br><span class="line">System.out.println(getMD53(<span class="string">"hansuyu"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>完美洗牌算法</title>
      <link href="/2020/03/4205116750.html"/>
      <url>/2020/03/4205116750.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>参考：<a href="https://blog.csdn.net/SunnyYoona/article/details/43795243" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/SunnyYoona/article/details/43795243</a></p></blockquote><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转 start 开始位置 end 结束位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; <span class="built_in">end</span>)&#123;</span><br><span class="line">            swap(a[start],a[<span class="built_in">end</span>]);</span><br><span class="line">            ++start;</span><br><span class="line">            --<span class="built_in">end</span>;</span><br><span class="line">        &#125;<span class="comment">//while</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环右移m位 n数组长度 下标从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LeftRotate</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 翻转前m位</span></span><br><span class="line">        Reverse(a,<span class="number">1</span>,m);</span><br><span class="line">        <span class="comment">// 翻转剩余元素</span></span><br><span class="line">        Reverse(a,m+<span class="number">1</span>,n);</span><br><span class="line">        <span class="comment">// 整体翻转</span></span><br><span class="line">        Reverse(a,<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 走圈算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CycleLeader</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pre = a[start];</span><br><span class="line">        <span class="comment">// 2 * i % (2 * n + 1)</span></span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 实际位置</span></span><br><span class="line">        <span class="keyword">int</span> next = start * <span class="number">2</span> % mod;</span><br><span class="line">        <span class="comment">// 按环移动位置</span></span><br><span class="line">        <span class="keyword">while</span>(next != start)&#123;</span><br><span class="line">            swap(pre,a[next]);</span><br><span class="line">            next = <span class="number">2</span> * next % mod;</span><br><span class="line">        &#125;<span class="comment">//while</span></span><br><span class="line">        a[start] = pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 完美洗牌算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PerfectShuffle</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(n &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 计算环的个数</span></span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 3^1</span></span><br><span class="line">            <span class="keyword">int</span> r = <span class="number">3</span>;</span><br><span class="line">            <span class="comment">// 2 * m  = 3^k - 1</span></span><br><span class="line">            <span class="comment">// m &lt;= n  -&gt;  2 * m &lt;= 2 * n  -&gt; 3^k - 1 &lt;= 2 * n</span></span><br><span class="line">            <span class="comment">// 寻找最大的k使得3^k - 1 &lt;= 2*n</span></span><br><span class="line">            <span class="keyword">while</span>(r - <span class="number">1</span> &lt;= <span class="number">2</span>*n)&#123;</span><br><span class="line">                r *= <span class="number">3</span>;</span><br><span class="line">                ++k;</span><br><span class="line">            &#125;<span class="comment">//while</span></span><br><span class="line">            <span class="keyword">int</span> m = (r / <span class="number">3</span> - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 循环左移n-m位</span></span><br><span class="line">            LeftRotate(a+m,n-m,n);</span><br><span class="line">            <span class="comment">// k个环 环起始位置start: 1,3...3^(k-1)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,start = <span class="number">1</span>;i &lt; k;++i,start *= <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// 走圈</span></span><br><span class="line">                CycleLeader(a,start,m);</span><br><span class="line">            &#125;<span class="comment">//for</span></span><br><span class="line">            a += <span class="number">2</span>*m;</span><br><span class="line">            n -= m;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> A[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    PerfectShuffle(A,<span class="number">6</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //如果想输出为a1,b1,a2,b2……an,bn的形式，则为：</span></span><br><span class="line"><span class="comment">    int A[] = &#123;0,2,3,4,5,6,7,8,9,10,11&#125;;</span></span><br><span class="line"><span class="comment">    PerfectShuffle(A,5);</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;"1";</span></span><br><span class="line"><span class="comment">    for(int i = 1;i &lt;= 10;++i)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;A[i]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;"12"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">12</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;A[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;<span class="comment">//for</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java最大公约数和最小公倍数</title>
      <link href="/2020/03/1529272755.html"/>
      <url>/2020/03/1529272755.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最大公约数和最小公倍数的计算</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 最大公约数和最小公倍数 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;  </span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>)  </span><br><span class="line">        c=a;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        c=gcd(b,a%b);  </span><br><span class="line">    <span class="keyword">return</span> c; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c=Math.min(a,b);</span><br><span class="line"><span class="keyword">int</span> d=Math.max(a,b);</span><br><span class="line"><span class="keyword">int</span> temp=c;</span><br><span class="line"><span class="keyword">while</span>(c%d!=<span class="number">0</span>) &#123;</span><br><span class="line">c+=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> b=scan.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"最大公约数：:"</span>+gcd(a,b));</span><br><span class="line">System.out.println(<span class="string">"最小公倍数：:"</span>+lcm(a,b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java数组的输入与输出简单总结</title>
      <link href="/2020/03/1888811222.html"/>
      <url>/2020/03/1888811222.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Java数组的输入与输出简单总结</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 数组 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">double</span> b[][] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">3</span>][<span class="number">2</span>]; <span class="comment">// = new &#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;</span></span><br><span class="line"><span class="keyword">char</span> [][] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>][];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋初值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">a[i] = scan.next().charAt(<span class="number">0</span>); <span class="comment">// 没有专门的scan.nextChar,需要以这种方式输入字符数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">b[i][j] = scan.nextDouble();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            c[i] = scan.next().toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> index : a) &#123;</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span>[] temp : b) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> index : temp) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%1.2f  "</span>, index); <span class="comment">// 1.2"中的1表示输出的长度，2表示小数点后的位数。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1(a);</span><br><span class="line">fun2(b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传参</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">char</span>[] a)</span> </span>&#123;</span><br><span class="line">System.out.println(String.copyValueOf(a)); <span class="comment">// char数组(字符数组)-&gt;字符串string : String string =String.copyValueOf(arr);</span></span><br><span class="line"><span class="comment">// 字符串string-&gt;char数组(字符数组) : char[] ar = str.toCharArray(); //char数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">double</span>[][] b)</span> </span>&#123;</span><br><span class="line">System.out.println(Arrays.deepToString(b)); <span class="comment">// 如果是一维，则直接用Arrays.toString()</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">a 1 2</span></span><br><span class="line"><span class="comment">s 3 4</span></span><br><span class="line"><span class="comment">d 5 6</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、String数组-&gt;字符串</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">　　String[] arr =&#123;"0123","sb","12f"&#125;;</span></span><br><span class="line"><span class="comment">　　StringBuffer sb = new StringBuffer();</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">　　for(int i = 0;i&lt;arr.length;i++)&#123;</span></span><br><span class="line"><span class="comment">　　sb.append(arr[i]);        //append String并不拥有该方法，所以借助StringBuffer</span></span><br><span class="line"><span class="comment">　　&#125;</span></span><br><span class="line"><span class="comment">　　String sb1 = sb.toString();</span></span><br><span class="line"><span class="comment">　　System.out.println(sb1);    //0123sb12f</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ***/</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java输入方法总结</title>
      <link href="/2020/03/4131053028.html"/>
      <url>/2020/03/4131053028.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><p>nextLine()</p><p>读取整行数据,包括行内的空格和标点，以回车键结束。若要在nextInt()回车后使用nextLine()，则需要在二者中间加一个&quot;scan.nextLine();&quot;来吸收回车键。因为&quot;nextInt()&quot;以回车键结束，但不吸收回车键，被&quot;nexInt()&quot;扔在缓冲池中的回车键会使&quot;nextLine()&quot;还没开始就被迫结束</p></li><li><p>next()       用处不大，和&quot;nextLine()&quot;一样，吸收的是字符串数据.</p><pre><code>      1. 吸收标点，但不吸收空格。若一行数据中含有空格，则会被分隔开,只得到了第一个空格前的数据</code></pre></li></ul><ol start="2"><li><p>一定在读到有效字符后才可以结束输入。所以，当它与&quot;nextInt()&quot;连用时，就不用考虑刚开始接收数据就 迎头来一个回车符的问题</p></li><li><p>对输入有效字符之前遇到的空白，会自动忽略掉，不予接收</p></li><li><p>只有在输入有效字符之后才会将其后面输入的空白作为分隔符或者结束</p><blockquote><p>注： 空白=空格、Tab   有效字符!=空格、Tab、回车</p></blockquote></li></ol><ul><li><p>nextInt()    读取整数，以空格或回车键结束。</p></li><li><p>hasNext()<br />1. 常伴随while条件语句使用，while程序体中会有一个输入语句。若有同类型数据继续输入，程序则继续接收；若输入的类型和while语句中要求输入的类型不同，则结束输入.<br />注：如果输进去的数以空格隔开，程序会把输进去的数处理完后一一保存，全部输完后按回车，程序输入结束，所有处理后的结果再一次性吐出 ； 如果每输入一个数就敲一次回车，那么结果也会是跟随回车键一一蹦出<br />2. 上述三种nextXXX类型，都可以搭配&quot;hasNext()“使用。但也可以在整数型时使用&quot;hasNextInt()”,字符串型时使用&quot;hasNextLine()&quot;</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>求所有子串</title>
      <link href="/2020/03/963007490.html"/>
      <url>/2020/03/963007490.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>求所有子串</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 求所有子串 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">String str = scan.nextLine();</span><br><span class="line"><span class="keyword">char</span>[] s = str.toCharArray();</span><br><span class="line"><span class="keyword">int</span> len = s.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &lt; len; j++) &#123;</span><br><span class="line">StringBuilder B = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (k = i; k &lt;= j; k++) &#123;</span><br><span class="line">B.append(s[k]);</span><br><span class="line"><span class="comment">// System.out.print(s[k]);</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(B.toString()); <span class="comment">// 将StringBuilder转化为String</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结构体排序</title>
      <link href="/2020/03/2902030727.html"/>
      <url>/2020/03/2902030727.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>结构体排序</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按x升序排序.如果按y升序的话就把这个函数中的x和y调换</span></span><br><span class="line"><span class="comment">//如果想降序，就把this放到a的后面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(S a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.x != a.x )</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.x - a.x;    </span><br><span class="line"><span class="keyword">else</span>                         </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.y - a.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 结构体排序 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line">n = in.nextInt();</span><br><span class="line">S d[] = <span class="keyword">new</span> S[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> k1 = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> k2 = in.nextInt();</span><br><span class="line">d[i] = <span class="keyword">new</span> S(k1, k2);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(d, <span class="number">0</span>, n); <span class="comment">// 排n个数,Arrays.sort(d)则默认排全部  </span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">System.out.println(d[i].x + <span class="string">" "</span> + d[i].y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大数乘法</title>
      <link href="/2020/03/2783882169.html"/>
      <url>/2020/03/2783882169.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>大数乘法</p><a id="more"></a><h6 id="版本1"><a class="markdownIt-Anchor" href="#版本1"></a> 版本1：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.math.BigInteger;  </span><br><span class="line">import java.util.Scanner;  </span><br><span class="line">public class 大数相乘1 &#123;  </span><br><span class="line"></span><br><span class="line">public static void main(String[] args)   </span><br><span class="line">  &#123;  </span><br><span class="line">      Scanner reader&#x3D;new Scanner(System.in);  </span><br><span class="line">      String numStr1&#x3D;reader.next();  </span><br><span class="line">      String numStr2&#x3D;reader.next();  </span><br><span class="line">    </span><br><span class="line">      int[] intNum1&#x3D;changetoArray(numStr1);  </span><br><span class="line">      int[] intNum2&#x3D;changetoArray(numStr2);  </span><br><span class="line">&#x2F;&#x2F;    BigInteger bi &#x3D; new BigInteger();  </span><br><span class="line">      multiply(intNum1,intNum2);  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">public static int[] changetoArray(String numStr)  </span><br><span class="line">  &#123;  </span><br><span class="line">      int length&#x3D;numStr.length();  </span><br><span class="line">      int[] intNum&#x3D;new int[length];  </span><br><span class="line">      for(int i&#x3D;0;i&lt;length;i++)  </span><br><span class="line">      intNum[length-i-1]&#x3D;Integer.parseInt(String.valueOf((numStr.charAt(i))));  </span><br><span class="line">      return intNum;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">public static int[] multiply(int[] num1,int[] num2)  </span><br><span class="line">  &#123;  </span><br><span class="line">      int length1&#x3D;num1.length;  </span><br><span class="line">      int length2&#x3D;num2.length;  </span><br><span class="line">      int[] result&#x3D;new int[length1+length2];  </span><br><span class="line">      for(int i&#x3D;0;i&lt;length1;i++)&#x2F;&#x2F;进行相乘运算  </span><br><span class="line">          for(int j&#x3D;0;j&lt;length2;j++)  </span><br><span class="line">          &#123;  </span><br><span class="line">              int temp &#x3D; result[i + j] + num1[i] * num2[j];  </span><br><span class="line">              result[i + j] &#x3D; temp % 10;  </span><br><span class="line">              result[i + j + 1] +&#x3D; temp &#x2F; 10;  </span><br><span class="line">              if (result[i + j + 1] &gt; 10) &#123;  </span><br><span class="line">                  result[i + j + 1] %&#x3D; 10;  </span><br><span class="line">                  result[i + j + 2]++;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;     </span><br><span class="line">      StringBuffer sb&#x3D;new StringBuffer();  </span><br><span class="line">      boolean flag &#x3D; false;&#x2F;&#x2F;结合result[i]&#x3D;&#x3D;0来清除前面多与的0  </span><br><span class="line">      for(int i&#x3D;result.length-1;i&gt;&#x3D;0;i--)&#x2F;&#x2F;通过大数数组来构造字符串  </span><br><span class="line">      &#123;  </span><br><span class="line">          if(result[i]&#x3D;&#x3D;0&amp;&amp;flag&#x3D;&#x3D;false)  </span><br><span class="line">                  continue;  </span><br><span class="line">          flag &#x3D; true;&#x2F;&#x2F;只要出现了以一个不为0的数字，就置flag为true。这句话放的位置不好，可以改进下  </span><br><span class="line">          sb.append(result[i]);  </span><br><span class="line">      &#125;  </span><br><span class="line">      System.out.println(sb.toString());&#x2F;&#x2F;输出大数字符串  </span><br><span class="line">      return result;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="版本2"><a class="markdownIt-Anchor" href="#版本2"></a> 版本2</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 大数相乘2 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大数相乘基本思想，输入字符串，转成char数组，转成int数组。采用分治思想，每一位的相乘;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 公式：AB*CD = AC (BC+AD) BD , 然后从后到前满十进位(BD,(BC+AD),AC)。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//把字符串转换成char数组</span></span><br><span class="line">        <span class="keyword">char</span> chars1[] = num1.toCharArray();</span><br><span class="line">        <span class="keyword">char</span> chars2[] = num2.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明存放结果和两个乘积的容器</span></span><br><span class="line">        <span class="keyword">int</span> result[] = <span class="keyword">new</span> <span class="keyword">int</span>[chars1.length + chars2.length];</span><br><span class="line">        <span class="keyword">int</span> n1[] = <span class="keyword">new</span> <span class="keyword">int</span>[chars1.length];</span><br><span class="line">        <span class="keyword">int</span> n2[] = <span class="keyword">new</span> <span class="keyword">int</span>[chars2.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把char转换成int数组，为什么要减去一个'0'呢？因为要减去0的ascii码得到的就是实际的数字</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars1.length;i++)</span><br><span class="line">            n1[i] = chars1[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars2.length;i++)</span><br><span class="line">            n2[i] = chars2[i]-<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//逐个相乘，因为你会发现。AB*CD = AC(BC+AD)BD , 然后进位。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i &lt; chars1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; chars2.length; j++)&#123;</span><br><span class="line">                result[i+j]+=n1[i]*n2[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//满10进位，从后往前满十进位</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =result.length-<span class="number">1</span>; i &gt; <span class="number">0</span> ;i--)&#123;</span><br><span class="line">            result[i-<span class="number">1</span>] += result[i] / <span class="number">10</span>;</span><br><span class="line">            result[i] = result[i] % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转成string并返回</span></span><br><span class="line">        String resultStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            resultStr+=<span class="string">""</span>+result[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        大数相乘<span class="number">2</span> bm = <span class="keyword">new</span> 大数相乘<span class="number">2</span>();</span><br><span class="line">        System.out.println(<span class="string">"-----输入两个大数------"</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String num1 = scanner.next();</span><br><span class="line">        String num2 = scanner.next();</span><br><span class="line">        String result = bm.multiply(num1, num2);</span><br><span class="line">        System.out.println(<span class="string">"相乘结果为："</span>+result);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大数加法</title>
      <link href="/2020/03/3182193156.html"/>
      <url>/2020/03/3182193156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>大数加法</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 大数加法 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s1 = scan.next();</span><br><span class="line">String s2 = scan.next();</span><br><span class="line"><span class="keyword">int</span> len1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> len2 = s2.length();</span><br><span class="line"><span class="keyword">int</span>[] a1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">200</span>];  <span class="comment">//保证足够长</span></span><br><span class="line"><span class="keyword">int</span>[] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++) &#123;</span><br><span class="line">a1[i]  = s1.charAt(i)-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;i++) &#123;</span><br><span class="line">a2[i]  = s2.charAt(i)-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个数组按位相加</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a1[i]+=a2[i];</span><br><span class="line"><span class="keyword">if</span>(a1[i]&gt;<span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">a1[i]=a1[<span class="number">1</span>]-<span class="number">10</span>;</span><br><span class="line">a1[i+<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;                                               </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">199</span>;(i&gt;=<span class="number">0</span>)&amp;&amp;(a1[i]==<span class="number">0</span>);i--);                  <span class="comment">//从高位找出第一个不是零的数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    System.out.print(a1[i]);  <span class="comment">//输出数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DFS迷宫</title>
      <link href="/2020/03/2922706848.html"/>
      <url>/2020/03/2922706848.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>迷宫</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wolf on 2016/3/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DFS</span>迷宫 </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义迷宫数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[][] array = &#123; </span><br><span class="line">  &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, </span><br><span class="line">  &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, </span><br><span class="line">  &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, </span><br><span class="line">  &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxRow = <span class="number">5</span>;  <span class="comment">//行数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxLine = <span class="number">6</span>; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"得到一个解："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxRow; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxLine; j++) &#123;</span><br><span class="line"><span class="comment">//System.out.print(array[i][j] + " ");  //输出结果矩阵</span></span><br><span class="line"><span class="keyword">if</span>(array[i][j]==<span class="number">5</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">"(%d,%d)-&gt;"</span>,i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">"(%d,%d)"</span>,maxRow-<span class="number">1</span>,maxLine-<span class="number">1</span>);   <span class="comment">//如果右下角不是终点时，这一句要删掉</span></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canMove</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> targetI, <span class="keyword">int</span> targetJ)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      System.out.println("从第" + (i + 1) + "行第" + (j + 1) + "列，走到第" + (targetI + 1) + "行第" + (targetJ + 1) + "列");</span></span><br><span class="line"><span class="keyword">if</span> (targetI &lt; <span class="number">0</span> || targetJ &lt; <span class="number">0</span> || targetI &gt;= maxRow || targetJ &gt;= maxLine) &#123;</span><br><span class="line"><span class="comment">//          System.out.println("到达最左边或最右边，失败了");</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (array[targetI][targetJ] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//          System.out.println("目标是墙，失败了");</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 避免在两个空格间来回走</span></span><br><span class="line"><span class="keyword">if</span> (array[targetI][targetJ] == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="comment">//          System.out.println("来回走，失败了");</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果到达右下角出口</span></span><br><span class="line"><span class="keyword">if</span> (i == maxRow - <span class="number">1</span> &amp;&amp; j == maxLine - <span class="number">1</span>) &#123;  <span class="comment">//可更改终点.现在的终点是右下角</span></span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向右走</span></span><br><span class="line"><span class="keyword">if</span> (canMove(i, j, i, j + <span class="number">1</span>)) &#123;</span><br><span class="line">array[i][j] = <span class="number">5</span>;</span><br><span class="line">check(i, j + <span class="number">1</span>);</span><br><span class="line">array[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向左走</span></span><br><span class="line"><span class="keyword">if</span> (canMove(i, j, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">array[i][j] = <span class="number">5</span>;</span><br><span class="line">check(i, j - <span class="number">1</span>);</span><br><span class="line">array[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向下走</span></span><br><span class="line"><span class="keyword">if</span> (canMove(i, j, i + <span class="number">1</span>, j)) &#123;</span><br><span class="line">array[i][j] = <span class="number">5</span>;</span><br><span class="line">check(i + <span class="number">1</span>, j);</span><br><span class="line">array[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向上走</span></span><br><span class="line"><span class="keyword">if</span> (canMove(i, j, i - <span class="number">1</span>, j)) &#123;</span><br><span class="line">array[i][j] = <span class="number">5</span>;</span><br><span class="line">check(i - <span class="number">1</span>, j);</span><br><span class="line">array[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> DFS迷宫().check(<span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//可更改起点.现在的起点是左上角</span></span><br><span class="line"><span class="comment">// System.out.println(System.currentTimeMillis());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays的简单用法</title>
      <link href="/2020/03/561486859.html"/>
      <url>/2020/03/561486859.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Arrays的简单用法</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arrays</span>的简单用法 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> loc=Arrays.binarySearch(a,<span class="number">5</span>);  <span class="comment">//要求待查找数组必须有序</span></span><br><span class="line">System.out.println(loc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(Arrays.equals(a, b));  <span class="comment">//若相同则返回true</span></span><br><span class="line"></span><br><span class="line">Arrays.sort(b,<span class="number">2</span>,<span class="number">4</span>);  <span class="comment">//三个参数:分别为数组名,起始下标,终止下标+1. ,后两个参数可省略</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:b)         <span class="comment">//后两个参数可自定义位置,这就很实用,比如用于"区间最大数查询"的题目</span></span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//二分查找.如果找到,则正常返回下表,如果没有找到,则返回临近的地方</span></span><br><span class="line"><span class="comment">int search(int* nums, int numsSize, int target) &#123;</span></span><br><span class="line"><span class="comment">    int left=0;int right=numsSize-1;</span></span><br><span class="line"><span class="comment">    while(left&lt;=right)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int mid=left+(right-left)/2;</span></span><br><span class="line"><span class="comment">        if(target==nums[mid]) return mid;</span></span><br><span class="line"><span class="comment">        else if(target&lt;nums[mid])</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            right=mid-1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            left=mid+1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return left;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二分（模糊）查找+插入</title>
      <link href="/2020/03/345007930.html"/>
      <url>/2020/03/345007930.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>二分（模糊）查找+插入</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>;<span class="keyword">int</span> right=numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==nums[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//原数组为a的前5个数，a的总长度为6</span></span><br><span class="line">    <span class="comment">//想插入的值：a[5]</span></span><br><span class="line">       <span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"插入前的数组："</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">int</span> loca=search(a,<span class="number">6</span>,a[<span class="number">5</span>]);</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"应改将a[5]插入到下标为"</span>&lt;&lt;loca&lt;&lt;<span class="string">"的地方"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"插入后的数组："</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//插入过程</span></span><br><span class="line">       <span class="keyword">int</span> temp=a[<span class="number">5</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">5</span>;s&gt;loca;s--)</span><br><span class="line">       &#123;</span><br><span class="line">           a[s]=a[s<span class="number">-1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       a[loca]=temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python合并多个pdf文件</title>
      <link href="/2020/03/2245832969.html"/>
      <url>/2020/03/2245832969.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>PyPDF2 是一个功能虽然不是很多，但却非常好用的第三方库，它提供了pdf文件的读写，拆分，合并等功能.</p><ol><li>使用os.listdir方法获取制定目录下的所有pdf文件名称</li><li>使用os.path.join方法拼接成绝对路径</li><li>创建PdfFileMerger对象，这是专门用来合并pdf文件的对象</li><li>将所有文件append</li><li>最后，使用write方法将所有pdf文件写入到一个文件</li></ol><a id="more"></a><h4 id="使用pip命令进行安装"><a class="markdownIt-Anchor" href="#使用pip命令进行安装"></a> 使用pip命令进行安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyPDF2</span><br></pre></td></tr></table></figure><h4 id="运行代码"><a class="markdownIt-Anchor" href="#运行代码"></a> 运行代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileMerger</span><br><span class="line"></span><br><span class="line">target_path = <span class="string">'D:\\test\\pdf'</span></span><br><span class="line">pdf_lst = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(target_path) <span class="keyword">if</span> f.endswith(<span class="string">'.pdf'</span>)]    <span class="comment">#寻找该目录下所有pdf文件</span></span><br><span class="line">pdf_lst = [os.path.join(target_path, filename) <span class="keyword">for</span> filename <span class="keyword">in</span> pdf_lst]</span><br><span class="line"></span><br><span class="line">file_merger = PdfFileMerger()</span><br><span class="line"><span class="keyword">for</span> pdf <span class="keyword">in</span> pdf_lst:</span><br><span class="line">    file_merger.append(pdf)     <span class="comment"># 合并pdf文件</span></span><br><span class="line"></span><br><span class="line">file_merger.write(<span class="string">"D:\\test\\merge.pdf"</span>)</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html引用github上js、css文件的方法</title>
      <link href="/2020/03/952691950.html"/>
      <url>/2020/03/952691950.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>总结一下魔改博客时所需要的js、css文件引入的问题。</p><a id="more"></a><h4 id="一种可以满足页面打开时就加载网上js-css文件的办法对于指定页面"><a class="markdownIt-Anchor" href="#一种可以满足页面打开时就加载网上js-css文件的办法对于指定页面"></a> 一种可以满足“页面打开时就加载网上js、css文件的办法”（对于指定页面）</h4><p>即：将文件放在github仓库中，在<code>index.md</code>中使用<code>src=&quot;https://raw.githack.com/[账户名]/[仓库名]/master/[文件名]&quot;</code>来引用</p><p> </p><p>假如有如下的js文件想在html代码中引入，怎么弄呢？</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/html%E5%BC%95%E7%94%A8github%E4%B8%8Ajs%E3%80%81css%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/1.png" alt="" /></p><p>错误方式1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"https://github.com/han-suyu/others/blob/master/sudoku.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> </p><p>错误方式2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"https://raw.githubusercontent.com/han-suyu/others/master/sudoku.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> </p><p>错误方式3：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"//https://raw.githubusercontent.com/han-suyu/others/master/sudoku.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> </p><p>错误方式4：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"http://raw.githack.com/han-suyu/others/master/sudoku.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> </p><p>正确方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"https://raw.githack.com/han-suyu/others/master/sudoku.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> </p><p><strong>即：</strong></p><ul><li>把<code>raw.githubusercontent.com</code>替换成：<code>raw.githack.com</code></li><li>把<code>http</code>替换成<code>https</code></li><li><code>https</code>前不能加<code>//</code></li></ul><h4 id="一种可以满足页面打开时就加载本地js-css文件的办法对于所有页面"><a class="markdownIt-Anchor" href="#一种可以满足页面打开时就加载本地js-css文件的办法对于所有页面"></a> 一种可以满足“页面打开时就加载本地js、css文件的办法”（对于所有页面）</h4><p>将js、css文件放在<code>themes\next\source</code>中。</p><p>比如有<code>themes\next\source\test\js\snow.js</code>和<code>themes\next\source\test\css\style.css</code></p><p>在<code>themes\next\layout\_layout.swig</code>中添加引用，详细为：</p><ul><li><p>如果是css文件，则在<head></head>标签中添加引用</p><p>例如：<link rel="stylesheet" href="/test/style.css"></p></li><li><p>如果是css文件，则在<body></body>标签中添加引用</p><p>例如：<script src="/test/snow.js"></script></p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Experience </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python统计指定目录下任意编程语言的代码行数</title>
      <link href="/2020/02/377710700.html"/>
      <url>/2020/02/377710700.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="目的统计指定目录下任意编程语言的代码行数"><a class="markdownIt-Anchor" href="#目的统计指定目录下任意编程语言的代码行数"></a> 目的：统计指定目录下任意编程语言的代码行数。</h5><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E4%BD%BF%E7%94%A8python%E7%BB%9F%E8%AE%A1%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E4%BB%BB%E6%84%8F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/%E7%BB%93%E6%9E%842.png" alt="" /></p><p> </p><a id="more"></a><h5 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h5><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 设定根目录</span></span><br><span class="line">basedir = <span class="string">'./'</span>     <span class="comment">#这种写法表示：与本文件在同一目录下的所有文件及文件夹中的多层文件</span></span><br><span class="line">filelists = []</span><br><span class="line"><span class="comment"># 指定想要统计的文件类型</span></span><br><span class="line"><span class="comment"># whitelist = ['cpp', 'h']</span></span><br><span class="line">whitelist = [<span class="string">'java'</span>, <span class="string">'xml'</span>, <span class="string">'yml'</span>, <span class="string">'jsp'</span>, <span class="string">'html'</span>]</span><br><span class="line"><span class="comment">#遍历文件, 递归遍历文件夹中的所有</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFile</span><span class="params">(basedir)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> filelists</span><br><span class="line">    <span class="keyword">for</span> parent,dirnames,filenames <span class="keyword">in</span> os.walk(basedir):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            ext = filename.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">            <span class="comment">#只统计指定的文件类型，略过一些log和cache文件</span></span><br><span class="line">            <span class="keyword">if</span> ext <span class="keyword">in</span> whitelist:</span><br><span class="line">                filelists.append(os.path.join(parent,filename))</span><br><span class="line"><span class="comment">#统计一个的行数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countLine</span><span class="params">(fname)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 把文件做二进制看待,read.</span></span><br><span class="line">    <span class="keyword">for</span> file_line <span class="keyword">in</span> open(fname, <span class="string">'rb'</span>).readlines():</span><br><span class="line">        <span class="keyword">if</span> file_line != <span class="string">''</span> <span class="keyword">and</span> file_line != <span class="string">'\n'</span>: <span class="comment">#过滤掉空行</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> (fname + <span class="string">'----'</span> , count)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    startTime = time.clock()</span><br><span class="line">    getFile(basedir)</span><br><span class="line">    totalline = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> filelist <span class="keyword">in</span> filelists:</span><br><span class="line">        totalline = totalline + countLine(filelist)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'total lines:'</span>,totalline)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Done! Cost Time: %0.2f second'</span> % (time.clock() - startTime))</span><br></pre></td></tr></table></figure>    </div></div><p> </p><h5 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果：</h5><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p><code>c代码测试</code></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E4%BD%BF%E7%94%A8python%E7%BB%9F%E8%AE%A1%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E4%BB%BB%E6%84%8F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/c%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95.png" alt="" /></p><p><code>Java代码测试</code></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E4%BD%BF%E7%94%A8python%E7%BB%9F%E8%AE%A1%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E4%BB%BB%E6%84%8F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/Java%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95.png" alt="" /></p><p>…</p>    </div></div><p> </p><blockquote><p>参考：实验楼</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫--百度图片</title>
      <link href="/2020/02/1038355136.html"/>
      <url>/2020/02/1038355136.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><code>制作一个爬虫一般分以下几个步骤：</code></p><ul><li>分析需求</li><li>分析网页源代码，配合开发者工具</li><li>编写正则表达式或者XPath表达式</li><li>正式编写 python 爬虫代码</li></ul><a id="more"></a><h5 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h5><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dowmloadPic</span><span class="params">(html, keyword,limit)</span>:</span></span><br><span class="line">    pic_url = re.findall(<span class="string">'"objURL":"(.*?)",'</span>, html, re.S)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    print(<span class="string">'已找到关键词:'</span> + keyword + <span class="string">'的图片，现在开始下载图片...'</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> pic_url:</span><br><span class="line">        print(<span class="string">'正在下载第'</span> + str(i) + <span class="string">'张图片，图片地址:'</span> + str(each))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pic = requests.get(each, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">            print(<span class="string">'【错误】当前图片无法下载'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        dir = <span class="string">'./images/'</span> + keyword + <span class="string">'_'</span> + str(i) + <span class="string">'.jpg'</span></span><br><span class="line">        fp = open(dir, <span class="string">'wb'</span>)</span><br><span class="line">        fp.write(pic.content)</span><br><span class="line">        fp.close()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; limit:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    word = input(<span class="string">"请输入搜索关键词: "</span>)</span><br><span class="line">    limit = int(input(<span class="string">"请输入下载数量: "</span>))</span><br><span class="line">    url = <span class="string">'http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word='</span> + word + <span class="string">'&amp;ct=201326592&amp;v=flip'</span></span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    dowmloadPic(result.text, word,limit)</span><br></pre></td></tr></table></figure>    </div></div><h5 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h5><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E7%88%AC%E8%99%AB--%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87/%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87%E7%88%AC%E8%99%AB.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E7%88%AC%E8%99%AB--%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87/%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96%E7%BB%93%E6%9E%9C.png" alt="" /></p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归理解</title>
      <link href="/2020/02/1112428083.html"/>
      <url>/2020/02/1112428083.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一分组问题"><a class="markdownIt-Anchor" href="#一分组问题"></a> 一.分组问题</h4><p>题目：用递归法计算从n个人中选选k个人组成一个委员会的不同组合数。<br />分析：由n个人里选k个人的组合数 = 由n-1个人里选k个人的组合数 + 由n-1个人里选k-1个人的组合数；当n = k或k = 0时，组合数为1。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*双递归的执行过程，可以借助二叉树结构来描述*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comm</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">//排除n &lt; k的情况</span></span><br><span class="line"><span class="keyword">if</span> (n &lt; k) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == k || k == <span class="number">0</span>)<span class="comment">//递归函数的出口</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//两个递归深入点，但是同函数中左右深入点的深入层次并不一定相同</span></span><br><span class="line"><span class="keyword">return</span> comm(n - <span class="number">1</span>, k) + comm(n <span class="number">-1</span>, k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; comm(n, k);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二双递归函数的执行顺序"><a class="markdownIt-Anchor" href="#二双递归函数的执行顺序"></a> 二.双递归函数的执行顺序</h4><p>双递归的执行过程，可以借助二叉树结构来描述：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E9%80%92%E5%BD%92%E7%90%86%E8%A7%A3/%E9%80%92%E5%BD%92.png" alt="二叉树描述双递归执行过程" /></p><ol><li><p>程序从首先左端的递归深入点进入，再次调用函数(4, 3)，再次从左侧深入点(3, 3)深入。此时得到第一个递归的终止条件：n = k，组合数为1，将1返回给父级节点；在此之前，(4, 3)右端的函数深入点并未执行，而是作为没有执行完毕的函数被保存在栈中。此时则是执行(4, 3)右侧递归深入点(3, 2)函数。剩余执行过程由红色箭头标识，不再一一说明。</p></li><li><p>无论执行左侧还是右侧函数，调用时必定先执行左子树所代表的函数。若此时这棵左子树依然存在后代，则先执行它的左子树函数，然后循环此逻辑；直到左子树没有下级节点时，那么就返回它的上级节点，来执行上级节点的右子树函数。</p></li><li><p>使用二叉树表示的双递归函数执行过程中，任何一个节点若存在子节点，那么它的左后代与右后代必然是同时存在的。原因就在于在递归调用函数时，两个调用自身的函数也是同时存在的。</p></li><li><p>当一个节点找到递归出口时，那么与它有相同父级节点的兄弟节点不会停止递归深入，直到得到一个可以返回的值为止(即找到递归出口)。所以，叶子结点返回值逐级累加，所有的返回值之和，就是题目所求结果，也就是整个递归最外层函数的返回值即函数调用者(此题为main函数)所需要的结果。</p></li><li><p>可以使用断点调试对变量进行监视，从而更好地理解双深入点递归函数的执行过程。</p></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加相册模块</title>
      <link href="/2020/02/2750704410.html"/>
      <url>/2020/02/2750704410.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-安装fancybox功能"><a class="markdownIt-Anchor" href="#1-安装fancybox功能"></a> 1. 安装fancybox功能</h3><p>fancybox功能主要用于实现相册图片的点击放大。安装过程如下：</p><blockquote><p>打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true<br />进入到theme/next/文件夹下，打开git bash。执行如下命令：<br />git clone <a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/theme-next/theme-next-fancybox3</a> source/lib/fancybox</p></blockquote><h3 id="2-图片处理"><a class="markdownIt-Anchor" href="#2-图片处理"></a> 2. 图片处理</h3><p>相册图片是存放在Github仓库中，首先在本地服务器中建立名为album的文件夹，其中子文件夹/photos用来存放图片，目录树如下：</p><blockquote><p>注意：图片命名方式：2017-02-02_test.jpg，即“ 时间_名称 ”。</p><p>另外：对图片的描述性话语，就是图像的名称部分。图像放大后可显示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">album</span><br><span class="line">│</span><br><span class="line">└───min_photos</span><br><span class="line">│</span><br><span class="line">└───photos</span><br><span class="line">│   ├───2017-02-02_test1.jpg</span><br><span class="line">│   └───2017-02-02_test2.jpg</span><br><span class="line">│    </span><br><span class="line">└───ImageProcess.py</span><br><span class="line">│</span><br><span class="line">└───tool.py</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://dev.tencent.com/u/cherryzzangg/p/Hexo-Workspace/git/blob/master/album/ImageProcess.py" target="_blank" rel="noopener external nofollow noreferrer">ImageProcess.py</a> ——对图片进行压缩编辑；</p></li><li><p>安装PIL库，只需执行：<code>pip install Pillow</code>；</p></li><li><p>在/hexo/themes/next/source/lib中新建一个文件夹album，修改<code>tool.py</code>中自己的json文件保存路径，此文件存储了图片的链接，名称和简介。</p><p>复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"YourBolgPath/themes/next/source/lib/album/data.json"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(final_dict, fp, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>为了保证相册按时间顺序排列，在函数<code>handle_photo</code>中进行修改；</p><p>复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_list = sorted(list_img_file(src_dir),reverse=<span class="literal">True</span>)  <span class="comment">#按时间反向排序！！反向！</span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本<a href="https://dev.tencent.com/u/cherryzzangg/p/Hexo-Workspace/git/blob/master/album/tool.py" target="_blank" rel="noopener external nofollow noreferrer">tool.py</a>文件，生成<code>data.json</code>，并上传到Github。（可拖拽上传）</p><blockquote><p>注意：如果图片命名中有中文，一定要将data.json另存为utf-8编码再上传。否则图片路径会乱码导致无法显示！！</p></blockquote></li></ul><h3 id="3-博客相册页面"><a class="markdownIt-Anchor" href="#3-博客相册页面"></a> 3. 博客相册页面</h3><ul><li><p>在博客根目录下添加photo页面；</p><p><code>hexo n page photos</code></p></li><li><p>在themes/next/_config.yml配置文件中menu选项中添加photos:</p></li></ul><p>复制</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  相册: /photos/  || camera</span><br></pre></td></tr></table></figure><ul><li>在photos中的index.md添加如下代码</li></ul><p><strong>【请直接复制下面的代码】</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 时光相册</span><br><span class="line">date: <span class="number">2019</span><span class="number">-02</span><span class="number">-14</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">30</span></span><br><span class="line">type: photos</span><br><span class="line">fancybox: <span class="literal">false</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../lib/album/ins.css"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../lib/album/photoswipe.css"</span>&gt; </span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../lib/album/default-skin/default-skin.css"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"instagram itemscope"</span>&gt;</span><br><span class="line">  &lt;a href=<span class="string">"https://yoursite.com"</span> target=<span class="string">"_blank"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"open-ins"</span>&gt;图片正在加载中…&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loadScript = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild($script)</span><br><span class="line">      $script.setAttribute(<span class="string">'src'</span>, path)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadScript(<span class="string">'../lib/album/ins.js'</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;)()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>注意修改源路径为你自己博客的域名。</p><h3 id="4-jscss文件"><a class="markdownIt-Anchor" href="#4-jscss文件"></a> 4. js&amp;CSS文件</h3><ul><li><p>将<a href="https://dev.tencent.com/u/cherryzzangg/p/Hexo-Workspace/git/blob/master/blog/themes/next/source/js/src/photoswipe-ui-default.min.js" target="_blank" rel="noopener external nofollow noreferrer">photoswipe-ui-default.min.js</a>，<a href="https://dev.tencent.com/u/cherryzzangg/p/Hexo-Workspace/git/blob/master/blog/themes/next/source/js/src/photoswipe.min.js" target="_blank" rel="noopener external nofollow noreferrer">photoswipe.min.js</a>两个文件添加到<code>themes/next/source/js/src</code>中；</p></li><li><p>在<code>themes\next\source\lib\album</code>目录下，添加如下文件：</p><p><a href="https://github.com/malizhigithub/HexoAlbumData/tree/master/JS%26CSS" target="_blank" rel="noopener external nofollow noreferrer">下载位置</a></p></li><li><p>对<code>themes\next\source\lib\album\ins.js</code>文件进行一个简单的修正，将里面大约在121和122行左右的连接修改为你的图片链接地址</p><blockquote><p>注意：图片的链接都是<a href="https://raw.githubusercontent.com/" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com</a> 开头的，不是图片的存储地址，否则加载不出。会报“跨域请求出错”的错误。</p></blockquote></li></ul><p> </p><p><code>themes\next\source\lib\album</code>效果图：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%A8%A1%E5%9D%97/1.png" alt="" /></p><h3 id="5-其他配置"><a class="markdownIt-Anchor" href="#5-其他配置"></a> 5. 其他配置</h3><ul><li>引用配置在<code>next/layout/_layout.swig</code>的头部前添加对js文件的引用如下：</li></ul><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="&#123;&#123; url_for(theme.js) &#125;&#125;/</span>src/photoswipe-ui-<span class="keyword">default</span>.min.js?v=&#123;&#123; theme.version &#125;&#125;<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在body中添加如下的内容：</li></ul><p>复制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.type === "photos" %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__scroll-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__ui pswp__ui--hidden"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__top-bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--close"</span> <span class="attr">title</span>=<span class="string">"Close (Esc)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--share"</span> <span class="attr">title</span>=<span class="string">"Share"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--fs"</span> <span class="attr">title</span>=<span class="string">"Toggle fullscreen"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--zoom"</span> <span class="attr">title</span>=<span class="string">"Zoom in/out"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- element will get class pswp__preloader--active when preloader is running --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__icn"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__cut"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__donut"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-modal pswp__share-modal--hidden pswp__single-tap"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--left"</span> <span class="attr">title</span>=<span class="string">"Previous (arrow left)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--right"</span> <span class="attr">title</span>=<span class="string">"Next (arrow right)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption__center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>/themes/next/layout/_scripts/pages/post-details.swig</code>中添加：</li></ul><p>复制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改相册时间轴年份CSS样式</li></ul><p>复制</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.instagram</span> <span class="selector-class">.year</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">color: #555; //修改成自己的配色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6预览"><a class="markdownIt-Anchor" href="#6预览"></a> 6.预览</h3><p><a href="https://han-suyu.top/photos/" target="_blank" rel="noopener external nofollow noreferrer">我的相册</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用命令行下载网络视频和音乐---硬核且清新脱俗的you-get</title>
      <link href="/2020/02/1759863016.html"/>
      <url>/2020/02/1759863016.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>功能说明</strong></p><p>you-get是一个非常优秀的网站视频下载工具。使用you-ge可以很轻松的下载到网络上的视频、图片及音乐。</p><p> </p><a id="more"></a><p>目前这款工具对常用网站的内容下载支持如下，我觉得已经支持的很多了有木有：</p><table><thead><tr><th style="text-align:center">Site</th><th style="text-align:left">URL</th><th style="text-align:center">Videos?</th><th style="text-align:center">Images?</th><th style="text-align:center">Audios?</th></tr></thead><tbody><tr><td style="text-align:center"><strong>YouTube</strong></td><td style="text-align:left"><a href="https://www.youtube.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.youtube.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Twitter</strong></td><td style="text-align:left"><a href="https://twitter.com/" target="_blank" rel="noopener external nofollow noreferrer">https://twitter.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">VK</td><td style="text-align:left"><a href="http://vk.com/" target="_blank" rel="noopener external nofollow noreferrer">http://vk.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Vine</td><td style="text-align:left"><a href="https://vine.co/" target="_blank" rel="noopener external nofollow noreferrer">https://vine.co/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Vimeo</td><td style="text-align:left"><a href="https://vimeo.com/" target="_blank" rel="noopener external nofollow noreferrer">https://vimeo.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Vidto</td><td style="text-align:left"><a href="http://vidto.me/" target="_blank" rel="noopener external nofollow noreferrer">http://vidto.me/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Videomega</td><td style="text-align:left"><a href="http://videomega.tv/" target="_blank" rel="noopener external nofollow noreferrer">http://videomega.tv/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Veoh</td><td style="text-align:left"><a href="http://www.veoh.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.veoh.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Tumblr</strong></td><td style="text-align:left"><a href="https://www.tumblr.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.tumblr.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">TED</td><td style="text-align:left"><a href="http://www.ted.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.ted.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">SoundCloud</td><td style="text-align:left"><a href="https://soundcloud.com/" target="_blank" rel="noopener external nofollow noreferrer">https://soundcloud.com/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">SHOWROOM</td><td style="text-align:left"><a href="https://www.showroom-live.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.showroom-live.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Pinterest</td><td style="text-align:left"><a href="https://www.pinterest.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.pinterest.com/</a></td><td style="text-align:center"></td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">MusicPlayOn</td><td style="text-align:left"><a href="http://en.musicplayon.com/" target="_blank" rel="noopener external nofollow noreferrer">http://en.musicplayon.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">MTV81</td><td style="text-align:left"><a href="http://www.mtv81.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.mtv81.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Mixcloud</td><td style="text-align:left"><a href="https://www.mixcloud.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.mixcloud.com/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">Metacafe</td><td style="text-align:left"><a href="http://www.metacafe.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.metacafe.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Magisto</td><td style="text-align:left"><a href="http://www.magisto.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.magisto.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Khan Academy</td><td style="text-align:left"><a href="https://www.khanacademy.org/" target="_blank" rel="noopener external nofollow noreferrer">https://www.khanacademy.org/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Internet Archive</td><td style="text-align:left"><a href="https://archive.org/" target="_blank" rel="noopener external nofollow noreferrer">https://archive.org/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Instagram</strong></td><td style="text-align:left"><a href="https://instagram.com/" target="_blank" rel="noopener external nofollow noreferrer">https://instagram.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">InfoQ</td><td style="text-align:left"><a href="http://www.infoq.com/presentations/" target="_blank" rel="noopener external nofollow noreferrer">http://www.infoq.com/presentations/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Imgur</td><td style="text-align:left"><a href="http://imgur.com/" target="_blank" rel="noopener external nofollow noreferrer">http://imgur.com/</a></td><td style="text-align:center"></td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Heavy Music Archive</td><td style="text-align:left"><a href="http://www.heavy-music.ru/" target="_blank" rel="noopener external nofollow noreferrer">http://www.heavy-music.ru/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center"><strong>Google+</strong></td><td style="text-align:left"><a href="https://plus.google.com/" target="_blank" rel="noopener external nofollow noreferrer">https://plus.google.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Freesound</td><td style="text-align:left"><a href="http://www.freesound.org/" target="_blank" rel="noopener external nofollow noreferrer">http://www.freesound.org/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">Flickr</td><td style="text-align:left"><a href="https://www.flickr.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.flickr.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">FC2 Video</td><td style="text-align:left"><a href="http://video.fc2.com/" target="_blank" rel="noopener external nofollow noreferrer">http://video.fc2.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Facebook</td><td style="text-align:left"><a href="https://www.facebook.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.facebook.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">eHow</td><td style="text-align:left"><a href="http://www.ehow.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.ehow.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Dailymotion</td><td style="text-align:left"><a href="http://www.dailymotion.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.dailymotion.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Coub</td><td style="text-align:left"><a href="http://coub.com/" target="_blank" rel="noopener external nofollow noreferrer">http://coub.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">CBS</td><td style="text-align:left"><a href="http://www.cbs.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.cbs.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Bandcamp</td><td style="text-align:left"><a href="http://bandcamp.com/" target="_blank" rel="noopener external nofollow noreferrer">http://bandcamp.com/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">AliveThai</td><td style="text-align:left"><a href="http://alive.in.th/" target="_blank" rel="noopener external nofollow noreferrer">http://alive.in.th/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="http://interest.me" target="_blank" rel="noopener external nofollow noreferrer">interest.me</a></td><td style="text-align:left"><a href="http://ch.interest.me/tvn" target="_blank" rel="noopener external nofollow noreferrer">http://ch.interest.me/tvn</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>755</strong>** ナナゴーゴー**</td><td style="text-align:left"><a href="http://7gogo.jp/" target="_blank" rel="noopener external nofollow noreferrer">http://7gogo.jp/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>niconico</strong>** ニコニコ動画**</td><td style="text-align:left"><a href="http://www.nicovideo.jp/" target="_blank" rel="noopener external nofollow noreferrer">http://www.nicovideo.jp/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>163</strong>** 网易视频 网易云音乐**</td><td style="text-align:left"><a href="http://v.163.com/" target="_blank" rel="noopener external nofollow noreferrer">http://v.163.com/</a> <a href="http://music.163.com/" target="_blank" rel="noopener external nofollow noreferrer">http://music.163.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">56网</td><td style="text-align:left"><a href="http://www.56.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.56.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>AcFun</strong></td><td style="text-align:left"><a href="http://www.acfun.tv/" target="_blank" rel="noopener external nofollow noreferrer">http://www.acfun.tv/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Baidu</strong>** 百度贴吧**</td><td style="text-align:left"><a href="http://tieba.baidu.com/" target="_blank" rel="noopener external nofollow noreferrer">http://tieba.baidu.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">爆米花网</td><td style="text-align:left"><a href="http://www.baomihua.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.baomihua.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>bilibili</strong>** 哔哩哔哩**</td><td style="text-align:left"><a href="http://www.bilibili.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.bilibili.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">豆瓣</td><td style="text-align:left"><a href="http://www.douban.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.douban.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">斗鱼</td><td style="text-align:left"><a href="http://www.douyutv.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.douyutv.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Panda 熊猫</td><td style="text-align:left"><a href="http://www.panda.tv/" target="_blank" rel="noopener external nofollow noreferrer">http://www.panda.tv/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">凤凰视频</td><td style="text-align:left"><a href="http://v.ifeng.com/" target="_blank" rel="noopener external nofollow noreferrer">http://v.ifeng.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">风行网</td><td style="text-align:left"><a href="http://www.fun.tv/" target="_blank" rel="noopener external nofollow noreferrer">http://www.fun.tv/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">iQIYI 爱奇艺</td><td style="text-align:left"><a href="http://www.iqiyi.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.iqiyi.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">激动网</td><td style="text-align:left"><a href="http://www.joy.cn/" target="_blank" rel="noopener external nofollow noreferrer">http://www.joy.cn/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">酷6网</td><td style="text-align:left"><a href="http://www.ku6.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.ku6.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">酷狗音乐</td><td style="text-align:left"><a href="http://www.kugou.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.kugou.com/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">酷我音乐</td><td style="text-align:left"><a href="http://www.kuwo.cn/" target="_blank" rel="noopener external nofollow noreferrer">http://www.kuwo.cn/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">乐视网</td><td style="text-align:left"><a href="http://www.le.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.le.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">荔枝FM</td><td style="text-align:left"><a href="http://www.lizhi.fm/" target="_blank" rel="noopener external nofollow noreferrer">http://www.lizhi.fm/</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">秒拍</td><td style="text-align:left"><a href="http://www.miaopai.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.miaopai.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">MioMio弹幕网</td><td style="text-align:left"><a href="http://www.miomio.tv/" target="_blank" rel="noopener external nofollow noreferrer">http://www.miomio.tv/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">痞客邦</td><td style="text-align:left"><a href="https://www.pixnet.net/" target="_blank" rel="noopener external nofollow noreferrer">https://www.pixnet.net/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">PPTV聚力</td><td style="text-align:left"><a href="http://www.pptv.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.pptv.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">齐鲁网</td><td style="text-align:left"><a href="http://v.iqilu.com/" target="_blank" rel="noopener external nofollow noreferrer">http://v.iqilu.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">QQ 腾讯视频</td><td style="text-align:left"><a href="http://v.qq.com/" target="_blank" rel="noopener external nofollow noreferrer">http://v.qq.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">企鹅直播</td><td style="text-align:left"><a href="http://live.qq.com/" target="_blank" rel="noopener external nofollow noreferrer">http://live.qq.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Sina 新浪视频 微博秒拍视频</td><td style="text-align:left"><a href="http://video.sina.com.cn/" target="_blank" rel="noopener external nofollow noreferrer">http://video.sina.com.cn/</a> <a href="http://video.weibo.com/" target="_blank" rel="noopener external nofollow noreferrer">http://video.weibo.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Sohu 搜狐视频</td><td style="text-align:left"><a href="http://tv.sohu.com/" target="_blank" rel="noopener external nofollow noreferrer">http://tv.sohu.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Tudou</strong>** 土豆**</td><td style="text-align:left"><a href="http://www.tudou.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.tudou.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">虾米</td><td style="text-align:left"><a href="http://www.xiami.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.xiami.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">阳光卫视</td><td style="text-align:left"><a href="http://www.isuntv.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.isuntv.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>音悦Tai</strong></td><td style="text-align:left"><a href="http://www.yinyuetai.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.yinyuetai.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Youku</strong>** 优酷**</td><td style="text-align:left"><a href="http://www.youku.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.youku.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">战旗TV</td><td style="text-align:left"><a href="http://www.zhanqi.tv/lives" target="_blank" rel="noopener external nofollow noreferrer">http://www.zhanqi.tv/lives</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">央视网</td><td style="text-align:left"><a href="http://www.cntv.cn/" target="_blank" rel="noopener external nofollow noreferrer">http://www.cntv.cn/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Naver 네이버</td><td style="text-align:left"><a href="http://tvcast.naver.com/" target="_blank" rel="noopener external nofollow noreferrer">http://tvcast.naver.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">芒果TV</td><td style="text-align:left"><a href="http://www.mgtv.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.mgtv.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">火猫TV</td><td style="text-align:left"><a href="http://www.huomao.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.huomao.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">阳光宽频网</td><td style="text-align:left"><a href="http://www.365yg.com/" target="_blank" rel="noopener external nofollow noreferrer">http://www.365yg.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">西瓜视频</td><td style="text-align:left"><a href="https://www.ixigua.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.ixigua.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">快手</td><td style="text-align:left"><a href="https://www.kuaishou.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.kuaishou.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">抖音</td><td style="text-align:left"><a href="https://www.douyin.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.douyin.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">TikTok</td><td style="text-align:left"><a href="https://www.tiktok.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.tiktok.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">中国体育(TV)</td><td style="text-align:left"><a href="http://v.zhibo.tv/" target="_blank" rel="noopener external nofollow noreferrer">http://v.zhibo.tv/</a> <a href="http://video.zhibo.tv/" target="_blank" rel="noopener external nofollow noreferrer">http://video.zhibo.tv/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">知乎</td><td style="text-align:left"><a href="https://www.zhihu.com/" target="_blank" rel="noopener external nofollow noreferrer">https://www.zhihu.com/</a></td><td style="text-align:center">✓</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p><strong>工具安装</strong></p><p>这款工具基于 python，而且是 python3，因此也推荐大家使用 pip 的方式来进行安装和升级。</p><p>安装好 python3 后，接下来的操作就很简单啦，直接一句 pip install 就可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install you-get</span><br></pre></td></tr></table></figure><p><strong>工具使用</strong></p><p>要下载什么东西，首先打开要下载的网页，得到视频、音频的具体网址。然后我们打开终端，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -i 网址</span><br></pre></td></tr></table></figure><p>这个命令的作用是先检查一下这个视频，看能否被识别。如果可以下载的话，会列出可下载的各个版本，包括文件大小的清晰度。</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%BB%9C%E8%A7%86%E9%A2%91%E5%92%8C%E9%9F%B3%E4%B9%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%A1%AC%E6%A0%B8%E4%B8%94%E6%B8%85%E6%96%B0%E8%84%B1%E4%BF%97%E7%9A%84you-get/1.png" alt="" /></p><p>注意到上面的 download-with 这几句了吗，这句是提示你，如果要下载某个清晰度的视频，应该用哪个命令。</p><p>我们来下载一个高清720P，所以再次输入下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get --format&#x3D;flv720 网址</span><br></pre></td></tr></table></figure><p>经过一段欢快的进度条，视频就下好啦。</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%BB%9C%E8%A7%86%E9%A2%91%E5%92%8C%E9%9F%B3%E4%B9%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%A1%AC%E6%A0%B8%E4%B8%94%E6%B8%85%E6%96%B0%E8%84%B1%E4%BF%97%E7%9A%84you-get/2.png" alt="" /></p><p>在下载小破站视频时发现，一般有两种格式，一种是 mp4 后缀，一种是 flv 后缀，使用此工具下载 flv 后缀的视频没啥问题，但下载 mp4 后缀时，会发现下载得到的音频和视频是分离成两个文件的，还得后续自己手动处理下，略有点麻烦。</p><p>有趣的地方是，这个工具还能顺便下载了小破站的弹幕，因吹斯汀。</p><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/ZEmpuicAoZFGH6ME0EX0AWsKCv0llCASmDk0ib19GYhhKQmNvMq39CsIdB9DVDg8uibBDOpNYRknWx2YtkM1tbicJQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" /></p><p>不过我又想试试它在其他网站的表现，实测拿这款工具下载网易云音乐、爱奇艺视频时，都遇到了点问题无法下载（😓），有点翻车，拿来下载 youtube 倒还不错，速度也很ok。也可以理解，毕竟每个网站都有自己的一套格式，要同时支持这么多网站的下载并不容易，就跟做爬虫似的，网站也日常改版，可能稍微一点改版，原有的下载方式就不能用了。</p><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/ZEmpuicAoZFGH6ME0EX0AWsKCv0llCASm7QJERLFjicSvmWa0mI1OSqqTNcRq8GCmKKSGoFwXkmY1COiagyvcjjqg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" /></p><p>那综上所述，我认为这个工具还是很不错的，至少你只需要两步——先看info看看视频是否支持下载，有哪些格式——再就选择合适的格式，按照给出的download-with命令进行下载就可以了。在交互上，命令行乍看起来还是有一点点硬核，但熟悉后确实简洁又方便啊。</p><p><strong>功能扩展</strong></p><p>如果需要配置proxy代理，可以按照官网给出的方式添加此参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -x 127.0.0.1:8087 https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw</span><br></pre></td></tr></table></figure><p>如果你不想下载视频，想通过其他软件或者浏览器在线观看，可以使用直接播放模式，将视频流传递给其他播放器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -p vlc https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw</span><br></pre></td></tr></table></figure><p>如果有的网站需要登录才能看到某些视频，你还可以配置将cookie传递给you-get。详情参见官方网站说明吧。</p><p> </p><p> </p><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s/NnaMxh4y-6Lv8sMllZo_ig" target="_blank" rel="noopener external nofollow noreferrer">https://mp.weixin.qq.com/s/NnaMxh4y-6Lv8sMllZo_ig</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动生成LR(0)语法分析表</title>
      <link href="/2020/01/3876003042.html"/>
      <url>/2020/01/3876003042.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一-实验名称"><a class="markdownIt-Anchor" href="#一-实验名称"></a> 一、实验名称</h3><p>​    自动生成LR（0）分析表</p><h3 id="二-实验目的"><a class="markdownIt-Anchor" href="#二-实验目的"></a> 二、实验目的</h3><p>1、实现计算闭包函数CLOSURE的算法。</p><p>2、实现转向函数GO(I,X)的算法。</p><p>3、实现ACTION子表和GOTO子表的构造算法。</p><p>4、输入任意的压缩了的上下文无关文法，输出相应的LR（0）分析表（以表格形式输出）。</p><a id="more"></a><h3 id="三-实验原理"><a class="markdownIt-Anchor" href="#三-实验原理"></a> 三、实验原理</h3><h5 id="1-闭包closurei"><a class="markdownIt-Anchor" href="#1-闭包closurei"></a> 1、闭包closure(I)</h5><p>​    若文法G已拓广为G’，而S为文法G的开始符号，拓广后增加产生式S’-&gt;S。如果I是文法G’的一个项目集，定义和构造I的闭包closure(I)如下：</p><p>​    a.I的项目在closure(I)中。</p><p>​    b.若A-&gt;α•Bβ属于closure(I)，则每一形如B-&gt;•γ的项目也属于closure(I)。</p><p>​    c.重复b直到不出现新的项目为止。即closure(I)不再扩大。</p><h5 id="2-转换函数goix"><a class="markdownIt-Anchor" href="#2-转换函数goix"></a> 2、转换函数GO(I,X)</h5><p>GO(I,X)=closure(J)</p><p>其中：I为包含某一项目集的状态。</p><p>X为一文法符号，X∈Vn∪Vt</p><p>J={任何形如A-&gt;α•Xβ的项目|A-&gt;αX•β属于I}</p><h5 id="3-action子表和goto子表的构造"><a class="markdownIt-Anchor" href="#3-action子表和goto子表的构造"></a> 3、ACTION子表和GOTO子表的构造</h5><p>a.若项目A→α.aβ属于Ik且GO (Ik, a)= Ij, a为终结符，则置ACTION[k, a]为“把状态j和符号a移进栈”，简记为“sj”；</p><p>b.若项目A→α．属于Ik，那么，对任何终结符a，置ACTION[k，a]为“用产生式A→α进行规约”，简记为“rj”；其中，假定A→α为文法G’的第j个产生式</p><p>c.若项目S’→S．属于Ik, 则置ACTION[k, #]为“接受”，简记为“acc”；</p><p>d.若GO (Ik, A)= Ij, A为非终结符，则置GOTO[k, A]=j；</p><p>e.分析表中凡不能用上述1至4填入信息的空白格均置上“出错标志”。 按上述算法构造的含有ACTION和GOTO两部分的分析表，如果每个入口不含多重定义，则称它为文法G的一张LR(0)分析表。具有LR(0)表的文法G称为一个LR（0）文法，LR(0)文法是无二义的。</p><h3 id="四-实验思路"><a class="markdownIt-Anchor" href="#四-实验思路"></a> 四、实验思路</h3><p>​    本次实验采用python完成。</p><h5 id="1-输入"><a class="markdownIt-Anchor" href="#1-输入"></a> 1、输入</h5><p>​    构造一个LR类，输入非终结符，终结符，开始符以及产生式分别存于LR类的成员：Vn，Vt，start，production。</p><h5 id="2-建立项目"><a class="markdownIt-Anchor" href="#2-建立项目"></a> 2、建立项目</h5><p>​    构造函数Project，根据产生式建立项目，对每一条产生式的右部进行处理，依次在右部的每个终结符和非终结符前添加原点，并在最后添加原点。</p><h5 id="3-closure算法"><a class="markdownIt-Anchor" href="#3-closure算法"></a> 3、closure算法</h5><p>​    构造函数closure，求一个项目的闭包closure。分三种情况讨论，对于S-&gt;·和E-&gt;·a这两种情况，返回自身。对于E-&gt;b·B这种情况，对项目的右部进行处理，继续求B-&gt;·r闭包，因此这是一个递归函数。最终函数以列表的形式返回每个项目集。</p><h5 id="4-转向函数goix的算法"><a class="markdownIt-Anchor" href="#4-转向函数goix的算法"></a> 4、转向函数GO(I,X)的算法</h5><p>​    构造函数GO，求一个项目集的GO(I,X)。建立字典go存放最终结果，对不是S-&gt;a·形式的项目进行讨论，对项目的右部进行处理，将原点后移一位，利用closure函数得到圆点后移得到的项目的项目集，加入go中。直到处理完该项目集的所有项目。</p><h5 id="5-建立状态及对应的项目集"><a class="markdownIt-Anchor" href="#5-建立状态及对应的项目集"></a> 5、建立状态及对应的项目集</h5><p>​    构造函数createDFA，建立状态及对应的项目集。首先，从拓广文法的第一个项目开始，建立初态，定义number存放状态编号，初始值为0。设立字典status存放状态编号及对应的项目集。将初态加入一个队列qu中。每次从qu中取出一个状态，求该状态的项目集的Go(I,x)，再对得到的项目集进行判断，若该项目集是已知的状态，则不做处理，若该项目集是新的状态，则将其加入队列qu中，number加1。每次从qu中取出一个状态重复上述操作，直到队列为空，说明已求得所有状态。</p><h5 id="6-action子表的构造"><a class="markdownIt-Anchor" href="#6-action子表的构造"></a> 6、ACTION子表的构造</h5><p>​    分两种情况讨论：项目集只有一个项目和项目集不止一个项目。对于第一种情况，再分两种情况，看该项目是否对应了初态，若是，则将#对应为acc，其余终结符对应为error，若不是，则求得该项目去掉圆点之后的产生式的编号i，终结符合#对应为ri。对于项目集不止一个项目的情况，依次对终结符和#寻找在该状态的的GO(I,X)下是否有所对应，有则求得编号对应为Si，没有则对于error。</p><h5 id="7-goto子表的构造"><a class="markdownIt-Anchor" href="#7-goto子表的构造"></a> 7、GOTO子表的构造</h5><p>​    对于每个状态的GO(I,X)函数进行遍历，寻找是否有对应的终结符，若有则返回对应的项目集的编号，若没有则返回error。</p><h3 id="五-实验小结"><a class="markdownIt-Anchor" href="#五-实验小结"></a> 五、实验小结</h3><p>​    通过本次实验，了解了LR(0)分析表的构造，对于构造过程所需要的一些算法有了深入的了解，通过实际的编写程序代码完成LR(0)分析表的构造，对于程序的编写能力有了一定的提升。在实验过程中，主要对于closure闭包函数的构造以及状态的设置有问题。Closure闭包函数用了递归的结构，因此对于递归的结束条件需要标注清楚。对于状态的建立，需要注意每次通过GO(I,X)得到的新的项目集是否是已经存在的状态，若是则不做处理。对于状态的遍历使用队列来完成，每次新的状态都加入队列中，队列为空说明状态遍历完毕。有一点问题值得注意，由于状态编号的项目集的存储结构使用了字典，字典是无序的结构，因此每次遍历得到的状态编号都不同，程序的每次运行得到的最终LR(0)分析表不唯一。</p><h3 id="六-附件"><a class="markdownIt-Anchor" href="#六-附件"></a> 六、附件</h3><h5 id="1-源代码"><a class="markdownIt-Anchor" href="#1-源代码"></a> 1、源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LR</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.Vn = []</span><br><span class="line">        self.Vt = []</span><br><span class="line">        self.start = <span class="literal">None</span>  <span class="comment"># 开始符号</span></span><br><span class="line">        self.production = []  <span class="comment"># 产生式</span></span><br><span class="line">        self.project = []  <span class="comment"># 项目</span></span><br><span class="line">        self.status = &#123;&#125;  <span class="comment"># 存放状态编号及对应的项目集</span></span><br><span class="line">        self.goto = &#123;&#125;  <span class="comment"># 存放goto表  &#123;0:&#123;E:'1',A:'error',B:'error'&#125;&#125;</span></span><br><span class="line">        self.action = &#123;&#125;  <span class="comment"># 存放action表  &#123;0:&#123;a:'S2',b:'S3'&#125;&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setVn</span><span class="params">(self)</span>:</span></span><br><span class="line">        Vn = input(<span class="string">'输入非终结符(以空格区分, 回车结束):'</span>)</span><br><span class="line">        self.Vn = Vn.split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setVt</span><span class="params">(self)</span>:</span></span><br><span class="line">        Vt = input(<span class="string">'输入终结符(以空格区分, 回车结束):'</span>)</span><br><span class="line">        self.Vt = Vt.split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setS</span><span class="params">(self)</span>:</span></span><br><span class="line">        S = input(<span class="string">'输入开始符号(以回车结束):'</span>)</span><br><span class="line">        self.start = S</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setf</span><span class="params">(self)</span>:</span>  <span class="comment"># 生成产生式</span></span><br><span class="line">        n = int(input(<span class="string">'输入产生式数目:'</span>))</span><br><span class="line">        print(<span class="string">'输入产生式(以回车区分):'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            f = input()</span><br><span class="line">            self.production.append(f)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Project</span><span class="params">(self)</span>:</span>  <span class="comment"># 建立项目</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> self.production:</span><br><span class="line">            temporary = copy.deepcopy(f)  <span class="comment"># temporary与f相同</span></span><br><span class="line">            temporary = temporary.split(<span class="string">'-&gt;'</span>)</span><br><span class="line">            l = temporary[<span class="number">0</span>]  <span class="comment"># 产生式左部</span></span><br><span class="line">            r = list(temporary[<span class="number">1</span>])  <span class="comment"># 产生式右部</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(r)+<span class="number">1</span>):  <span class="comment"># 对产生式右部处理</span></span><br><span class="line">                temporary1 = copy.deepcopy(r)</span><br><span class="line">                temporary1.insert(i,<span class="string">'·'</span>)</span><br><span class="line">                newf = l+<span class="string">'-&gt;'</span>+<span class="string">''</span>.join(temporary1)</span><br><span class="line">                self.project.append(newf)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">(self, pro)</span>:</span>  <span class="comment"># 求一个项目pro的闭包  E-&gt;· E-&gt;·b E-&gt;b·B  返回列表</span></span><br><span class="line">        temporary = []  <span class="comment"># 最终返回的结果</span></span><br><span class="line">        temporary.append(pro)  <span class="comment"># 将pro自身加入</span></span><br><span class="line">        l1 = pro.split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]  <span class="comment"># 左部</span></span><br><span class="line">        r1 = pro.split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]  <span class="comment"># 右部</span></span><br><span class="line">        x = list(r1)  <span class="comment"># 存放右部的列表</span></span><br><span class="line">        index = x.index(<span class="string">'·'</span>)  <span class="comment"># 得到圆点位置</span></span><br><span class="line">        <span class="keyword">if</span> len(x) == <span class="number">1</span>:  <span class="comment"># S-&gt;·</span></span><br><span class="line">            <span class="keyword">return</span> temporary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> index == len(r1)<span class="number">-1</span> <span class="keyword">or</span> x[index+<span class="number">1</span>] <span class="keyword">in</span> self.Vt:  <span class="comment">#E-&gt;·a</span></span><br><span class="line">                <span class="keyword">return</span> temporary</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># E-&gt;b·B</span></span><br><span class="line">                <span class="keyword">for</span> elem <span class="keyword">in</span> range(len(self.project)):</span><br><span class="line">                    l = self.project[elem].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]  <span class="comment"># 左部</span></span><br><span class="line">                    r = self.project[elem].split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]  <span class="comment"># 右部</span></span><br><span class="line">                    <span class="keyword">if</span> l == x[index+<span class="number">1</span>] <span class="keyword">and</span> r.startswith(<span class="string">'·'</span>):  <span class="comment"># 继续求B-&gt;·r闭包</span></span><br><span class="line">                        conlist = self.closure(self.project[elem])</span><br><span class="line">                        <span class="keyword">if</span> len(conlist) == <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            temporary.extend(conlist)</span><br><span class="line">                <span class="keyword">return</span> temporary</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GO</span><span class="params">(self, project)</span>:</span>  <span class="comment"># 计算一个项目集的GO(I,x),返回字典形式</span></span><br><span class="line">        go = &#123;&#125;  <span class="comment"># 存放Go(I,x)结果，形式为&#123;a:[],b:[]&#125;</span></span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> project:</span><br><span class="line">            l = elem.split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]  <span class="comment"># 项目左部</span></span><br><span class="line">            r = elem.split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]  <span class="comment"># 项目右部</span></span><br><span class="line">            index = list(r).index(<span class="string">'·'</span>)  <span class="comment"># 返回·的位置</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> r.endswith(<span class="string">'·'</span>):   <span class="comment"># 不是S-&gt;a·形式</span></span><br><span class="line">                <span class="keyword">if</span> go.get(list(r)[index+<span class="number">1</span>]) == <span class="literal">None</span>:  <span class="comment"># 说明x所对应的go中没有项目</span></span><br><span class="line">                    temporary = list(r)</span><br><span class="line">                    temporary.insert(index+<span class="number">2</span>, <span class="string">'·'</span>)</span><br><span class="line">                    temporary.remove(<span class="string">'·'</span>)   <span class="comment"># 将·后移一位</span></span><br><span class="line">                    x = l+<span class="string">'-&gt;'</span>+<span class="string">''</span>.join(temporary)  <span class="comment"># 产生一个完整的项目</span></span><br><span class="line">                    go[list(r)[index+<span class="number">1</span>]] = self.closure(x)  <span class="comment"># 将该项目对应的项目集加入x的go中</span></span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># 说明x所对应的go中已有项目</span></span><br><span class="line">                    temporary = list(r)</span><br><span class="line">                    temporary.insert(index+<span class="number">2</span>,<span class="string">'·'</span>)</span><br><span class="line">                    temporary.remove(<span class="string">'·'</span>)   <span class="comment"># 将·后移一位</span></span><br><span class="line">                    x = l+<span class="string">'-&gt;'</span>+<span class="string">''</span>.join(temporary)  <span class="comment"># 产生一个完整的项目</span></span><br><span class="line">                    go[list(r)[index+<span class="number">1</span>]].extend(self.closure(x))</span><br><span class="line">        <span class="keyword">return</span> go</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createDFA</span><span class="params">(self)</span>:</span>  <span class="comment"># 建立识别活前缀的DFA</span></span><br><span class="line">        number = <span class="number">0</span>  <span class="comment"># 初始状态编号为0</span></span><br><span class="line">        first = <span class="string">'S-&gt;·'</span>+self.start  <span class="comment"># 初态</span></span><br><span class="line">        x = self.closure(first)  <span class="comment"># 初态闭包</span></span><br><span class="line">        self.status[number] = x</span><br><span class="line">        qu = queue.Queue()  <span class="comment"># 构造队列，用于存放得到的状态</span></span><br><span class="line">        qu.put(&#123;number:self.status[number]&#125;)  <span class="comment"># 把初始状态加入队列中</span></span><br><span class="line">        number = number+<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> qu.empty():   <span class="comment"># 队列不为空，说明状态没有遍历完毕</span></span><br><span class="line">            temporary = qu.get()  <span class="comment"># 队列中取出一个状态</span></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> temporary.items():</span><br><span class="line">                y = self.GO(v)  <span class="comment"># 求项目集的Go(I,x)</span></span><br><span class="line">                <span class="keyword">for</span> key, value <span class="keyword">in</span> y.items():</span><br><span class="line">                    flag = <span class="number">-1</span>  <span class="comment"># 标志位，判断value是否是新的状态</span></span><br><span class="line">                    <span class="keyword">for</span> ke, va <span class="keyword">in</span> self.status.items():</span><br><span class="line">                        <span class="keyword">if</span> set(va) == set(value):</span><br><span class="line">                            flag = ke  <span class="comment"># 状态已存在，返回状态编号</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag == <span class="number">-1</span>:  <span class="comment"># 新的状态，加入状态集中</span></span><br><span class="line">                        self.status[number] = value</span><br><span class="line">                        qu.put(&#123;number:self.status[number]&#125;)</span><br><span class="line">                    <span class="keyword">else</span>:  <span class="comment"># 已有状态</span></span><br><span class="line">                        <span class="keyword">pass</span>  <span class="comment"># 不作处理</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GOTO</span><span class="params">(self)</span>:</span>  <span class="comment"># goto表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.status)):</span><br><span class="line">            self.goto[i] = &#123;&#125;</span><br><span class="line">            temp = self.GO(self.status[i])  <span class="comment"># 每个状态的GO</span></span><br><span class="line">            <span class="keyword">for</span> vn <span class="keyword">in</span> self.Vn:   <span class="comment"># 对非终结符遍历</span></span><br><span class="line">                <span class="keyword">if</span> vn <span class="keyword">in</span> temp.keys():  <span class="comment"># 非终结符存在于状态的Go中</span></span><br><span class="line">                    <span class="keyword">for</span> key, value <span class="keyword">in</span>  self.status.items():</span><br><span class="line">                        <span class="keyword">if</span> set(value) == set(temp[vn]):</span><br><span class="line">                            number = key  <span class="comment"># 记录编号</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    self.goto[i][vn] = number</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.goto[i][vn] = <span class="string">'error'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ACTION</span><span class="params">(self)</span>:</span></span><br><span class="line">        vtx = copy.deepcopy(self.Vt)</span><br><span class="line">        vtx.append(<span class="string">'#'</span>)  <span class="comment"># 终结符加‘#’</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.status)):</span><br><span class="line">            self.action[i] = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> len(self.status[i]) == <span class="number">1</span>:  <span class="comment"># 项目集只有一个项目</span></span><br><span class="line">                <span class="keyword">if</span> self.status[i][<span class="number">0</span>].startswith(<span class="string">'S'</span>):  <span class="comment"># S-&gt;E·</span></span><br><span class="line">                    <span class="keyword">for</span> vt <span class="keyword">in</span> self.Vt:</span><br><span class="line">                        self.action[i][vt] = <span class="string">'error'</span></span><br><span class="line">                    self.action[i][<span class="string">'#'</span>] = <span class="string">'acc'</span></span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment">#  填写rj的项目  E-&gt;aA·</span></span><br><span class="line">                    temp = self.status[i][<span class="number">0</span>].rstrip(<span class="string">'·'</span>)  <span class="comment"># 删去项目的·  E-&gt;aA</span></span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(self.production)):</span><br><span class="line">                        <span class="keyword">if</span> self.production[n] == temp:</span><br><span class="line">                            m = n+<span class="number">1</span>   <span class="comment"># 产生式在G'中下标从1开始</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">for</span> vt <span class="keyword">in</span> vtx:</span><br><span class="line">                        self.action[i][vt] = <span class="string">'r'</span>+str(m)</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 填写Sj的项目</span></span><br><span class="line">                temp = self.GO(self.status[i])  <span class="comment"># 字典形式&#123;a:[],b:[]&#125;</span></span><br><span class="line">                <span class="keyword">for</span> vt <span class="keyword">in</span> vtx:</span><br><span class="line">                    <span class="keyword">if</span> vt <span class="keyword">in</span> temp.keys():</span><br><span class="line">                        <span class="keyword">for</span> key, value <span class="keyword">in</span> self.status.items():  <span class="comment"># 确定到哪一个状态</span></span><br><span class="line">                            <span class="keyword">if</span> set(value) == set(temp[vt]):</span><br><span class="line">                                number = key  <span class="comment"># 返回状态编号</span></span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                        self.action[i][vt] = <span class="string">'S'</span>+str(number)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        self.action[i][vt] = <span class="string">'error'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span>   <span class="comment"># 输出LR(0)分析表 表格形式</span></span><br><span class="line">        print(<span class="string">'LR(0)分析表'</span>.center(<span class="number">85</span>))</span><br><span class="line">        print(<span class="string">'状态'</span>.center(<span class="number">5</span>), <span class="string">'ACTION'</span>.center(<span class="number">50</span>), <span class="string">'GOTO'</span>.center(<span class="number">30</span>))</span><br><span class="line">        print(<span class="string">'  '</span>.center(<span class="number">10</span>),end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> vt <span class="keyword">in</span> self.Vt:  <span class="comment"># action</span></span><br><span class="line">            print(vt.center(<span class="number">10</span>),end=<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'#'</span>.center(<span class="number">10</span>),end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> vn <span class="keyword">in</span> self.Vn:  <span class="comment"># goto</span></span><br><span class="line">            print(vn.center(<span class="number">10</span>),end=<span class="string">''</span>)</span><br><span class="line">        print() <span class="comment"># 换行</span></span><br><span class="line">        vtx = copy.deepcopy(self.Vt)</span><br><span class="line">        vtx.append(<span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.status)):  <span class="comment"># 输出每一行</span></span><br><span class="line">            print(str(i).center(<span class="number">10</span>),end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">for</span> vt <span class="keyword">in</span> vtx:</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> self.action[i]:  <span class="comment"># &#123;0:&#123;'b':'S1'&#125;&#125;</span></span><br><span class="line">                    <span class="keyword">if</span> vt == key:</span><br><span class="line">                        print(self.action[i][key].center(<span class="number">10</span>),end=<span class="string">''</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> vn <span class="keyword">in</span> self.Vn:</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> self.goto[i]:</span><br><span class="line">                    <span class="keyword">if</span> vn == key:</span><br><span class="line">                        print(str(self.goto[i][key]).center(<span class="number">10</span>),end=<span class="string">''</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            print() <span class="comment"># 换行</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>  <span class="comment"># 显示各个状态及对应的项目集</span></span><br><span class="line">        print(<span class="string">'所有状态及对应的项目集:'</span>)</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> self.status.items():</span><br><span class="line">            print(key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = LR()</span><br><span class="line">    a.setVn()</span><br><span class="line">    a.setVt()</span><br><span class="line">    a.setS()</span><br><span class="line">    a.setf()</span><br><span class="line">    a.Project()</span><br><span class="line">    a.createDFA()</span><br><span class="line">    a.ACTION()</span><br><span class="line">    a.GOTO()</span><br><span class="line">    a.show()</span><br><span class="line">    a.output()</span><br></pre></td></tr></table></figure><p>2、程序运行结果</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90LR(0)%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E8%A1%A8/1.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90LR(0)%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E8%A1%A8/2.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Compiler Principle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文法类型的判断和推导序列的生成</title>
      <link href="/2020/01/517343399.html"/>
      <url>/2020/01/517343399.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一-实验名称"><a class="markdownIt-Anchor" href="#一-实验名称"></a> 一、实验名称</h3><p>​    文法类型的判断和推导序列的生成</p><h3 id="二-实验目的"><a class="markdownIt-Anchor" href="#二-实验目的"></a> 二、实验目的</h3><p>​    输入：一组任意的文法规则和任意符号串。</p><p>​    输出：相应的Chomsky文法类型和推导。</p><a id="more"></a><h3 id="三-实验原理"><a class="markdownIt-Anchor" href="#三-实验原理"></a> 三、实验原理</h3><h5 id="1-文法g定义为四元组vnvtps"><a class="markdownIt-Anchor" href="#1-文法g定义为四元组vnvtps"></a> 1、文法G定义为四元组(Vn,Vt,P,S)</h5><p>​    其中Vn为非终结符（或语法实体，或变量）集：Vt为终结符集；P为规则（α-&gt;β）的集合，α∈(Vn∪Vt)<em>且至少包含一个非终结符，β∈(Vn∪Vt)</em>；Vn，Vt和P是非空有穷集。S称作识别符或开始符，它是一个非终结符，至少要在一条规则中作为左部出现。</p><h5 id="2-文法类型的判断"><a class="markdownIt-Anchor" href="#2-文法类型的判断"></a> 2、文法类型的判断</h5><p>​    a.设G=(Vn,Vt,P,S)为一文法，若P中的每一个产生式α-&gt;β均满足</p><p>|β|&gt;=|α|，仅仅S-&gt;ε除外，则文法G是1型或上下文有关的。</p><p>​    b.设G=(Vn,Vt,P,S)，若P中的每一个产生式α-&gt;β满足: α是一个非终结符，β∈(Vn∪Vt)*，则此文法称为2型的或上下文无关的。</p><p>​    c. 设G=(Vn,Vt,P,S)，若P中的每一个产生式的形式都是A-&gt;αB或A-&gt;α，其中A和B都是终结符，α∈Vt*，则G是3型文法或正规文法。</p><h3 id="四-实验思路"><a class="markdownIt-Anchor" href="#四-实验思路"></a> 四、实验思路</h3><p>​    本实验采取C++来完成，用大写字母A到Z表示非终结符，小写字符a到z表示终结符。</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/1.png" alt="实验流程图" /></p><h5 id="1-接受产生式"><a class="markdownIt-Anchor" href="#1-接受产生式"></a> 1、接受产生式</h5><p>​    首先建立一个结构体siyuanzu，其成员有非终结符集合数组Vn，终结符集合数组Vt以及产生式集合数组rule，通过函数input来接受从键盘输入的产生式，并且存储于string类字符串数组rule中。函数input实现接受产生式功能的思路为：先确定要输入的产生式数目n，用for循环实现产生式的存储。</p><h5 id="2-文法类型的判断-2"><a class="markdownIt-Anchor" href="#2-文法类型的判断-2"></a> 2、文法类型的判断</h5><p>​    函数Grammer实现判断文法类型的功能并且输出文法的类型。其实现功能的思路为：</p><p>​    a.对rule数组中每一个产生式进行判断，以“-&gt;”中的“-”作为判断条件，将产生式分为左部和右部分别计算左部和右部的长度。若youb小于左部则不是1型文法。输出0型文法；若右部大于或等于左部，则继续判断。</p><p>​    b.判断文法是否为2型文法，经过a步骤的执行，若文法为1型文法，只需在此基础上判断文法的左部是否只有一个非终结符。通过判断条件zuo==1&amp;&amp;‘A’&lt;=a.rule[i][zuo-1]&amp;&amp;a.rule[i][zuo-1]&lt;='Z’确定是否为2型文法，若不满足判断条件则为1型文法，进行输出，若满足则继续判断。</p><p>​    c.判断文法是否为3型文法，经过b步骤的执行，若文法为2型文法，只需在此基础上判断文法的右部是否为αB或α形式或者是Bα或α形式。通过判断条件一((you<mark>2)&amp;&amp;(a.rule[i][num+1]&gt;=‘a’)&amp;&amp;(a.rule[i][num+1]&lt;=‘z’)&amp;&amp;(a.rule[i][num+2]&gt;=‘A’)&amp;&amp;(a.rule[i][num+2]&lt;=‘Z’))||((you</mark>1)&amp;&amp;(a.rule[i][num+1]&gt;=‘a’)&amp;&amp;(a.rule[i][num+1]&lt;=‘z’))判断是否满足αB或α形式，通过判断条件二((you<mark>2)&amp;&amp;(a.rule[i][num+1]&gt;=‘A’)&amp;&amp;(a.rule[i][num+1]&lt;=‘Z’)&amp;&amp;(a.rule[i][num+2]&gt;=‘a’)&amp;&amp;(a.rule[i][num+2]&lt;=‘z’))||((you</mark>1)&amp;&amp;(a.rule[i][num+1]&gt;=‘a’)&amp;&amp;(a.rule[i][num+1]&lt;=‘z’))判断是否满足Bα或α形式。若所有产生式同时满足判断条件一或者同时满足判断条件二，则为3型文法进行输出。否则为2型文法进行输出。</p><h5 id="3-将文法以四元组形式输出"><a class="markdownIt-Anchor" href="#3-将文法以四元组形式输出"></a> 3、将文法以四元组形式输出</h5><p>​    函数output实现输出文法四元组形式的功能。具体思路为：</p><p>​    a.将存放产生式的string类数组rule一分为二，用x数组存放rule中所有的大写字母即非终结符，用y数组存放rule中所有的小写字母即终结符。</p><p>​    b.用双重for循环给x和y数组中重复的字符标记，重复的字符全部赋值为“！”</p><p>c.将x数组中非“！”元素赋值给非终结符集Vn，将y数组中非“！”元素赋值给终结符集Vt。</p><p>​    d.按照格式分别输出非终结符集Vn，终结符集Vt，产生式P以及开始符S。</p><h3 id="五-实验小结"><a class="markdownIt-Anchor" href="#五-实验小结"></a> 五、实验小结</h3><p>​    我运用C++解决了此次实验的文法类型判断的问题，在实际解决问题的过程中，主要遇到了以下几个问题：</p><h5 id="1-文法类型的判断条件"><a class="markdownIt-Anchor" href="#1-文法类型的判断条件"></a> 1、文法类型的判断条件</h5><p>​    《编译原理》书本上给出了几类文法类型的定义，但是在实际的解决问题过程中，需要将书本上给的判断条件转换为C++语言中的判断条件，这需要对文法类型的定义有很好的理解。我通过判断产生式右部是否大于等于左部确定1型文法，在此基础上判断产生式左部是否为一个非终结符确定2型文法，最后在2型文法的基础上判断产生式是否全部满足αB或α形式或者是Bα或α形式确定3型文法。最终解决了文法类型判断条件的问题。</p><h5 id="2-产生式的存储问题"><a class="markdownIt-Anchor" href="#2-产生式的存储问题"></a> 2、产生式的存储问题</h5><p>​    实验要求最少输入五条产生式，我最初是选择用C语言解决存储问题，但是发现C语言中对于字符串的处理不够灵活，于是选择了C<ins>来解决。C</ins>中可以用string类型来定义字符串数组，并且可以通过length函数求每个字符串的长度，这样给每条产生式的判断都带来了极大的便捷。</p><h5 id="3-文法以四元组形式输出问题"><a class="markdownIt-Anchor" href="#3-文法以四元组形式输出问题"></a> 3、文法以四元组形式输出问题</h5><p>实验需要输出文法的四元组，即需要输出非终结符集Vn，终结符集Vt，产生式P以及开始符S，由于我将产生式存储在string类数组rule中，因此，需要将rule中的元素分为两类，大写字母为非终结符，小写字母为终结符。但是分好类的数组存在元素重复的问题，我通过一个双重for循环给重复元素标记为“！”，再将非“！”元素赋值给字符数组Vn和Vt，解决了元素重复问题。最后需要安排一下输出的格式即解决了这个问题。</p><p>通过本次实验，我深入的了解了文法类型的判断，对于文法类型的判断也更加的熟练。同时，对于文法的四元组的定义更加的熟悉，并且对于运用C++解决编译原理的问题有了一定的基础。</p><h3 id="六-附件"><a class="markdownIt-Anchor" href="#六-附件"></a> 六、附件</h3><h5 id="1-源代码"><a class="markdownIt-Anchor" href="#1-源代码"></a> 1、源代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">siyuanzu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> Vn[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">char</span> Vt[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">string</span> rule[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">input</span><span class="params">(siyuanzu *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入产生式数目:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入产生式:\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(*a).rule[i];</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(siyuanzu a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,length,k1=<span class="number">0</span>,k2=<span class="number">0</span>,m1=<span class="number">0</span>,m2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> x[<span class="number">50</span>],y[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">length=a.rule[i].length();</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.rule[i][j]!=<span class="string">'-'</span>&amp;&amp;a.rule[i][j]!=<span class="string">'&gt;'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.rule[i][j]&gt;=<span class="string">'A'</span>&amp;&amp;a.rule[i][j]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x[k1]=a.rule[i][j];</span><br><span class="line">k1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">y[k2]=a.rule[i][j];</span><br><span class="line">k2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k1<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;k1;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x[i]==x[j])</span><br><span class="line">x[j]=<span class="string">'!'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k1;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x[i]!=<span class="string">'!'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a.Vn[m1]=x[i];</span><br><span class="line">m1++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k2<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;k2;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y[i]==y[j])</span><br><span class="line">y[j]=<span class="string">'!'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k2;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y[i]!=<span class="string">'!'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a.Vt[m2]=y[i];</span><br><span class="line">m2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"四元组G=(Vn,Vt,P,S)"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"其中非终结符Vn=&#123;"</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m1<span class="number">-1</span>;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.Vn[i]&lt;&lt;<span class="string">","</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.Vn[m1<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"&#125;"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"终结符Vt=&#123;"</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m2<span class="number">-1</span>;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.Vt[i]&lt;&lt;<span class="string">","</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.Vt[m2<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"&#125;"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"P由下列产生式组成:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.rule[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"开始符为:S"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Grammer</span><span class="params">(siyuanzu a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,length,num,zuo,you;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">length=a.rule[i].length();</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">&#123;</span><br><span class="line">c=a.rule[i][j];</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">zuo=num<span class="number">-1</span>;</span><br><span class="line">you=length-(num+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(you&gt;=zuo)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">length=a.rule[i].length();</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">&#123;</span><br><span class="line">c=a.rule[i][j];</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">zuo=num<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(zuo==<span class="number">1</span>&amp;&amp;<span class="string">'A'</span>&lt;=a.rule[i][zuo<span class="number">-1</span>]&amp;&amp;a.rule[i][zuo<span class="number">-1</span>]&lt;=<span class="string">'Z'</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">length=a.rule[i].length();</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">&#123;</span><br><span class="line">c=a.rule[i][j];</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">you=length-(num+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(((you==<span class="number">2</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&gt;=<span class="string">'a'</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&lt;=<span class="string">'z'</span>)&amp;&amp;(a.rule[i][num+<span class="number">2</span>]&gt;=<span class="string">'A'</span>)&amp;&amp;(a.rule[i][num+<span class="number">2</span>]&lt;=<span class="string">'Z'</span>))||((you==<span class="number">1</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&gt;=<span class="string">'a'</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&lt;=<span class="string">'z'</span>)))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==n)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"文法类型:3型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">length=a.rule[i].length();</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">&#123;</span><br><span class="line">c=a.rule[i][j];</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">you=length-(num+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(((you==<span class="number">2</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&gt;=<span class="string">'A'</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&lt;=<span class="string">'Z'</span>)&amp;&amp;(a.rule[i][num+<span class="number">2</span>]&gt;=<span class="string">'a'</span>)&amp;&amp;(a.rule[i][num+<span class="number">2</span>]&lt;=<span class="string">'z'</span>))||((you==<span class="number">1</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&gt;=<span class="string">'a'</span>)&amp;&amp;(a.rule[i][num+<span class="number">1</span>]&lt;=<span class="string">'z'</span>)))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==n)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"文法类型:3型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"文法类型:2型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"文法类型:1型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"文法类型:0型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,r;</span><br><span class="line">siyuanzu a;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"                    1.输入产生式"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"                    2.输出文法类型及四元组"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"                    3.结束"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入功能号:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(r&gt;<span class="number">3</span>||r&lt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入有误，重新输入"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line">&#125;<span class="keyword">while</span>(r&lt;=<span class="number">3</span>&amp;&amp;r&gt;=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:n=input(&amp;a);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:Grammer(a,n);output(a,n);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">exit</span>(<span class="number">0</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-程序运行结果"><a class="markdownIt-Anchor" href="#2-程序运行结果"></a> 2、程序运行结果</h5><p>a.实验开始图</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/2.png" alt="" /></p><p>b.非1型文法</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/3.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/4.png" alt="" /></p><p>c.1型文法</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/5.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/6.png" alt="" /></p><p>d.2型文法</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/7.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/8.png" alt="" /></p><p>e.3型文法</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/9.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/10.png" alt="" /></p><p>f.实验结束图</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%96%87%E6%B3%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BA%8F%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90/11.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Compiler Principle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFA确定化为DFA</title>
      <link href="/2020/01/1104303336.html"/>
      <url>/2020/01/1104303336.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一-实验名称"><a class="markdownIt-Anchor" href="#一-实验名称"></a> 一、实验名称</h3><p>​    不确定有穷状态自动机的确定化</p><h3 id="二-实验目的"><a class="markdownIt-Anchor" href="#二-实验目的"></a> 二、实验目的</h3><p>输入：非确定有穷状态自动机NFA</p><p>输出：确定化的有穷状态自动机DFA</p><a id="more"></a><h3 id="三-实验原理"><a class="markdownIt-Anchor" href="#三-实验原理"></a> 三、实验原理</h3><h5 id="1-nfa定义"><a class="markdownIt-Anchor" href="#1-nfa定义"></a> 1、NFA定义</h5><p>​    一个不确定的有穷自动机M是一个五元组，M=(K,E,f,S,Z)其中</p><p>a.   K是一个有穷集，它的每个元素称为一个状态；</p><p>b.   E是一个有穷字母表，它的每个元素称为一个输入符号；</p><p>c.   f是一个从K×E<em>到K的子集的映像，即：K</em>E*-&gt;2k，其中2k表示K的幂集；</p><p>d.   S包含于K，是一个非空初态集；</p><p>e.   Z包含于K，是一个终态集。</p><h5 id="2-dfa的定义"><a class="markdownIt-Anchor" href="#2-dfa的定义"></a> 2、DFA的定义</h5><p>一个确定的有穷自动机M是一个五元组，M=(K,E,f,S,Z)其中</p><p>a.   K是一个有穷集，它的每个元素称为一个状态；</p><p>b.   E是一个有穷字母表，它的每个元素称为一个输入符号；</p><p>c.   f是转换函数，是K×E-&gt;K上的映像，即，如f(ki,a)=kj(ki∈K,kj∈K)就意味着，当前状态为ki，输入字符为a时，将转换到下一状态kj，我们把kj称作ki的一个后继状态；</p><p>d.   S∈K，是唯一的一个初态；</p><p>e.   Z包含于K，是一个终态集，终态也称可接受状态或结束状态。</p><h5 id="3-closure函数"><a class="markdownIt-Anchor" href="#3-closure函数"></a> 3、closure函数</h5><p>状态集合I的ε—闭包，表示为ε—closure(I)，定义为一状态集，是状态集I中的任何状态S经任意条ε弧而能到达的状态的集合。</p><h5 id="4-move函数"><a class="markdownIt-Anchor" href="#4-move函数"></a> 4、move函数</h5><p>​    状态集合I的a弧转换，表示为move(I,a)，定义为状态集合J，其中J是所有那些从I中的某一状态经过一条a弧而到达的状态的全体。</p><h3 id="四-实验思路"><a class="markdownIt-Anchor" href="#四-实验思路"></a> 四、实验思路</h3><p>​    本次实验采用python完成。</p><h5 id="1-输入"><a class="markdownIt-Anchor" href="#1-输入"></a> 1、输入</h5><p>​    根据课本NFA的定义，输入五元组，依次输入状态集、输入符号、初态集、终态集以及映像，将这些分别存入五个列表中。其中关于映像的输入格式：先输入状态一，再输入输入符号，最后输入状态二，一次输入一条弧。</p><h5 id="2-closure算法"><a class="markdownIt-Anchor" href="#2-closure算法"></a> 2、closure算法</h5><p>​    定义closure函数形式为closure(a,f)，其中，a为要做closure闭包的状态集合，f为NFA的映像的集合。具体思想为：</p><p>​    a.设立一个最终返回结果的列表b，初值与列表a相等。设立一个空列表s，用于存放每次closure闭包新加入的状态。</p><p>​    b.执行while循环，此循环判断条件为1，即会一直执行下去，直到遇到closure闭包没有新增状态的时候执行结束。</p><p>​    c.对a中的每一个状态求closure闭包，即判断f中状态一等于a中状态的弧，再判断f中该状态的弧是否为ε（具体代码中用’$’代替），若是，则将该弧的状态二加入s中。</p><p>​    d.判断s是否为空，若为空则说明此次循环没有新增状态，即说明closure闭包在上一次循环时已执行完毕，输出上次循环的结果b。若s不为空，说明本次循环仍然有新增状态，则将新增状态加入b中，并且将新增的状态集合赋值给a，以新增的状态集继续做循环判断，直到某次循环s为空结束。</p><h5 id="3-move算法"><a class="markdownIt-Anchor" href="#3-move算法"></a> 3、move算法</h5><p>​    move算法的核心思想与closure算法一致，其函数形式为move(a,e,f)，其中e为move算法move(I,a)的a。move算法只需要求从状态集合中某一状态经过一条a弧而到达的状态全体，所以不需要进行while循环执行多次，只需执行closure算法中c步骤一次即可。</p><h5 id="4-构造子集"><a class="markdownIt-Anchor" href="#4-构造子集"></a> 4、构造子集</h5><p>​    建立两个列表C1、C2，其中C1用于存放最终的状态集，C2作为标记使用，对应C1中的子集，若C1中的子集也进行了closure闭包则C2中相应元素标记为1，否则为0。具体思想为：</p><p>​    a.首先对初态集进行closure闭包，存于C1中，C2的第一个元素赋值为0。</p><p>​    b.标记C2第一个元素为1，对C1中第一个集合先做move算法再做closure算法，若其中一个算法得出空集合则直接返回空列表，否则判断C1中是否有该状态集，若无则加入C1中，C2中相应元素赋值为0，表示未标记。</p><p>​    c.重复执行b步骤，直到C2中所有元素为1，表示标记完毕，执行完成，所得到C1为最终状态子集。</p><h5 id="5-输出"><a class="markdownIt-Anchor" href="#5-输出"></a> 5、输出</h5><p>​    采用矩阵形式输出，C1中每个状态集合的下标为最终合并后的状态。</p><h3 id="五-实验小结"><a class="markdownIt-Anchor" href="#五-实验小结"></a> 五、实验小结</h3><p>​    本次实验主要遇到了以下问题：</p><h5 id="1-输入存储问题"><a class="markdownIt-Anchor" href="#1-输入存储问题"></a> 1、输入存储问题</h5><p>​    若根据课本形式应输入M=(K,E,f,S,Z)，再对f进行展开，虽然用算法实现这一形式不难，但是对于后续的操作不太方便，所以最终选择了依次输出五元组，分别存于五个列表中。</p><h5 id="2-closure算法问题"><a class="markdownIt-Anchor" href="#2-closure算法问题"></a> 2、closure算法问题</h5><p>​    最初想用递归的思想实现closure算法，即每次进行一步closure闭包，返回结果为新得到的状态集的closure闭包，但是对于递归结束的判断条件以及参数的传递不太明确，所以最终没有选择递归，而是选择了死循环里面加上退出循环条件的形式完成。</p><h5 id="3-输出问题"><a class="markdownIt-Anchor" href="#3-输出问题"></a> 3、输出问题</h5><p>​    输出的形式最终没有实现DFA的状态图而是使用矩阵的形式输出，问题在于对于以状态集合为结点构造状态图这样的图形形式方面的知识不了解，最终以矩阵形式输出。</p><p>​    通过本次实验，对于NFA转换为DFA的过程有了深刻的认识，对于closure算法和move算法的思想非常清楚。</p><h3 id="六-附件"><a class="markdownIt-Anchor" href="#六-附件"></a> 六、附件</h3><h5 id="1-源代码"><a class="markdownIt-Anchor" href="#1-源代码"></a> 1、源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">K = []  <span class="comment"># 状态</span></span><br><span class="line">E = []  <span class="comment"># 符号</span></span><br><span class="line">f = []  <span class="comment"># 弧</span></span><br><span class="line">S = []  <span class="comment"># 初态</span></span><br><span class="line">Z = []  <span class="comment"># 终态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">a = input(<span class="string">'输入状态(以空格区分,以换行结束):'</span>)</span><br><span class="line">K = a.split(<span class="string">' '</span>)</span><br><span class="line">a = input(<span class="string">'输入输入符号(以空格区分,以换行结束):'</span>)</span><br><span class="line">E = a.split(<span class="string">' '</span>)</span><br><span class="line">a = input(<span class="string">'输入初态(以空格区分,以换行结束):'</span>)</span><br><span class="line">S = a.split(<span class="string">' '</span>)</span><br><span class="line">a = input(<span class="string">'输入终态(以空格区分,以换行结束):'</span>)</span><br><span class="line">Z = a.split(<span class="string">' '</span>)</span><br><span class="line">print(<span class="string">'输入弧的条数:'</span>)</span><br><span class="line">n = int(input())</span><br><span class="line">print(<span class="string">'输入弧(分别输入状态1,输入符号,状态2,以空格区分换行结束,ε表示为$)'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    f.append([])</span><br><span class="line">    a = input()</span><br><span class="line">    f[len(f)<span class="number">-1</span>] = a.split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># closure 算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">(a, f)</span>:</span>  <span class="comment"># a为列表</span></span><br><span class="line">    b = a</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(f)):</span><br><span class="line">                <span class="keyword">if</span> i == f[j][<span class="number">0</span>] <span class="keyword">and</span> f[j][<span class="number">1</span>] == <span class="string">'$'</span>:</span><br><span class="line">                        s.append(f[j][<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">                b.append(i)</span><br><span class="line">                a = s</span><br><span class="line">    <span class="keyword">return</span> sorted(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># move 算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(a, e, f)</span>:</span>  <span class="comment"># a为列表 e为一个符号</span></span><br><span class="line">      s = []</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">          <span class="keyword">for</span> j <span class="keyword">in</span> range(len(f)):</span><br><span class="line">              <span class="keyword">if</span> i == f[j][<span class="number">0</span>] <span class="keyword">and</span> f[j][<span class="number">1</span>] == e:</span><br><span class="line">                  s.append(f[j][<span class="number">2</span>])</span><br><span class="line">      <span class="keyword">return</span> sorted(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 算出最终子集</span></span><br><span class="line">C1 = []  <span class="comment"># C1为最终子集</span></span><br><span class="line">C2 = []</span><br><span class="line">C1.append(closure(S, f))</span><br><span class="line">C2.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> C2.pop(len(C2)<span class="number">-1</span>) == <span class="number">0</span>:</span><br><span class="line">    C2.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(C1)):</span><br><span class="line">        <span class="keyword">if</span> C2[i] == <span class="number">0</span>:</span><br><span class="line">            C2[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> E:</span><br><span class="line">                A = move(C1[i], j, f)</span><br><span class="line">                <span class="keyword">if</span> A == []:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                B = closure(A, f)</span><br><span class="line">                <span class="keyword">if</span> B == []:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                k = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> C1:</span><br><span class="line">                    <span class="keyword">if</span> B == m:</span><br><span class="line">                        k = k+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">                    C1.append(B)</span><br><span class="line">                    C2.append(<span class="number">0</span>)</span><br><span class="line">print(<span class="string">'输出NFA构造的子集:'</span>)</span><br><span class="line">print(C1)</span><br><span class="line">print(<span class="string">'输出DFA:'</span>)</span><br><span class="line">print(<span class="string">'S'</span>, end=<span class="string">'   '</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> E:</span><br><span class="line">    print(x, end=<span class="string">'   '</span>)</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 输出DFA</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(C1)):</span><br><span class="line">    print(i, end=<span class="string">'   '</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> E:</span><br><span class="line">        a1 = move(C1[i], j, f)</span><br><span class="line">        <span class="keyword">if</span> a1 == []:</span><br><span class="line">            print(a1, end=<span class="string">'   '</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        a2 = closure(a1, f)</span><br><span class="line">        <span class="keyword">if</span> a2 == []:</span><br><span class="line">            print(a2, end=<span class="string">'   '</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(C1)):</span><br><span class="line">            <span class="keyword">if</span> C1[k] == a2:</span><br><span class="line">                print(k, end=<span class="string">'   '</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    y = <span class="number">0</span>  <span class="comment"># 判断子集中是否有终态</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> Z:</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">in</span> C1[i]:</span><br><span class="line">            y = y+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line">        print(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><h5 id="2-程序输出结果"><a class="markdownIt-Anchor" href="#2-程序输出结果"></a> 2、程序输出结果</h5><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/NFA%E7%A1%AE%E5%AE%9A%E5%8C%96%E4%B8%BADFA/5.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Compiler Principle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LL(1)文法的判断及转换</title>
      <link href="/2020/01/1352172099.html"/>
      <url>/2020/01/1352172099.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一-实验名称"><a class="markdownIt-Anchor" href="#一-实验名称"></a> 一、实验名称</h3><p>​    LL(1)文法的判断及转换</p><h3 id="二-实验目的"><a class="markdownIt-Anchor" href="#二-实验目的"></a> 二、实验目的</h3><p>输入：任意一个文法</p><p>输出：(1)是否为LL(1)文法</p><p>​    (2)若是，给出每条产生式的select集</p><p>​        (3)若不是，看看是否含有左公共因子或者含有左递归，并用相应的方法将非   LL(1)文法变成LL(1)文法，并输出新文法中每条产生式的select集。</p><a id="more"></a><h3 id="三-实验原理"><a class="markdownIt-Anchor" href="#三-实验原理"></a> 三、实验原理</h3><h5 id="1-first集定义"><a class="markdownIt-Anchor" href="#1-first集定义"></a> 1、First集定义</h5><p>令X为一个文法符号（终止符或非终止符）或ε，则集合First（X）有终止符组成，此外可能还有ε，它的定义如下：</p><p>\1. 若X是终止符或ε，则First（X）= {X}。</p><p>\2. 若X是非终结符，则对于每个产生式X—&gt;X1X2…Xn，First（X）包含了First（X1）-{ε}。 若对于某个i &lt; n，所有的集合First（X1），… ，First（Xi）都包含了ε，则First（X）也包 括了First（Xi+1）- {ε}。若所有集合First（X1），…，First（Xn）都包括了ε，则First（X）也包括了ε。</p><h5 id="2-follow集定义"><a class="markdownIt-Anchor" href="#2-follow集定义"></a> 2、Follow集定义</h5><p>给出一个非终结符A，那么集合Follow（A）则是由终结符组成，此外可能还含有#（#是题目约定的字符串结束符）。集合Follow（A）的定义如下：</p><p>\1. 若A是开始符号，则#在Follow（A）中。</p><p>\2. 若存在产生式B—&gt;αAγ，则First（γ）- {ε}在Follow（A）中。</p><p>\3. 若存在产生式B—&gt;αAγ，且ε在First（γ）中，则Follow（A）包括Follow（B）。</p><h5 id="3-select集定义"><a class="markdownIt-Anchor" href="#3-select集定义"></a> 3、Select集定义</h5><p>​    对于产生式A—&gt;α。集合select（A—&gt;α）定义如下：</p><p>\1. 若α不能推出ε，则select（A—&gt;α） = first（α）。</p><p>\2. 若α能推出ε，则select（A—&gt;α）= first（α）∪ follow(A)。</p><h5 id="4-含左递归文法"><a class="markdownIt-Anchor" href="#4-含左递归文法"></a> 4、含左递归文法</h5><p>一个文法G，若存在P经过一次或多次推导得到Pa（即能推导出以P开头的式子）， 则称G是左递归的。</p><p>左递归分为直接左递归和间接左递归。</p><p>直接左递归经过一次推导就可以看出文法存在左递归，如P→Pa｜b。</p><p>间接左递归侧需多次推导才可以看出文法存在左递归，如文法：S→Qc｜c，Q→Rb｜b，R→Sa｜a有S =&gt;Qc =&gt;Rbc =&gt;Sabc</p><h3 id="四-实验思路"><a class="markdownIt-Anchor" href="#四-实验思路"></a> 四、实验思路</h3><p>​    本次实验采用python完成。</p><h5 id="1-求非终结符是否能导出空"><a class="markdownIt-Anchor" href="#1-求非终结符是否能导出空"></a> 1、求非终结符是否能导出空</h5><p>​    a. 第一轮扫描。当前的产生式还没被删除，非终结符lp可以导出空，将以该非终结符为左部的产生式标记为要删除的。产生式右部分解，若该产生式右部包含终结符，删除该产生式因为由它不会导出空。判断没有被删除的产生式中是否还有以该非终结符为左部的产生式。</p><p>​    b. 第二轮扫描。逐一扫描每一条产生右部的每一个符号，循化直至每个非终结符的状态都确定下来。</p><h5 id="2-求first集算法"><a class="markdownIt-Anchor" href="#2-求first集算法"></a> 2、求First集算法</h5><p>​    存储每一个非终结符对应的First集，扫描每一条产生式，记录每一轮扫描是每个非终结符First集是否增大过。全部初始化为没有增大的状态，对于课本的五种类型依次求解，每次将结果加入对应的集合中，若一次扫描First集没有增大，则说明循环结束。</p><h5 id="3-求follow集算法"><a class="markdownIt-Anchor" href="#3-求follow集算法"></a> 3、求Follow集算法</h5><p>​    存储每一个非终结符对应的Follow集，将’#'加入文法的开始符号的Follow集合中，记录每一轮扫描是每个非终结符Follow集合是否增大过，全部初始化为没有增大的状态，扫描每一条产生式的右部，扫描到非终结符,判断在该非终结符之后的子串能否推导空，若该符号串可以推导出空,还要将Follow(lp)加入到里面。</p><h5 id="4-求select集算法"><a class="markdownIt-Anchor" href="#4-求select集算法"></a> 4、求Select集算法</h5><p>​    初始化每条产生式对应的Select集合为空，若产生式右部不能推导出空，则将右部的First集加入Select集，如果可以推出空，则需要同时将左部的Follow集合右部的First集去掉空的部分加入Select集。</p><h3 id="五-实验小结"><a class="markdownIt-Anchor" href="#五-实验小结"></a> 五、实验小结</h3><p>​    通过本次实验，知道了如何判断一个文法是不是LL（1）文法，同时对于First、Follow以及Select集的求解原理变得更加熟悉，并且知道了如何用计算机语言求解First，Follow以及Select集。不足之处是，没有完成判断文法是否为左递归文法以及左递归文法的转换部分。</p><h3 id="六-附件"><a class="markdownIt-Anchor" href="#六-附件"></a> 六、附件</h3><h5 id="1-源代码"><a class="markdownIt-Anchor" href="#1-源代码"></a> 1、源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gw</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'D:\\test\\Gw.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.readlines()</span><br><span class="line">            content = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> content]</span><br><span class="line">            self.Vn = content[<span class="number">0</span>].split(<span class="string">' '</span>)</span><br><span class="line">            self.Vt = content[<span class="number">1</span>].split(<span class="string">' '</span>)</span><br><span class="line">            self.start = content[<span class="number">2</span>]</span><br><span class="line">            self.produce = []</span><br><span class="line">            self.left = []</span><br><span class="line">            self.right = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,len(content)):</span><br><span class="line">                self.produce.append(content[i])</span><br><span class="line">                self.left.append(content[i].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>])</span><br><span class="line">                self.right.append(content[i].split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showGw</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'非终结符:'</span>,self.Vn)</span><br><span class="line">        print(<span class="string">'终 结 符:'</span>,self.Vt)</span><br><span class="line">        print(<span class="string">'开始符号:'</span>,self.start)</span><br><span class="line">        print(<span class="string">'产生式如下:'</span>)</span><br><span class="line">        <span class="keyword">for</span> l,r <span class="keyword">in</span> zip(self.left,self.right):</span><br><span class="line">            print(l+<span class="string">'-&gt;'</span>+r)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.isEmpty = dict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.Vn)):</span><br><span class="line">            self.isEmpty[self.Vn[i]] = <span class="number">-1</span></span><br><span class="line">        print(self.isEmpty)</span><br><span class="line">        temp = self.produce[::]</span><br><span class="line">        deleteIndex=[]</span><br><span class="line">        pointer = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> pointer&lt;len(temp):</span><br><span class="line">            <span class="keyword">if</span> pointer <span class="keyword">not</span> <span class="keyword">in</span> deleteIndex:</span><br><span class="line">                lp = temp[pointer].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]</span><br><span class="line">                rp = temp[pointer].split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> rp==<span class="string">'!'</span>:</span><br><span class="line">                    self.isEmpty[lp] = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">                        <span class="keyword">if</span> temp[i].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]==lp <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> deleteIndex:</span><br><span class="line">                            deleteIndex.append(i)</span><br><span class="line">                l = list(rp)</span><br><span class="line">                isContainVt = [i <span class="keyword">in</span> self.Vt <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line">                <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">in</span> isContainVt:</span><br><span class="line">                    deleteIndex.append(pointer)</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">                        <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> deleteIndex:</span><br><span class="line">                            <span class="keyword">if</span> temp[k].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]==lp:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        self.isEmpty[lp] = <span class="number">0</span></span><br><span class="line">            pointer = pointer+<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">-1</span> <span class="keyword">in</span> self.isEmpty.values():</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> deleteIndex:</span><br><span class="line">                    lp = temp[i].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]</span><br><span class="line">                    rp = temp[i].split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]</span><br><span class="line">                    rlsit = list(rp)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(rlsit)):</span><br><span class="line">                        <span class="keyword">if</span> self.isEmpty[rlsit[j]]==<span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">if</span> j==len(rlsit)<span class="number">-1</span>:</span><br><span class="line">                                self.isEmpty[lp]=<span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> self.isEmpty[rlsit[j]]==<span class="number">0</span>:</span><br><span class="line">                            deleteIndex.append(i)</span><br><span class="line">                            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">                                <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> deleteIndex:</span><br><span class="line">                                    <span class="keyword">if</span> temp[k].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]==lp:</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                self.isEmpty[lp] = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'非终结符能否推导出空的信息:'</span>)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> self.Vn:</span><br><span class="line">            <span class="keyword">if</span> self.isEmpty[v]==<span class="number">1</span>:</span><br><span class="line">                yon = <span class="string">'是'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                yon = <span class="string">'否'</span></span><br><span class="line">            print(<span class="string">'%s:%s'</span>%(v,yon))</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFirst</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.First = dict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.Vn:</span><br><span class="line">            self.First[i] = list()</span><br><span class="line">        isChange = dict()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> self.Vn:</span><br><span class="line">                isChange[k] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.produce)):</span><br><span class="line">                lp = self.produce[i].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]</span><br><span class="line">                rp = self.produce[i].split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]</span><br><span class="line">                rlist = list(rp)</span><br><span class="line">                <span class="keyword">if</span> rlist[<span class="number">0</span>]==<span class="string">'!'</span> <span class="keyword">or</span> rlist[<span class="number">0</span>] <span class="keyword">in</span> self.Vt:</span><br><span class="line">                    <span class="keyword">if</span> rlist[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> self.First[lp]:</span><br><span class="line">                        self.First[lp].append(rlist[<span class="number">0</span>])</span><br><span class="line">                        isChange[lp]=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> rlist:</span><br><span class="line">                        <span class="keyword">if</span> j <span class="keyword">in</span> self.Vn:</span><br><span class="line">                            <span class="keyword">if</span> self.isEmpty[j]==<span class="number">1</span>:</span><br><span class="line">                                oldsize = len(self.First[lp])</span><br><span class="line">                                templist = self.First[j][::]</span><br><span class="line">                                <span class="keyword">if</span> <span class="string">'!'</span> <span class="keyword">in</span> templist:</span><br><span class="line">                                    templist.remove(<span class="string">'!'</span>)</span><br><span class="line">                                <span class="keyword">for</span> x <span class="keyword">in</span> templist:</span><br><span class="line">                                    <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> self.First[lp]:</span><br><span class="line">                                        self.First[lp].append(x)</span><br><span class="line">                                <span class="keyword">if</span> rp.endswith(j) <span class="keyword">and</span> <span class="string">'!'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.First[lp]:</span><br><span class="line">                                    self.First[lp].append(<span class="string">'!'</span>)</span><br><span class="line">                                newsize = len(self.First[lp])</span><br><span class="line">                                <span class="keyword">if</span> oldsize!=newsize:</span><br><span class="line">                                    isChange[lp]=<span class="number">1</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                oldsize = len(self.First[lp])</span><br><span class="line">                                <span class="keyword">if</span> j <span class="keyword">in</span> self.Vn:</span><br><span class="line">                                    templist = self.First[j][::]</span><br><span class="line">                                    <span class="keyword">for</span> x <span class="keyword">in</span> templist:</span><br><span class="line">                                        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> self.First[lp]:</span><br><span class="line">                                            self.First[lp].append(x)</span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> self.First[lp]:</span><br><span class="line">                                        self.First[lp].append(x)</span><br><span class="line">                                newsize = len(self.First[lp])</span><br><span class="line">                                <span class="keyword">if</span> oldsize!=newsize:</span><br><span class="line">                                    isChange[lp]=<span class="number">1</span></span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> isChange.values():</span><br><span class="line">                print(<span class="string">'First集合不再增大!'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'First集合有增大!'</span>)</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showFirst</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'First集合信息:'</span>)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> self.Vn:</span><br><span class="line">            print(v,self.First[v])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canCauseEmpty</span><span class="params">(self,plist)</span>:</span></span><br><span class="line">        first = list()</span><br><span class="line">        <span class="keyword">if</span> len(plist)==<span class="number">0</span>:</span><br><span class="line">            first.append(<span class="string">'!'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> plist:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> self.Vn:</span><br><span class="line">                    <span class="keyword">if</span> self.isEmpty[i]==<span class="number">1</span>:</span><br><span class="line">                        t = self.First[i][::]</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">'!'</span> <span class="keyword">in</span> t:</span><br><span class="line">                            t.remove(<span class="string">'!'</span>)</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> t:</span><br><span class="line">                            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> first:</span><br><span class="line">                                first.append(k)</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">''</span>.join(plist).endswith(i) <span class="keyword">and</span> <span class="string">'!'</span> <span class="keyword">not</span> <span class="keyword">in</span> first:</span><br><span class="line">                            first.append(<span class="string">'!'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> self.First[i]:</span><br><span class="line">                            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> first:</span><br><span class="line">                                first.append(k)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> first:</span><br><span class="line">                        first.append(i)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> first</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFollow</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.Follow = dict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.Vn:</span><br><span class="line">            self.Follow[i] = list()</span><br><span class="line">        self.Follow[self.start].append(<span class="string">'#'</span>)</span><br><span class="line">        isChange = dict()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> self.Vn:</span><br><span class="line">                    isChange[k] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.produce)):</span><br><span class="line">                lp = self.produce[i].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]</span><br><span class="line">                rp = self.produce[i].split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]</span><br><span class="line">                rlist = list(rp)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(len(rlist)):</span><br><span class="line">                    <span class="keyword">if</span> rlist[j] <span class="keyword">in</span> self.Vn:</span><br><span class="line">                        reslist = self.canCauseEmpty(rlist[j+<span class="number">1</span>::])</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">'!'</span> <span class="keyword">in</span> reslist:</span><br><span class="line">                            oldsize = len(self.Follow[rlist[j]])</span><br><span class="line">                            <span class="keyword">for</span> y <span class="keyword">in</span> self.Follow[lp]:</span><br><span class="line">                                <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> self.Follow[rlist[j]]:</span><br><span class="line">                                    self.Follow[rlist[j]].append(y)</span><br><span class="line">                            newsize = len(self.Follow[rlist[j]])</span><br><span class="line">                            <span class="keyword">if</span> oldsize!=newsize:</span><br><span class="line">                                isChange[rlist[j]] = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        oldsize = len(self.Follow[rlist[j]])</span><br><span class="line">                        <span class="keyword">for</span> x <span class="keyword">in</span> reslist:</span><br><span class="line">                            <span class="keyword">if</span> x!=<span class="string">'!'</span> <span class="keyword">and</span> x <span class="keyword">not</span> <span class="keyword">in</span> self.Follow[rlist[j]]:</span><br><span class="line">                                self.Follow[rlist[j]].append(x)</span><br><span class="line">                        newsize = len(self.Follow[rlist[j]])</span><br><span class="line">                        <span class="keyword">if</span> oldsize!=newsize:</span><br><span class="line">                            isChange[rlist[j]] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> isChange.values():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showFollow</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Follow集合信息:'</span>)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> self.Vn:</span><br><span class="line">            print(key,self.Follow[key])</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSelect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.Select = dict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.produce:</span><br><span class="line">            self.Select[i] = list()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.produce)):</span><br><span class="line">             lp = self.produce[i].split(<span class="string">'-&gt;'</span>)[<span class="number">0</span>]</span><br><span class="line">             rp = self.produce[i].split(<span class="string">'-&gt;'</span>)[<span class="number">1</span>]</span><br><span class="line">             rlist = list(rp)</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span>  rlist[<span class="number">0</span>]==<span class="string">'!'</span>:</span><br><span class="line">                 <span class="keyword">for</span> v <span class="keyword">in</span> self.Follow[lp]:</span><br><span class="line">                     <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> self.Select[self.produce[i]]:</span><br><span class="line">                         self.Select[self.produce[i]].append(v)</span><br><span class="line">             <span class="keyword">elif</span> rlist[<span class="number">0</span>] <span class="keyword">in</span> self.Vt:</span><br><span class="line">                 self.Select[self.produce[i]].append(rlist[<span class="number">0</span>])</span><br><span class="line">             <span class="keyword">else</span>:</span><br><span class="line">                 res = self.canCauseEmpty(rlist)</span><br><span class="line">                 <span class="keyword">if</span> <span class="string">'!'</span> <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">                     <span class="keyword">for</span> v <span class="keyword">in</span> res:</span><br><span class="line">                         <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> self.Select[self.produce[i]]:</span><br><span class="line">                             self.Select[self.produce[i]].append(v)</span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     <span class="keyword">for</span> v <span class="keyword">in</span> res:</span><br><span class="line">                         <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> self.Select[self.produce[i]] <span class="keyword">and</span> v!=<span class="string">'!'</span>:</span><br><span class="line">                             self.Select[self.produce[i]].append(v)</span><br><span class="line">                     <span class="keyword">for</span> v <span class="keyword">in</span> self.Follow[lp]:</span><br><span class="line">                         <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> self.Select[self.produce[i]]:</span><br><span class="line">                             self.Select[self.produce[i]].append(v)</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showSelect</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Select集合信息:'</span>)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> self.produce:</span><br><span class="line">            print(key,self.Select[key])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isLLone</span><span class="params">(self)</span>:</span></span><br><span class="line">        isright = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> self.Vn:</span><br><span class="line">            tset = set()</span><br><span class="line">            tset.add(<span class="string">'#'</span>)</span><br><span class="line">            tset = tset | set(self.Vt)</span><br><span class="line">            <span class="keyword">for</span> l,r <span class="keyword">in</span> zip(self.left,self.right):</span><br><span class="line">                <span class="keyword">if</span> k==l:</span><br><span class="line">                    p = l+<span class="string">'-&gt;'</span>+r</span><br><span class="line">                    tset = tset &amp; set(self.Select[p])</span><br><span class="line">            <span class="keyword">if</span> len(tset)==<span class="number">0</span>:</span><br><span class="line">                isright.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                isright.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> isright:</span><br><span class="line">            print(<span class="string">'不是LL(1)文法!'</span>)</span><br><span class="line">            self.isll1 = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'是LL(1)文法!'</span>)</span><br><span class="line">            self.isll1 = <span class="literal">True</span></span><br><span class="line">        print(isright)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    w = Gw()</span><br><span class="line">    <span class="comment">#w.showGw()  #文件中读到的内容</span></span><br><span class="line">    w.canEmpty()</span><br><span class="line">    w.show()</span><br><span class="line">    w.getFirst()</span><br><span class="line">    w.showFirst()</span><br><span class="line">    w.getFollow()</span><br><span class="line">    <span class="comment">#res = w.canCauseEmpty(['A','D'])</span></span><br><span class="line">    <span class="comment">#print('res=',res)</span></span><br><span class="line">    w.showFollow()</span><br><span class="line">    w.getSelect()</span><br><span class="line">    w.showSelect()</span><br><span class="line">    w.isLLone()</span><br></pre></td></tr></table></figure><h5 id="2-运行结果截图"><a class="markdownIt-Anchor" href="#2-运行结果截图"></a> 2、运行结果截图</h5><p>输入：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/LL(1)%E6%96%87%E6%B3%95%E7%9A%84%E5%88%A4%E6%96%AD%E5%8F%8A%E8%BD%AC%E6%8D%A2/2.png" alt="" /></p><p>输出：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/LL(1)%E6%96%87%E6%B3%95%E7%9A%84%E5%88%A4%E6%96%AD%E5%8F%8A%E8%BD%AC%E6%8D%A2/1.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Compiler Principle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用过程中遇到过的问题</title>
      <link href="/2020/01/602432413.html"/>
      <url>/2020/01/602432413.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr /><p>问题：vscode控制台中文乱码</p><p>方法：添加<strong>系统</strong>变量如下</p><p>​<img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/vscode%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="" /></p><hr /><p> </p><p> </p><hr /><p>问题：vscode控制台无法输入文字</p><p>方法：在launch.json中将&quot;console&quot;设置为&quot;externalTerminal&quot;。即</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/vscode%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/2.png" alt="" /></p><hr /><p> </p><p> </p><a id="more"></a><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Experience </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFA最小化</title>
      <link href="/2020/01/2082968010.html"/>
      <url>/2020/01/2082968010.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一-实验名称"><a class="markdownIt-Anchor" href="#一-实验名称"></a> 一、实验名称</h2><pre><code> 确定有穷自动机的最小化</code></pre><p> </p><h2 id="二-实验目的"><a class="markdownIt-Anchor" href="#二-实验目的"></a> 二、实验目的</h2><ol><li>输入DFA，输出等价的状态数最少的DFA</li><li>实现子集划分算法</li><li>输入和输出均以定义的形式</li></ol><p> </p><a id="more"></a><h2 id="三-实验原理"><a class="markdownIt-Anchor" href="#三-实验原理"></a> 三、实验原理</h2><h5 id="1-dfa的定义"><a class="markdownIt-Anchor" href="#1-dfa的定义"></a> 1、DFA的定义</h5><p>一个确定的有穷自动机M是一个五元组，M=(K,E,f,S,Z)其中</p><p>a.   K是一个有穷集，它的每个元素称为一个状态；</p><p>b.   E是一个有穷字母表，它的每个元素称为一个输入符号；</p><p>c.   f是转换函数，是K×E-&gt;K上的映像，即，如f(ki,a)=kj(ki∈K,kj∈K)就意味着，当前状态为ki，输入字符为a时，将转换到下一状态kj，我们把kj称作ki的一个后继状态；</p><p>d.   S∈K，是唯一的一个初态；</p><p>e.   Z包含于K，是一个终态集，终态也称可接受状态或结束状态。</p><p> </p><h5 id="2-无用状态"><a class="markdownIt-Anchor" href="#2-无用状态"></a> 2、无用状态</h5><p>所谓有穷自动机的无用状态，是指这样的状态：从该自动机的开始状态出发，任何串也不能到达的那个状态。或者从这个状态没有通路到达状态。</p><p> </p><h5 id="3-状态等价条件"><a class="markdownIt-Anchor" href="#3-状态等价条件"></a> 3、状态等价条件</h5><p>​    a.一致性条件——状态s和t必须同时为可接受状态或不可接受状态</p><p>​    b.蔓延性条件——对于所有输入符号，状态s和状态t必须转换到等价的状态里。</p><p> </p><h2 id="四-实验思路"><a class="markdownIt-Anchor" href="#四-实验思路"></a> 四、实验思路</h2><h5 id="1-输入"><a class="markdownIt-Anchor" href="#1-输入"></a> 1、输入</h5><p>​    根据实验要求，以DFA的定义形式输入，即输入M=(K,E,f,S,Z)，其中f另外输入。采用putin作为输入函数，首先输入定义形式，用split函数按照’}‘进行分割，再按照’}’分割。最后对得到的二维列表zanshi1中的元素进行输出，得到K,E,S,Z。再输入f中弧的条数，依次输入弧。</p><p> </p><h5 id="2-move算法"><a class="markdownIt-Anchor" href="#2-move算法"></a> 2、move算法</h5><p>​    move算法与NFA的确定化里的算法一样，在这里为了求某一子集经过弧到达什么子集而使用move算法。思路是：建立一个新列表存放move算法产生的状态集合，若f中的弧的输入符号为a或者b，求经过紧跟a或者b的下一个状态，将这些状态放于新列表中。</p><p> </p><h5 id="3-子集划分算法"><a class="markdownIt-Anchor" href="#3-子集划分算法"></a> 3、子集划分算法</h5><p>​    定义operation()函数为子集划分算法函数，具体执行步骤如下：</p><p>​    a.将K中的状态集分为两种：终态集和非终态集，存于KK中，KK存放最终划分后得到的集合。</p><p>​    b.设立循环条件，子集划分算法划分最细的情况是每个状态都为一个子集，所以以此作为循环条件。若KK中集合个数不等于K中状态个数，则继续循环。</p><p>​    c.设立标志位llag=0用来决定是否跳出循环，每不执行一次划分算法则llag加1，若最终llag等于KK长度，说明此次循环没有子集划分，则说明划分完毕，退出循环。</p><p>​    d.对KK中的集合依次进行操作，判断他们进过move算法得到的集合是否是KK中已有的集合，若是则不执行划分，否则执行划分算法。</p><p>​    e. 若执行划分算法，则先算出集合中首个状态的move算法得到的集合属于哪个已知集合，再对其他状态进行同样操作，和首个状态move算法属于相同集合的放于同一个列表中，其他的放于另一个列表中。</p><p>​    f.将KK中原来要划分的集合删除，加入划分后的两个集合。循环执行上述步骤，知道KK中集合个数和标志位llag值相同或者KK中集合个数等于K中状态个数，则退出循环。</p><p> </p><h5 id="4-输出"><a class="markdownIt-Anchor" href="#4-输出"></a> 4、输出</h5><p>​    输出同样为DFA的定义形式，先输出M=(K,E,f,S,Z)，再输出其中的f。</p><p> </p><h2 id="五-实验小结"><a class="markdownIt-Anchor" href="#五-实验小结"></a> 五、实验小结</h2><p>​    本次实验主要遇到了以下问题：</p><h5 id="1-输入存储问题"><a class="markdownIt-Anchor" href="#1-输入存储问题"></a> 1、输入存储问题</h5><p>​    输入要求使用定义形式，需要区分输入的元素，分别得到状态集，输入符号集，初态集以及终态集。通过python中的split函数将输入的字符串分别以’{‘和’}’分开，再通过循环操作取出得到的二维列表中每一个元素的第二个元素，即为所求的状态集，输入符号集，初态集以及终态集，再输出f的具体弧。</p><p> </p><h5 id="2-子集划分算法问题"><a class="markdownIt-Anchor" href="#2-子集划分算法问题"></a> 2、子集划分算法问题</h5><p>​    子集划分算法需要对划分后得到的集合一直执行划分算法，但是会有一个表示划分完毕的结果，在程序中通过设立两个条件来判断是否划分完毕，一是划分得到的子集个数是否等于状态集中状态个数，若是则说明每个状态都为一个子集，即肯定划分结束。另一判断条件为设置一个标志位，通过观察标志位的数值来判断本次划分算法是否执行，若没有执行则说明已经划分完毕，同样退出循环。</p><p> </p><h5 id="3-输出问题"><a class="markdownIt-Anchor" href="#3-输出问题"></a> 3、输出问题</h5><p>​    输出的形式为DFA的定义形式，通过对格式的控制，将原本定义中的列表类型都转为集合类型，最后输出。同时定义中的f需要单独输出。</p><p> </p><h2 id="六-附件"><a class="markdownIt-Anchor" href="#六-附件"></a> 六、附件</h2><h5 id="1-源代码"><a class="markdownIt-Anchor" href="#1-源代码"></a> 1、源代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">K = []  <span class="comment"># 状态</span></span><br><span class="line">E = []  <span class="comment"># 符号</span></span><br><span class="line">f = []  <span class="comment"># 弧</span></span><br><span class="line">f1 = [] <span class="comment"># 新弧</span></span><br><span class="line">S = []  <span class="comment"># 初态</span></span><br><span class="line">Z = []  <span class="comment"># 终态</span></span><br><span class="line">zanshi1 = []  <span class="comment"># 存放五元组形式1</span></span><br><span class="line">KK = []  <span class="comment"># 最终状态集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#M=(&#123;1,2,3,4,5,6,7&#125;,&#123;a,b&#125;,f,&#123;1&#125;,&#123;5,6,7&#125;)</span></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putin</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'输入DFA M'</span>)</span><br><span class="line">    M = input(<span class="string">'以定义形式输入DFA(如:M=(K,E,f,S,Z):)'</span>)</span><br><span class="line">    N = M.split(<span class="string">'&#125;'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> N:</span><br><span class="line">        zanshi1.append(i.split(<span class="string">'&#123;'</span>))</span><br><span class="line">    K1 = (zanshi1[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">    K1 =K1.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> K1:</span><br><span class="line">        K.append(i)</span><br><span class="line">    E1 = (zanshi1[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">    E1 =E1.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> E1:</span><br><span class="line">        E.append(i)</span><br><span class="line">    S1 = (zanshi1[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line">    S1 =S1.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> S1:</span><br><span class="line">        S.append(i)</span><br><span class="line">    Z1 = (zanshi1[<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">    Z1 =Z1.split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Z1:</span><br><span class="line">        Z.append(i)</span><br><span class="line">    print(<span class="string">'输入f中弧的条数:'</span>)</span><br><span class="line">    n = int(input())</span><br><span class="line">    print(<span class="string">'输入弧(分别输入状态1,输入符号,状态2,以空格区分换行结束,ε表示为$)'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        f.append([])</span><br><span class="line">        a = input()</span><br><span class="line">        f[len(f)<span class="number">-1</span>] = a.split(<span class="string">' '</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(a, e, f)</span>:</span>  <span class="comment"># a为列表 e为一个符号</span></span><br><span class="line">      s = []</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">          <span class="keyword">for</span> j <span class="keyword">in</span> range(len(f)):</span><br><span class="line">              <span class="keyword">if</span> i == f[j][<span class="number">0</span>] <span class="keyword">and</span> f[j][<span class="number">1</span>] == e:</span><br><span class="line">                  s.append(f[j][<span class="number">2</span>])</span><br><span class="line">      <span class="keyword">return</span> sorted(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子集划分算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operation</span><span class="params">()</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> K:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> Z:</span><br><span class="line">            a.append(x)</span><br><span class="line">    KK.append(a)</span><br><span class="line">    KK.append(Z)</span><br><span class="line">    <span class="keyword">while</span> len(KK) != len(K):</span><br><span class="line">        llag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(KK)):</span><br><span class="line">            ziji = KK[i]</span><br><span class="line">            glag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> range(len(E)):</span><br><span class="line">                ziji1 = move(ziji, E[jj], f)</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(KK)):</span><br><span class="line">                    <span class="keyword">if</span> len(set(ziji1).difference(set(KK[k]))) != <span class="number">0</span>:</span><br><span class="line">                        flag = flag+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> flag == len(KK):</span><br><span class="line">                    glag = glag + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> glag == <span class="number">1</span>:</span><br><span class="line">                ilag = jj</span><br><span class="line">                zhenziji1 = []</span><br><span class="line">                zhenziji1.append(ziji[<span class="number">0</span>])</span><br><span class="line">                ziji1 = move(zhenziji1, E[ilag], f)</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(KK)):</span><br><span class="line">                    <span class="keyword">if</span> len(set(ziji1).difference(set(KK[k]))) == <span class="number">0</span>:</span><br><span class="line">                        hlag = k</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                zhenziji2 = []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(ziji)):</span><br><span class="line">                    zz = []</span><br><span class="line">                    zz.append(ziji[j])</span><br><span class="line">                    ziji1 = move(zz, E[ilag], f)</span><br><span class="line">                    <span class="keyword">if</span> len(set(ziji1).difference(set(KK[hlag]))) == <span class="number">0</span>:</span><br><span class="line">                        zhenziji1.append(ziji[j])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        zhenziji2.append(ziji[j])</span><br><span class="line">                KK.pop(i)</span><br><span class="line">                KK.append(zhenziji1)</span><br><span class="line">                KK.append(zhenziji2)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                llag = llag+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> llag == len(KK):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">putin()</span><br><span class="line">operation()</span><br><span class="line"><span class="keyword">for</span> yy <span class="keyword">in</span> KK:</span><br><span class="line">    <span class="keyword">if</span> len(yy) &gt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(yy)):</span><br><span class="line">            <span class="keyword">if</span> yy[i] <span class="keyword">in</span> K:</span><br><span class="line">                K.remove(yy[i])</span><br><span class="line">            <span class="keyword">if</span> yy[i] <span class="keyword">in</span> S:</span><br><span class="line">                S.remove(yy[i])</span><br><span class="line">            <span class="keyword">if</span> yy[i] <span class="keyword">in</span> Z:</span><br><span class="line">                Z.remove(yy[i])</span><br><span class="line">            <span class="keyword">for</span> yyy <span class="keyword">in</span> f:</span><br><span class="line">                <span class="keyword">if</span> yyy[<span class="number">0</span>] == yy[i]:</span><br><span class="line">                    yyy[<span class="number">0</span>] = yy[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> yyy[<span class="number">2</span>] == yy[i]:</span><br><span class="line">                    yyy[<span class="number">2</span>] = yy[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> yy <span class="keyword">in</span> f:</span><br><span class="line">    <span class="keyword">if</span> yy <span class="keyword">not</span> <span class="keyword">in</span> f1:</span><br><span class="line">        f1.append(yy)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(K)):</span><br><span class="line">    K[i] = int(K[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(S)):</span><br><span class="line">    S[i] = int(S[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Z)):</span><br><span class="line">    Z[i] = int(Z[i])</span><br><span class="line">print(<span class="string">'输出最小化DFA M'</span>)</span><br><span class="line">print(<span class="string">'M1=('</span>,set(K),<span class="string">','</span>,set(E), <span class="string">','</span>, <span class="string">'f'</span>, <span class="string">','</span>,set(S), <span class="string">','</span>, set(Z), <span class="string">')'</span>)</span><br><span class="line">print(<span class="string">'其中f为'</span>)</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> yy <span class="keyword">in</span> f1:</span><br><span class="line">    print(<span class="string">'f('</span>,yy[<span class="number">0</span>],<span class="string">','</span>,yy[<span class="number">1</span>],<span class="string">')='</span>,yy[<span class="number">2</span>],end=<span class="string">'   '</span>)</span><br><span class="line">    k = k+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">'\n'</span>)</span><br><span class="line">        k = <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="2-运行结果截图"><a class="markdownIt-Anchor" href="#2-运行结果截图"></a> 2、运行结果截图</h5><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/DFA%E6%9C%80%E5%B0%8F%E5%8C%96/1.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Compiler Principle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-2115】</title>
      <link href="/2020/01/3963635837.html"/>
      <url>/2020/01/3963635837.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给你一个简单的循环for(int i=A;i!=B;i+=C)，i是16位得数，问你循环结束的次数，如果是死循环的话，就输出死循环</p><a id="more"></a><p> </p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>刚开始想简单的模拟一下，但是超时至少模拟2^k次循环，扩展欧几里得问题完美解决这个问题<br />题意循环可以转化成公式<br />( A + x<em>C ) mod (1&lt;&lt;K) = B<br />因为 题意中的A 肯定是小于(1&lt;&lt;k)的所以化简为<br />x</em>C mod (1&lt;&lt;k) = B - A<br />这个就是扩展欧几里得定理求模线性方程<br />令D = B - A , n= (1&lt;&lt;k) 得<br />x<em>C mod n = D<br />则<br />x</em>C - y<em>n =D<br />这就是<br />a</em>x+b*y=c的扩展欧几里得定理解不定方程了</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3 3 2 16</span><br><span class="line">3 7 2 16</span><br><span class="line">7 3 2 16</span><br><span class="line">3 4 2 16</span><br><span class="line">0 0 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">32766</span><br><span class="line">FOREVER</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A,B,C,K;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x,y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> GCD;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tol;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> &amp;x,<span class="keyword">long</span> <span class="keyword">long</span> &amp;y,<span class="keyword">long</span> <span class="keyword">long</span> &amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        d=a; x=<span class="number">1</span>; y=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        exgcd(b,a%b,y,x,d);</span><br><span class="line">        y-=x*(a/b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d %I64d %I64d %I64d"</span>,&amp;A,&amp;B,&amp;C,&amp;K)!=EOF&amp;&amp;(A||B||C||K))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A==B)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        B-=A;</span><br><span class="line">        tol=(<span class="number">1L</span>L&lt;&lt;K);</span><br><span class="line">        exgcd(tol,C,x,y,GCD);</span><br><span class="line">        <span class="comment">//无解</span></span><br><span class="line">        <span class="keyword">if</span>(B%GCD!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"FOREVER"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x*=(B/GCD);</span><br><span class="line">            y*=(B/GCD);</span><br><span class="line">            y=(y%(tol/GCD)+tol/GCD)%(tol/GCD);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid2115"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid2115"></a> 题源：<a href="http://poj.org/problem?id=2115" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=2115</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1698】 Just a Hook</title>
      <link href="/2020/01/2635834013.html"/>
      <url>/2020/01/2635834013.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>有m个钩子，初始的时候钩子都是铜钩子，伤害为1，然后有n种操作，每个操作有三个数,l,r,c表示讲从l到r的钩子的价值换成c，最后输出所有钩子的价值总和</p><p> <a id="more"></a></p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">2</span><br><span class="line">1 5 2</span><br><span class="line">5 9 3</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">Case 1: The total value of the hook is 24.</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">400001</span>];</span><br><span class="line"><span class="keyword">int</span> lazy[<span class="number">400001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lazy[t] = <span class="number">1</span>;<span class="comment">//初值为铜</span></span><br><span class="line">    tree[t] = r - l + <span class="number">1</span>;<span class="comment">//初始化区间和</span></span><br><span class="line">    <span class="keyword">if</span>(l == r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(l,mid,t &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    build(mid + <span class="number">1</span>,r,t &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r)<span class="comment">///区间在要求改变的范围内改变区间总和，并改变对应的lazy为val，不继续深入并返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        lazy[t] = val;</span><br><span class="line">        tree[t] = (r - l + <span class="number">1</span>) * val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(lazy[t])<span class="comment">///区间不被要求的范围所包含，需要向下更新。</span></span><br><span class="line">    &#123;</span><br><span class="line">        lazy[t &lt;&lt; <span class="number">1</span>] = lazy[t &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = lazy[t];</span><br><span class="line">        tree[t &lt;&lt; <span class="number">1</span>] = lazy[t] * (mid - l + <span class="number">1</span>);<span class="comment">//区间和进行分割向下分配</span></span><br><span class="line">        tree[t &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = lazy[t] * (r - mid);<span class="comment">//区间和进行分割向下分配</span></span><br><span class="line">        lazy[t] = <span class="number">0</span>;<span class="comment">//lazy归零</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(R &lt;= mid)update(L,R,val,l,mid,t &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid)update(L,R,val,mid + <span class="number">1</span>,r,t &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        update(L,mid,val,l,mid,t &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        update(mid + <span class="number">1</span>,R,val,mid + <span class="number">1</span>,r,t &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[t] = tree[t &lt;&lt; <span class="number">1</span>] + tree[t &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];<span class="comment">///向上更新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= t;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);<span class="comment">//用scanf耗时少</span></span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            update(a,b,c,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: The total value of the hook is %d.\n"</span>,i,tree[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1698"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1698"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1698" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1698</a></h5></blockquote><blockquote><p>参考：<a href="https://www.cnblogs.com/8023spz/p/7787535.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/8023spz/p/7787535.html</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-3264】 Balanced Lineup</title>
      <link href="/2020/01/1766859022.html"/>
      <url>/2020/01/1766859022.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给定N个数（1 ≤ <em>N</em> ≤ 50,000），询问Q次（1 ≤ <em>Q</em> ≤ 200,000），每次询问某一区间[A,B]内的最大值和最小值的差。</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">6 3</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">1 5</span><br><span class="line">4 6</span><br><span class="line">2 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,x,y;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">111</span>;</span><br><span class="line"><span class="keyword">int</span> maxVal[MAXN],minVal[MAXN], a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        maxVal[i] = a[i];</span><br><span class="line">        minVal[i] = a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; lowbit(i); j &lt;&lt;= <span class="number">1</span>)  <span class="comment">// 与所有涉及到的子区间段最大值比较</span></span><br><span class="line">        &#123;</span><br><span class="line">             maxVal[i] = <span class="built_in">max</span>(maxVal[i], maxVal[i - j]);</span><br><span class="line">             minVal[i] = <span class="built_in">min</span>(minVal[i], minVal[i - j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ansmax = a[y];   <span class="comment">//该位置原树形数组的值</span></span><br><span class="line">    <span class="keyword">int</span> ansmin = a[y];</span><br><span class="line">    <span class="keyword">while</span>(x != y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(y-=<span class="number">1</span>; y-lowbit(y) &gt;= x; y -= lowbit(y))</span><br><span class="line">        &#123;</span><br><span class="line">            ansmax = <span class="built_in">max</span>(ansmax, maxVal[y]);  <span class="comment">//temp1[i]表示1-i区间中最大的值</span></span><br><span class="line">            ansmin = <span class="built_in">min</span>(ansmin, minVal[y]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ansmax = <span class="built_in">max</span>(ansmax, a[y]);</span><br><span class="line">        ansmin = <span class="built_in">min</span>(ansmin, a[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ansmax-ansmin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("b.txt","r",stdin);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="comment">//cin&gt;&gt;n&gt;&gt;m;</span></span><br><span class="line"></span><br><span class="line">    init(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="comment">//cin&gt;&gt;x&gt;&gt;y;</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;query(x,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid3264"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid3264"></a> 题源：<a href="http://poj.org/problem?id=3264" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=3264</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-3468】 A Simple Problem with Integers</title>
      <link href="/2020/01/2907481802.html"/>
      <url>/2020/01/2907481802.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>n个数，m次操作<br />Q x y是输出第x个数到第y个数的和<br />C x y z 是把第x个数到第y个数之间的每一个数都加z</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">10 5</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">Q 4 4</span><br><span class="line">Q 1 10</span><br><span class="line">Q 2 4</span><br><span class="line">C 3 6 3</span><br><span class="line">Q 2 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">4</span><br><span class="line">55</span><br><span class="line">9</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">9e5</span> + <span class="number">111</span>;   <span class="comment">//如果是9e4 + 111，就算开的不够</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum1[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum2[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///效果：把x位置后面所有的数的值+w</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        sum1[i]+=w;<span class="comment">//维护前缀和c[i]</span></span><br><span class="line">        sum2[i]+=w*(x<span class="number">-1</span>);<span class="comment">//维护前缀和c[i]*(n-1)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///效果：把x位置到y位置所有的数的值+w</span></span><br><span class="line"><span class="comment">//原理：先把x后面的数都加上w，再把y后面的数都减去w。这样就达到了“x位置到y位置所有的数的值加w”的目的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(x,val);  <span class="comment">//x后面的值加w</span></span><br><span class="line">    add(y+<span class="number">1</span>,-val);<span class="comment">//y后面的值都减去w</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///求1~x的和</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=x*sum1[i]-sum2[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///求x~y的和</span></span><br><span class="line"><span class="comment">//原理：[x,y]之间的和 = [1,y]之间的和 - [1,x]之间的和</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(y)-sum(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("a.txt","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        add(i,a[i]-a[i<span class="number">-1</span>]);<span class="comment">//维护差分数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;range_sum(x,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'C'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            range_add(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid3468"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid3468"></a> 题源：<a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=3468</a></h5></blockquote><blockquote><h5 id="参考httpswwwcnblogscombluefly-hrbustp10416808html"><a class="markdownIt-Anchor" href="#参考httpswwwcnblogscombluefly-hrbustp10416808html"></a> 参考：<a href="https://www.cnblogs.com/bluefly-hrbust/p/10416808.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/bluefly-hrbust/p/10416808.html</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1540】 Tunnel Warfare</title>
      <link href="/2020/01/2630293951.html"/>
      <url>/2020/01/2630293951.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>有n个点，m个事件。</p><p>D x是破坏这个点；</p><p>Q x是询问包括x在内的最大连续区间是多少</p><p>R是恢复上一次破坏的点。</p><p> <a id="more"></a></p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">7 9</span><br><span class="line">D 3</span><br><span class="line">D 6</span><br><span class="line">D 5</span><br><span class="line">Q 4</span><br><span class="line">Q 5</span><br><span class="line">R</span><br><span class="line">Q 4</span><br><span class="line">R</span><br><span class="line">Q 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为村庄的序号是递增的，故可以使用二分查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">50001</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> tree[MAX],cnt,pos,vis[MAX];   <span class="comment">//vis数组的作用就是做标记，主要作用是解决Q查询动作，当vis数组代表哪个村庄已经被摧毁时，就不用查找了，直接为0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=lowbit(i))</span><br><span class="line">        tree[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=lowbit(i))</span><br><span class="line">        sum+=tree[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二分算法。注意：一个已经被摧毁的村庄可能会再次被摧毁！</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmaxlen</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[x]!=<span class="number">1</span>)    <span class="comment">//如果这个村庄已经被摧毁，则肯定没有村庄与他相连了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">int</span> leftpos,rightpos;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">1</span>,right=x,mid;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=left+right&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(getsum(x)-getsum(mid<span class="number">-1</span>)&lt;x-mid+<span class="number">1</span>)</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    leftpos=left;</span><br><span class="line">    left=x,right=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=left+right&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(getsum(mid)-getsum(x<span class="number">-1</span>)&lt;mid-x+<span class="number">1</span>)</span><br><span class="line">            right=mid;</span><br><span class="line">        <span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rightpos=left;</span><br><span class="line">    <span class="keyword">return</span> rightpos-leftpos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.in","r",stdin);</span></span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">    <span class="comment">//因为村庄会修复，并且是修复最近一次被摧毁的，这种形式使用栈会比使用数组更方便</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="comment">///村庄正常时为1，被摧毁后为0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            add(i,<span class="number">1</span>);<span class="comment">//村庄未被摧毁时为1。以次建立每个村庄</span></span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt=pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;pos;</span><br><span class="line">q.push(pos);  <span class="comment">//被炸毁，入栈</span></span><br><span class="line">                <span class="keyword">if</span>(vis[pos]==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                vis[pos]=<span class="number">0</span>;  <span class="comment">//标记数组复位</span></span><br><span class="line">                add(pos,<span class="number">-1</span>);  <span class="comment">//村庄被炸毁，由1变成0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'R'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">if</span>(!q.empty())</span><br><span class="line">            &#123;</span><br><span class="line">            pos=q.top();</span><br><span class="line">            q.pop();      <span class="comment">//找到刚刚被炸毁的村庄，可知这个村庄一定是在栈顶。由此可见使用栈的方便</span></span><br><span class="line">            <span class="keyword">if</span>(vis[pos]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            vis[pos]=<span class="number">1</span>;     <span class="comment">//标记数组置位</span></span><br><span class="line">add(pos,<span class="number">1</span>);   <span class="comment">//村庄被修复</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">///对查询</span></span><br><span class="line">            <span class="comment">//两次二分，分别把第i个数的左部分最长1串的长度和第i个数右部分最长1串的长度求出，</span></span><br><span class="line">            <span class="comment">//其中二分的判断方式是区间和是否为区间长度，区间和用树状数组维护。</span></span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;pos;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;getmaxlen(pos)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1540"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1540"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1540" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1540</a></h5></blockquote><blockquote><p>参考：<a href="https://blog.csdn.net/hyc10/article/details/68197276" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/hyc10/article/details/68197276</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-4027】 Can you answer these queries?</title>
      <link href="/2020/01/1360797742.html"/>
      <url>/2020/01/1360797742.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>首先给出一个数字n代表，然后又n个数据。</p><p>再给出一个数字k，代表n次查询，查询分为两种：</p><p>​      0 x y：将 [x，y ]区间的每个数字开根号</p><p>​      1 x y：=求[x，y ]区间和，并输出</p><p> </p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">5</span><br><span class="line">0 1 10</span><br><span class="line">1 1 10</span><br><span class="line">1 1 5</span><br><span class="line">0 5 8</span><br><span class="line">1 4 8</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">Case #1:</span><br><span class="line">19</span><br><span class="line">7</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100102</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL tree[MAX], a[MAX];</span><br><span class="line"><span class="keyword">int</span> n,m,t,x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, LL val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=n; i += lowbit(i))</span><br><span class="line">        tree[i] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&gt;<span class="number">0</span>;i -= lowbit(i))</span><br><span class="line">        sum += tree[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("a.txt","r",stdin);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))  <span class="comment">//等价于while(scanf("%d",&amp;n)!=EOF)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree) );</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;a[i]);  </span><br><span class="line">            update(i, a[i]);          <span class="comment">//创建树状数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,count++);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">                swap(x,y);    </span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(getsum(y) - getsum(x<span class="number">-1</span>) &lt;= y - x + <span class="number">1</span>)      如果区间内的所有数都是<span class="number">1</span>则不必更新</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=x; j&lt;=y; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[j] &lt;= <span class="number">1</span>)   <span class="comment">///这里如果写成“if(a[j]==1)”   ，也能通过</span></span><br><span class="line">                           <span class="keyword">continue</span>;  </span><br><span class="line">                        update(j, -a[j]);</span><br><span class="line">                        a[j] = (LL)<span class="built_in">sqrt</span>(a[j]); <span class="comment">//进行开方，注意数据类型要转换一下</span></span><br><span class="line">                        update(j,a[j]);  <span class="comment">//更新树状数组</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                LL ans = getsum(y) - getsum(x<span class="number">-1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid4027"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid4027"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4027" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=4027</a></h5></blockquote><blockquote><p>参考：<a href="https://blog.csdn.net/yew1eb/article/details/19547097" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/yew1eb/article/details/19547097</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1754】 I Hate It</title>
      <link href="/2020/01/1296639760.html"/>
      <url>/2020/01/1296639760.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。<br />这让很多学生很反感。</p><p>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。</p><a id="more"></a><p><strong>输入</strong></p><p>本题目包含多组测试，请处理到文件结束。<br />在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;=200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。<br />学生ID编号分别从1编到N。<br />第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。<br />接下来有M行。每一行有一个字符 C (只取’Q’或’U’) ，和两个正整数A，B。<br />当C为’Q’的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。<br />当C为’U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。</p><p><strong>输出</strong></p><p>对于每一次询问操作，在一行里面输出最高成绩。</p><p> </p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">5 6</span><br><span class="line">1 2 3 4 5</span><br><span class="line">Q 1 5</span><br><span class="line">U 3 6</span><br><span class="line">Q 3 4</span><br><span class="line">Q 4 5</span><br><span class="line">U 2 9</span><br><span class="line">Q 1 5</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">2000002</span>];  <span class="comment">//用来记录每个叶子结点的值</span></span><br><span class="line"><span class="keyword">int</span> maxVal[<span class="number">2000002</span>];   <span class="comment">//另外开一个数组来维护区间的最大值.maxVal[i]表示1-i区间中最大的值</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"></span><br><span class="line"><span class="comment">//算这个点代表前面的几个数的和</span></span><br><span class="line"><span class="comment">//根据补码的知识-i 就是i每一位按位取反后还要加上1  最后i&amp;-i按位与后得到的数就是i二进制数中的最后一位1和其后的所有0构成的数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t&amp;(-t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[x] = y;  <span class="comment">//更新tree数组的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对某点更新了tree值之后，那么我就要根据其子节点的值更新其maxVal的值,然后再往上更新其父亲节点的值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=N;i+=lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//maxVal[i] = max(maxVal[i], y);  //再这个for循环里，单单用这一句就够了，线面的"if-else"是优化方法</span></span><br><span class="line">        <span class="comment">//这里可以做一个优化。就是当碰到maxVal的值大于我更新的那个值时，就可以退出更新了，因为后面的都是一样的。就是下面的“if-else”代码</span></span><br><span class="line">        <span class="keyword">if</span>(maxVal[i]&gt;y)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            maxVal[i] = <span class="built_in">max</span>(maxVal[i], y);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; lowbit(i); j&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                maxVal[i] = <span class="built_in">max</span>(maxVal[i],maxVal[i-j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///想找出某个区间内的最大值，就先求出由二进制分成的各个小区间的最大值，然后选出其中一个最大的。即为所求区间的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> ans = tree[y];   <span class="comment">//该位置原树形数组的值</span></span><br><span class="line">  <span class="keyword">while</span>(x != y)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//求出[x,y]区间内所有小区间的各个最大值，并选出其中最大的，即ans</span></span><br><span class="line">    <span class="keyword">for</span>(y-=<span class="number">1</span>; y-lowbit(y) &gt;= x; y -= lowbit(y))</span><br><span class="line">    &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, maxVal[y]);  <span class="comment">//maxVal[i]表示1-i区间中最大的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//比较刚刚得到的最大值和该位置原树形数组的值两个数哪个较大，选出较大的一个进行更新</span></span><br><span class="line">    ans = <span class="built_in">max</span>(ans, tree[y]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"a.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(maxVal,<span class="number">0</span>,<span class="keyword">sizeof</span>(maxVal));</span><br><span class="line">        <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;j);</span><br><span class="line">            modify(i,j);   <span class="comment">//建树过程，逐步往上更新</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'U'</span>)</span><br><span class="line">                modify(x,y);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'Q'</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;query(x,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1754"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1754"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1754</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1166】 敌兵布阵</title>
      <link href="/2020/01/3908375203.html"/>
      <url>/2020/01/3908375203.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br />中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:&quot;你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：&quot;我知错了。。。&quot;但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的.</p><a id="more"></a><p><strong>输入</strong></p><p>第一行一个整数T，表示有T组数据。<br />每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br />接下来每行有一条命令，命令有4种形式：<br />(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br />(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br />(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br />(4)End 表示结束，这条命令在每组数据最后出现;<br />每组数据最多有40000条命令</p><p><strong>输出</strong></p><p>对第i组数据,首先输出“Case i:”和回车,<br />对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。</p><p> </p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">Query 1 3</span><br><span class="line">Add 3 6</span><br><span class="line">Query 2 7</span><br><span class="line">Sub 10 2</span><br><span class="line">Add 6 3</span><br><span class="line">Query 3 10</span><br><span class="line">End </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">Case 1:</span><br><span class="line">6</span><br><span class="line">33</span><br><span class="line">59</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t,n,x,y;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">50002</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//算这个点代表前面的几个数的和</span></span><br><span class="line"><span class="comment">//根据补码的知识-i 就是i每一位按位取反后还要加上1  最后i&amp;-i按位与后得到的数就是i二进制数中的最后一位1和其后的所有0构成的数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t&amp;(-t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=lowbit(i))</span><br><span class="line">        tree[i]+=y;  <span class="comment">//修改器父子点上的每一个数，因为每插入一个数对其父子点都有影响</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=lowbit(i))</span><br><span class="line">        sum+=tree[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("a.txt","r",stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(t--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;j);</span><br><span class="line">                updata(i,j);   <span class="comment">//建树过程，逐步往上更新</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, cnt++);</span><br><span class="line">            <span class="keyword">char</span> s[<span class="number">100</span>];  <span class="comment">//也可以用string</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s) &amp;&amp; <span class="built_in">strcmp</span>(s,<span class="string">"End"</span>) != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">//如果一起读，若使用string，则string读的是整行，包括空格，所以不行；若使用字符数组，又会报Runtime Error(ACCESS_VIOLATION)，不知道为什么</span></span><br><span class="line"><span class="comment">//如果分开读，用string 和用字符数组就都可以。。。。</span></span><br><span class="line">                <span class="comment">//cin&gt;&gt;s;</span></span><br><span class="line">                <span class="keyword">int</span> x, y;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,<span class="string">"Add"</span>) == <span class="number">0</span>)</span><br><span class="line">                    updata(x,y);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,<span class="string">"Sub"</span>) == <span class="number">0</span>)</span><br><span class="line">                    updata(x,-y);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;getsum(y)-getsum(x<span class="number">-1</span>)&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//查询操作。计算x到y项的和，就相当于前y项的和减去前x项的和</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1166"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1166"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1166</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1879】 继续畅通工程</title>
      <link href="/2020/01/2738648904.html"/>
      <url>/2020/01/2738648904.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。现得到城镇道路统计表，表中列出了任意两城镇间修建道路的费用，以及该道路是否已经修通的状态。现请你编写程序，计算出全省畅通需要的最低成本。</p><a id="more"></a><p><strong>输入</strong></p><p>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( 1&lt; N &lt; 100 )；随后的 N(N-1)/2 行对应村庄间道路的成本及修建状态，每行给4个正整数，分别是两个村庄的编号（从1编号到N），此两村庄间道路的成本，以及修建状态：1表示已建，0表示未建。</p><p>当N为0时输入结束。</p><p><strong>输出</strong></p><p>每个测试用例的输出占一行，输出全省畅通需要的最低成本。</p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">1 2 1 0</span><br><span class="line">1 3 2 0</span><br><span class="line">2 3 4 0</span><br><span class="line">3</span><br><span class="line">1 2 1 0</span><br><span class="line">1 3 2 0</span><br><span class="line">2 3 4 1</span><br><span class="line">3</span><br><span class="line">1 2 1 0</span><br><span class="line">1 3 2 1</span><br><span class="line">2 3 4 1</span><br><span class="line">0</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第50行，如果用cin，就超时；改成scanf，就Accept.</span></span><br><span class="line"><span class="comment">别的什么也没动。数组的大小也验证过了，都没事。就是这个地方搞得</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u;  <span class="comment">//始点</span></span><br><span class="line"><span class="keyword">int</span> v;  <span class="comment">//终点</span></span><br><span class="line"><span class="keyword">int</span> cost;</span><br><span class="line"><span class="keyword">int</span> flag;  <span class="comment">//路已修建与否</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge u,Edge v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.cost&lt;v.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集要用到的树</span></span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始时，将每一个点都视为一个单点集合。</span></span><br><span class="line">    <span class="comment">//负数代表时根节点，负数的绝对值代表由这个根节点所带领的树的节点个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">tree[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找一个节点的根节点在哪个集合</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[x]==<span class="number">-1</span>?x:<span class="built_in">find</span>(tree[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,i;</span><br><span class="line"><span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新学到的。仅当输入的是个整并且这个整数非0，才能进入while循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//因为最多有100个点。故他们之间的相互关系最多有100*(100-1)/2=5010条，故数组的大小设置为5010就够了</span></span><br><span class="line">        m=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        Edge edge[m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].cost,&amp;edge[i].flag);</span><br><span class="line">            <span class="comment">//cin&gt;&gt;edge[i].u&gt;&gt;edge[i].v&gt;&gt;edge[i].cost&gt;&gt;edge[i].flag;</span></span><br><span class="line">            <span class="comment">//这里可以提前操作一下：如果已经有路了，那个修路的cost就是0呀！！可以这样处理</span></span><br><span class="line">            <span class="keyword">if</span>(edge[i].flag==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[i].cost=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对得到的路径进行排序</span></span><br><span class="line">        sort(edge,edge+m,cmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;  <span class="comment">//计算总cost</span></span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断这两个地方是不是已经联通</span></span><br><span class="line">            <span class="keyword">int</span> u=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line">            <span class="keyword">int</span> v=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">            <span class="comment">//如果这两个地方仍未连通，则进行“tree[u]=v;”操作，将根节点v赋到节点u上，使之联通。并且累加路径cost</span></span><br><span class="line">            <span class="keyword">if</span>(u!=v)</span><br><span class="line">            &#123;</span><br><span class="line">                tree[u]=v;</span><br><span class="line">                sum=sum+edge[i].cost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for循环结束，说明所有的点都已经处理完，然后计算一下集合的个数（当然，这不是题目要求的）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        int count=0;</span></span><br><span class="line"><span class="comment">        //计算连通集的个数</span></span><br><span class="line"><span class="comment">        for(i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if(tree[i]==-1)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                count++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="comment">//这个路径就是全部联通所要付出的代价</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1879"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1879"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1879" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1879</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-3790】 最短路径问题</title>
      <link href="/2020/01/3539901225.html"/>
      <url>/2020/01/3539901225.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给你n个点，m条无向边，每条边都有长度d和花费p，给你起点s终点t，要求输出起点到终点的最短距离及其花费，如果最短距离有多条路线，则输出花费最少的。</p><a id="more"></a><p><strong>输入</strong></p><p>输入n,m，点的编号是1~n,然后是m行，每行4个数 a,b,d,p，表示a和b之间有一条边，且其长度为d，花费为p。最后一行是两个数 s,t;起点s，终点。n和m为0时输入结束。<br />(1&lt;n&lt;=1000, 0&lt;m&lt;100000, s != t)</p><p><strong>输出</strong></p><p>输出 一行有两个数， 最短距离及其花费。</p><p> </p><p> </p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>Dijkstra算法的基本思想：每次找到离源点最近的一个顶点，然后以该顶点为中心进行扩展，最终得到源点到其余所有点的最短路径。</p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3 2</span><br><span class="line">1 2 5 6</span><br><span class="line">2 3 4 5</span><br><span class="line">1 3</span><br><span class="line">0 0</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">9 11</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f</span></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> c,p;</span><br><span class="line">&#125;Map[<span class="number">1002</span>][<span class="number">1002</span>];;</span><br><span class="line"><span class="keyword">int</span> ans_p[<span class="number">1002</span>];  <span class="comment">//记录伴随的花费</span></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1002</span>];    <span class="comment">//记录到起点距离</span></span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">1002</span>];  <span class="comment">//Dijkstra用的标记</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans[S]=<span class="number">0</span>;</span><br><span class="line">    ans_p[S]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=N;u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[u]&amp;&amp;(k==<span class="number">-1</span>||ans[u]&lt;ans[k]))</span><br><span class="line">                k=u;   <span class="comment">//找到离源点最近的点，然后把编号记录下来，用于搜索。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">//此函数返回</span></span><br><span class="line">        used[k]=<span class="literal">true</span>;   <span class="comment">//标记节点，代表此节点已经访问过了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=N;u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果路径距离不相同，则直接处理</span></span><br><span class="line">            <span class="keyword">if</span>(ans[u]&gt;ans[k]+Map[k][u].c)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[u]=ans[k]+Map[k][u].c;</span><br><span class="line">                ans_p[u]=ans_p[k]+Map[k][u].p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果路径距离相同，则去考虑花费。距离的优先级高</span></span><br><span class="line">            <span class="keyword">if</span>(ans[u]==ans[k]+Map[k][u].c &amp;&amp; ans_p[u]&gt;ans_p[k]+Map[k][u].p)</span><br><span class="line">                ans_p[u]=ans_p[k]+Map[k][u].p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//当N为0时，标志没有节点，则结果肯定是0，正好设置的时全局变量，初值为0.所以根本就不再用去判断M的值了</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M,N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//对必要的函数进行初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(Map,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(Map));</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="built_in">memset</span>(ans_p,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(ans_p));</span><br><span class="line">        <span class="built_in">fill</span>(used,used+N+<span class="number">1</span>,<span class="literal">false</span>);<span class="comment">//fill函数填充</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,c,p;  <span class="comment">//分别为起点、终点、距离、花费</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;u,&amp;v,&amp;c,&amp;p);  <span class="comment">//输入各边的路径的花费</span></span><br><span class="line">            <span class="keyword">if</span>(Map[u][v].c&gt;c)               <span class="comment">//防止出现重边</span></span><br><span class="line">            &#123;</span><br><span class="line">                Map[u][v]=&#123;c,p&#125;;</span><br><span class="line">                Map[v][u]=&#123;c,p&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;T);  <span class="comment">//起点和终点</span></span><br><span class="line">      Dijkstra();</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;ans[T]&lt;&lt;<span class="string">" "</span>&lt;&lt;ans_p[T]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid3790"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid3790"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3790" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=3790</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1875】 畅通工程再续</title>
      <link href="/2020/01/991805710.html"/>
      <url>/2020/01/991805710.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>相信大家都听说一个“百岛湖”的地方吧，百岛湖的居民生活在不同的小岛中，当他们想去其他的小岛时都要通过划小船来实现。现在政府决定大力发展百岛湖，发展首先要解决的问题当然是交通问题，政府决定实现百岛湖的全畅通！经过考察小组RPRush对百岛湖的情况充分了解后，决定在符合条件的小岛间建上桥，所谓符合条件，就是2个小岛之间的距离不能小于10米，也不能大于1000米。当然，为了节省资金，只要求实现任意2个小岛之间有路通即可。其中桥的价格为 100元/米。</p><a id="more"></a><p><strong>输入</strong></p><p>输入包括多组数据。输入首先包括一个整数T(T &lt;= 200)，代表有T组数据。<br />每组数据首先是一个整数C(C &lt;= 100),代表小岛的个数，接下来是C组坐标，代表每个小岛的坐标，这些坐标都是 0 &lt;= x, y &lt;= 1000的整数。</p><p><strong>输出</strong></p><p>每组输入数据输出一行，代表建桥的最小花费，结果保留一位小数。如果无法实现工程以达到全部畅通，输出”oh!”.</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">10 10</span><br><span class="line">20 20</span><br><span class="line">3</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">1000 1000</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">1414.2</span><br><span class="line">oh!</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一次提交：超时。将cin换成scanf</span></span><br><span class="line"><span class="comment">第二次：还是超时（怀疑是kruskal函数中的那个return）</span></span><br><span class="line"><span class="comment">第二次：还是超时（double换成float，结果报错）</span></span><br><span class="line"><span class="comment">最终的原因：edge数组开的太小了，因为他存储了100个点相互之间的关系！！！！！最多有100*(100-1)/2=5010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,t,m,k;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">102</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> u;</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="keyword">double</span> w;</span><br><span class="line">&#125;edge[<span class="number">5010</span>];</span><br><span class="line"><span class="comment">//因为最多有100个岛屿。故他们之间的相互关系最多有100*(100-1)/2=5010条，故这里定义数组的大小为5010就可以。如果少于5010，在oj上就会不对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//岛屿位置的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Island</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">double</span> x;</span><br><span class="line">  <span class="keyword">double</span> y;</span><br><span class="line">&#125;island[<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a ,Edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p[x]==x?x:x=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基于并查集的克鲁斯卡尔算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    p[i]=i;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(edge,edge+k,cmp);</span><br><span class="line">  <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//产看这两个岛屿是否已经在一个集合里</span></span><br><span class="line">      <span class="keyword">int</span> p1=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line">      <span class="keyword">int</span> p2=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">      <span class="keyword">if</span>(p1!=p2)</span><br><span class="line">  &#123;</span><br><span class="line">    ans+=edge[i].w;  <span class="comment">//把连接两个集合的路径长度加上</span></span><br><span class="line">    p[p1]=<span class="built_in">find</span>(p2);  <span class="comment">//合并岛屿</span></span><br><span class="line">    num++;  <span class="comment">//记录合并动作的次数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果所有的分散岛屿到最后合并成了一个，则说明连通了</span></span><br><span class="line">  <span class="comment">//因为共有n个岛屿，所以最多只能合并n-1次，而当合并了n-1次的时候，就说明整个森林肯定都连通了。所以，m=n-1时就已经可以输出最后结果了</span></span><br><span class="line">  <span class="keyword">if</span>(num==n<span class="number">-1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>,ans*<span class="number">100</span>);</span><br><span class="line">          <span class="keyword">return</span>;  <span class="comment">//函数返回，从main函数中执行下一个测试样例</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"oh!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">  <span class="comment">//二维坐标点用结构体存储</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">cin</span>&gt;&gt;island[i].x&gt;&gt;island[i].y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//计算各个岛屿相互之间的距离。如果不用k只用i,j作为edge的下标，则很难做到“相互”</span></span><br><span class="line">  <span class="comment">//并且图是对称的，仅保存一半即可</span></span><br><span class="line">  k=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">double</span> instance=<span class="built_in">sqrt</span>((island[i].x-island[j].x)*(island[i].x-island[j].x)+(island[i].y-island[j].y)*(island[i].y-island[j].y));<span class="comment">//使用pow函数精确度不对。标准为什么</span></span><br><span class="line">              <span class="comment">//如果距离不符合规范，则不进行保存</span></span><br><span class="line">              <span class="comment">//u代表某个岛屿的起点，v代表终点，两道与之间路径的长度未w</span></span><br><span class="line">              <span class="keyword">if</span>(instance&gt;=<span class="number">10</span>&amp;&amp;instance&lt;=<span class="number">1000</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                edge[k].u=i;</span><br><span class="line">                edge[k].v=j;</span><br><span class="line">                edge[k].w=instance;</span><br><span class="line">                k++;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  kruskal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1875"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1875"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1875" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1875</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1863】 畅通工程</title>
      <link href="/2020/01/557437235.html"/>
      <url>/2020/01/557437235.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。经过调查评估，得到的统计表中列出了有可能建设公路的若干条道路的成本。现请你编写程序，计算出全省畅通需要的最低成本。</p><a id="more"></a><p><strong>输入</strong></p><p>测试输入包含若干测试用例。每个测试用例的第1行给出评估的道路条数 N、村庄数目M ( &lt; 100 )；随后的 N<br />行对应村庄间道路的成本，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间道路的成本（也是正整数）。为简单起见，村庄从1到M编号。当N为0时，全部输入结束，相应的结果不要输出。</p><p><strong>输出</strong></p><p>对每个测试用例，在1行里输出全省畅通需要的最低成本。若统计数据不足以保证畅通，则输出“?”。</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3 3</span><br><span class="line">1 2 1</span><br><span class="line">1 3 2</span><br><span class="line">2 3 4</span><br><span class="line">1 3</span><br><span class="line">2 3 2</span><br><span class="line">0 100</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">3</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 99999999;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">102</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k,min1,j,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));<span class="comment">//清理标记数组为0</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i]=<span class="built_in">map</span>[<span class="number">1</span>][i];<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//第一个点作为起始点，表示已访问</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min1=INF;</span><br><span class="line">        k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找到当前dis数组中最短的一条路</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;min1&gt;dis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                min1=dis[j];</span><br><span class="line">                k=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=min1;<span class="comment">//找到后加入到权值中</span></span><br><span class="line">        vis[k]=<span class="number">1</span>;<span class="comment">//表示这个最小的点已经被访问</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;dis[j]&gt;<span class="built_in">map</span>[k][j])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[j]=<span class="built_in">map</span>[k][j];<span class="comment">//把未被访问过的和已经加入树里的最短的点放到dis数组中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"?"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//如果发现标记数组中有未被加入点，就说明有某个点或某些点不可达</span></span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">//使调用的这个函数提前结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j)</span><br><span class="line">                    <span class="built_in">map</span>[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">map</span>[i][j]=INF;<span class="comment">//初始化</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i,j,weight;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;i&gt;&gt;j&gt;&gt;weight;</span><br><span class="line">            <span class="comment">//防止出现重边</span></span><br><span class="line">            <span class="keyword">if</span>(weight&lt;<span class="built_in">map</span>[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">map</span>[i][j]=weight;</span><br><span class="line">                <span class="built_in">map</span>[j][i]=weight;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        prim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1863"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1863"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1863" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1863</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Prim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1213】 How Many Tables</title>
      <link href="/2020/01/3999556241.html"/>
      <url>/2020/01/3999556241.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给定朋友关系，是朋友的坐一个桌子，问需要多少桌子。</p><p> <a id="more"></a></p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>以人为点，关系为边，建立无向图，判断有几个连通子图。<br />因为相互之间的关系会特别多，用图存储效率会特别地，于是才改对集合操作，即并查集。</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">2</span><br><span class="line">5 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 5</span><br><span class="line"></span><br><span class="line">5 1</span><br><span class="line">2 5</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Friend[<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找过程</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//该元素是孤单的</span></span><br><span class="line">    <span class="keyword">if</span>(Friend[t]==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    <span class="comment">//该元素已经组伴了，则和更多的人进行组伴</span></span><br><span class="line">    <span class="keyword">return</span> Friend[t]=<span class="built_in">find</span>(Friend[t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bing</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//查找元素所在的集合</span></span><br><span class="line">    <span class="keyword">int</span> t1=<span class="built_in">find</span>(a);</span><br><span class="line">    <span class="keyword">int</span> t2=<span class="built_in">find</span>(b);</span><br><span class="line">    <span class="comment">//若两个元素的集合不是同一集合，则让t2做t1的朋友（t1有可能已经是一个集合）</span></span><br><span class="line">    <span class="keyword">if</span>(t1!=t2)</span><br><span class="line">         Friend[t1]=t2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,m,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> table=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(Friend, <span class="number">-1</span>, <span class="keyword">sizeof</span>(Friend));<span class="comment">//初始化，把每个点所在集合初始化为其自身。</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            bing(a,b);  <span class="comment">//进行并查集操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断i是否有朋友</span></span><br><span class="line">            <span class="keyword">if</span>(Friend[i]==<span class="number">-1</span>)</span><br><span class="line">                table++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;table&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1213"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1213"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1213" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1213</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【UVA-11827】 Maximum GCD</title>
      <link href="/2020/01/2338606543.html"/>
      <url>/2020/01/2338606543.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>首先有给定一个 T，T组数据，然后给你一组数。</p><p>求出其中两两最大公约数中最大的值。</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">10 20 30 40</span><br><span class="line">7 5 12</span><br><span class="line">125 15 25</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">20</span><br><span class="line">1</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package rr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">c = a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">c = gcd(b, a % b);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> t, i, j, <span class="built_in">max</span>, count;</span><br><span class="line">t = scan.nextInt();</span><br><span class="line">scan.nextLine();</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (t-- != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//输入一个字符串,以空格隔开转化成字符串数组,再将字符串数组转化为整型数组</span></span><br><span class="line"><span class="keyword">String</span> inputString = scan.nextLine();</span><br><span class="line"><span class="keyword">String</span> stringArray[] = inputString.split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[stringArray.length];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; stringArray.length; i++) &#123;</span><br><span class="line">a[i] = Integer.<span class="built_in">parseInt</span>(stringArray[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">count = i;<span class="comment">//将i解放出来，让他用到后面的循环中去</span></span><br><span class="line"><span class="comment">//找出所有两个数的最大公约数,再取最大值</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; count; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = gcd(a[i], a[j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">max</span> &lt; temp)</span><br><span class="line"><span class="built_in">max</span> = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">max</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpsonlinejudgeorgindexphpoptioncom_onlinejudgeitemid8pageshow_problemproblem2927"><a class="markdownIt-Anchor" href="#题源httpsonlinejudgeorgindexphpoptioncom_onlinejudgeitemid8pageshow_problemproblem2927"></a> 题源：<a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2927" target="_blank" rel="noopener external nofollow noreferrer">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2927</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-1061】 青蛙的约会</title>
      <link href="/2020/01/2641261650.html"/>
      <url>/2020/01/2641261650.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。<br />我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。</p><a id="more"></a><p><strong>输入</strong></p><p>输入只包括一行5个整数x，y，m，n，L，其中x≠y &lt; 2000000000，0 &lt; m、n &lt; 2000000000，0 &lt; L &lt; 2100000000。</p><p><strong>输出</strong></p><p>输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行&quot;Impossible&quot;</p><p>  </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1 2 3 4 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        LL gc = exgcd(b, a%b, x, y);</span><br><span class="line">        LL tmp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = tmp - a/b*y;</span><br><span class="line">        <span class="keyword">return</span> gc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL X, Y, M, N, L;</span><br><span class="line">    LL x, y;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld %lld"</span>,&amp;X,&amp;Y,&amp;M,&amp;N,&amp;L))</span><br><span class="line">    &#123;</span><br><span class="line">        LL a = N - M;</span><br><span class="line">        LL b = L;</span><br><span class="line">        LL c = X - Y;</span><br><span class="line">        LL gc = exgcd(a, b, x, y);</span><br><span class="line">        <span class="keyword">if</span>(c%gc)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c /= gc;</span><br><span class="line">            LL t = (c*x%b+b)%b;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid1061"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid1061"></a> 题源：<a href="http://poj.org/problem?id=1061" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=1061</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LightOJ-1370】 Bi-shoe and Phi-shoe</title>
      <link href="/2020/01/1303696840.html"/>
      <url>/2020/01/1303696840.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给出一些数字，对于每个数字找到一个欧拉函数值大于等于这个数的数，求找到的所有数的最小和。</p><a id="more"></a><p> </p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>欧拉函数：对于一个正整数n，小于n且和n互质的正整数（包括1）的个数，记作φ(n) 。<br />性质：对于质数p，φ§ = p - 1。注意φ(1)=1.</p><p>​解题点：只需要从x+1(x是幸运数字)开始，找第一个出现的素数，这就是这个幸运数字的欧拉函数值。<br />​</p><p>再将这一串幸运的欧拉函数值累加起来即可</p><p> </p><p>//用普通的判断质数的方法超时了，优化后因为是超时。。应该用打表的方法<br />//通过质数的判断来计算欧拉函数值。除1之外φ§ = p - 1</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">6</span><br><span class="line">10 11 12 13 14 15</span><br><span class="line">2</span><br><span class="line">1 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">Case 1: 22 Xukha</span><br><span class="line">Case 2: 88 Xukha</span><br><span class="line">Case 3: 4 Xukha</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> prime[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//打表。先求出来质数集合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prime[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        prime[i]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;=N;j+=i)</span><br><span class="line">            &#123;</span><br><span class="line">                prime[j]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,count=<span class="number">0</span>;</span><br><span class="line">    is_prime();</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;   <span class="comment">//原本是输入到一个数组里，后开发现没必要，反而浪费了空间</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=x+<span class="number">1</span>; ; j++) <span class="comment">//从j+1开始</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(prime[j])  <span class="comment">//如果j原来为1(即a[i]的值)，就已经知道了他的欧拉值为1，不用再带入函数去计算</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum+=j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;++count&lt;&lt;<span class="string">": "</span>&lt;&lt;sum&lt;&lt;<span class="string">" Xukha"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httplightojcomlogin_mainphpurlvolume_showproblemphpproblem1370"><a class="markdownIt-Anchor" href="#题源httplightojcomlogin_mainphpurlvolume_showproblemphpproblem1370"></a> 题源：<a href="http://lightoj.com/login_main.php?url=volume_showproblem.php?problem=1370" target="_blank" rel="noopener external nofollow noreferrer">http://lightoj.com/login_main.php?url=volume_showproblem.php?problem=1370</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-3980】 简单取模运算</title>
      <link href="/2020/01/2947672696.html"/>
      <url>/2020/01/2947672696.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>编写一个C函数mod(int n, int m),实现取模运算%</p><a id="more"></a><p><strong>输入</strong></p><p>输入包含多行数据</p><p>每行数据是两个整数a, b (1 &lt;= a, b &lt;= 32767)<br />数据以EOF结束</p><p><strong>输出</strong></p><p>于输入的每一行输出a%b</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">5 3</span><br><span class="line">100 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;n%m&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid3980"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid3980"></a> 题源：<a href="http://poj.org/problem?id=3980" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=3980</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-2251】 	Dungeon Master</title>
      <link href="/2020/01/749933787.html"/>
      <url>/2020/01/749933787.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给出一个三维空间迷宫，“.”代表可行走的空间，“#”代表不可行走的封闭间。从&quot;S&quot;开始，求到地点“E”的最短时间。</p><p>每次移动可在迷宫内上下左右前后移动。</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3 4 5</span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line">1 3 3</span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">Escaped in 11 minute(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> k,n,m,sx,sy,sz,ex,ey,ez;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">6</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dz[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z,<span class="built_in">step</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||z&lt;<span class="number">0</span>||x&gt;=k||y&gt;=n||z&gt;=m||<span class="built_in">map</span>[x][y][z]==<span class="string">'#'</span>||vis[x][y][z])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次去队首元素，如果是终点则输出结果移动的次数，</span></span><br><span class="line"><span class="comment">//否则，从该点开始分别向东南西北上下移动（如果可以走的话）并继续搜，如果到队列为空还没搜到解法，则说明无解。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node a,next;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; Q;</span><br><span class="line">    a.x=sx;</span><br><span class="line">    a.y=sy;</span><br><span class="line">    a.z=sz;</span><br><span class="line">    a.<span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">    vis[sx][sy][sz]=<span class="number">1</span>;</span><br><span class="line">    Q.push(a);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        a=Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(a.x==ex&amp;&amp;a.y==ey&amp;&amp;a.z==ez)</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">step</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            next=a;</span><br><span class="line">            next.x=a.x+dx[i];</span><br><span class="line">            next.y=a.y+dy[i];</span><br><span class="line">            next.z = a.z+dz[i];</span><br><span class="line">            <span class="keyword">if</span>(check(next.x,next.y,next.z))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis[next.x][next.y][next.z]=<span class="number">1</span>;</span><br><span class="line">            next.<span class="built_in">step</span>=a.<span class="built_in">step</span>+<span class="number">1</span>;</span><br><span class="line">            Q.push(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;k,&amp;n,&amp;m),n+m+k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;m;++r)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">map</span>[i][j][r]==<span class="string">'S'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sx=i;</span><br><span class="line">                        sy=j;</span><br><span class="line">                        sz=r;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][j][r]==<span class="string">'E'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ex=i;</span><br><span class="line">                        ey=j;</span><br><span class="line">                        ez=r;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        ans=bfs();</span><br><span class="line">        <span class="keyword">if</span>(ans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Escaped in %d minute(s).\n"</span>,ans);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Trapped!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid2251"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid2251"></a> 题源：<a href="http://poj.org/problem?id=2251" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=2251</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 迷宫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-2250】 Compromise</title>
      <link href="/2020/01/1356351336.html"/>
      <url>/2020/01/1356351336.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给出n组case。</p><p>每组case由两部分组成，分别包含若干个单词，都以“#”当结束标志。</p><p>要求输出最长子序列。</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">die einkommen der landwirte</span><br><span class="line">sind fuer die abgeordneten ein buch mit sieben siegeln</span><br><span class="line">um dem abzuhelfen</span><br><span class="line">muessen dringend alle subventionsgesetze verbessert werden</span><br><span class="line">#</span><br><span class="line">die steuern auf vermoegen und einkommen</span><br><span class="line">sollten nach meinung der abgeordneten</span><br><span class="line">nachdruecklich erhoben werden</span><br><span class="line">dazu muessen die kontrollbefugnisse der finanzbehoerden</span><br><span class="line">dringend verbessert werden</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">die einkommen der abgeordneten muessen dringend verbessert werden</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1[<span class="number">1005</span>];</span><br><span class="line"><span class="built_in">string</span> s2[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> len1, len2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (s1[i] == s2[j])</span><br><span class="line">    &#123;</span><br><span class="line">        dfs(i - <span class="number">1</span>, j - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s1[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>])</span><br><span class="line">            dfs(i - <span class="number">1</span>, j);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dfs(i, j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        len1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="string">"#"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s1[++len1] = s;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s&amp;&amp;s != <span class="string">"#"</span>)</span><br><span class="line">                s1[++len1] = s;</span><br><span class="line">        &#125;</span><br><span class="line">        len2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s&amp;&amp;s != <span class="string">"#"</span>)</span><br><span class="line">            s2[++len2] = s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len2; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s1[i] == s2[j])</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(len1, len2);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid2250"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid2250"></a> 题源：<a href="http://poj.org/problem?id=2250" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=2250</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> LCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-1458】 Common Subsequence</title>
      <link href="/2020/01/917206234.html"/>
      <url>/2020/01/917206234.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给两个字符串，找到其中最长的公共子序列，输出长度.</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">abcfbc         abfcab</span><br><span class="line">programming    contest </span><br><span class="line">abcd           mnp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//数组的声明给如果不是全局的或者static的， 会造成内存泄漏</span></span><br><span class="line"><span class="comment">//报错信息 ：  Process returned -1073741571 (0xC00000FD)</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>],b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> temp[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, A_len, B_len;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, a,b)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line"></span><br><span class="line">        A_len = <span class="built_in">strlen</span>(a);</span><br><span class="line">        B_len = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= A_len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= B_len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>])</span><br><span class="line">                    temp[i][j] = temp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp[i][j]=<span class="built_in">max</span>(temp[i<span class="number">-1</span>][j],temp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp[A_len][B_len]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid1458"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid1458"></a> 题源：<a href="http://poj.org/problem?id=1458" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=1458</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> LCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-2533】 Longest Ordered Subsequence</title>
      <link href="/2020/01/3599035891.html"/>
      <url>/2020/01/3599035891.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>求最长递增子序列长度</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">7</span><br><span class="line">1 7 3 5 9 4 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的声明给如果不是全局的或者static的， 会造成内存泄漏</span></span><br><span class="line"><span class="comment">//报错信息 ：  Process returned -1073741571 (0xC00000FD)</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">1002</span>];                   <span class="comment">//存储最长非递增子序列的长度</span></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1002</span>][<span class="number">1002</span>];               <span class="comment">//存储对应的最长非递增子序列</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseOrder</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, index;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)       <span class="comment">//初始化，最长递增子序列长度为1</span></span><br><span class="line">&#123;</span><br><span class="line">L[i] = <span class="number">1</span>;</span><br><span class="line">x[i][<span class="number">0</span>] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)            <span class="comment">//寻找某个数之前，看能否找到递增序列</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//如果改成a[j]&gt;a[i]，则就是计算最长非递增子序列</span></span><br><span class="line"><span class="keyword">if</span> ((a[j]&lt;a[i]) &amp;&amp; (<span class="built_in">max</span>&lt;L[j] + <span class="number">1</span>))<span class="comment">//满足递增条件且长度小于之前的序列长度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = L[j] + <span class="number">1</span>;</span><br><span class="line">L[i] = <span class="built_in">max</span>;                    <span class="comment">//储存最大长度</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;<span class="built_in">max</span> - <span class="number">1</span>; k++)<span class="comment">//储存最长递增子序列</span></span><br><span class="line">&#123;</span><br><span class="line">x[i][k] = x[j][k];</span><br><span class="line">&#125;</span><br><span class="line">x[i][<span class="built_in">max</span> - <span class="number">1</span>] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (index = <span class="number">0</span>, i = <span class="number">1</span>; i&lt;n; i++)    <span class="comment">//求递增子序列的最大长度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (L[index] &lt; L[i])</span><br><span class="line">index = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L[index] &lt;&lt; <span class="built_in">endl</span>;     <span class="comment">//输出最大长度</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">IncreaseOrder(a, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid2533"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid2533"></a> 题源：<a href="http://poj.org/problem?id=2533" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=2533</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> LCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1257】 最少拦截系统</title>
      <link href="/2020/01/1309295310.html"/>
      <url>/2020/01/1309295310.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>某国为了防御敌国的导弹袭击,发展出一种导弹拦截系统.但是这种导弹拦截系统有一个缺陷:虽然它的第一发炮弹能够到达任意的高度,但是以后每一发炮弹都不能超过前一发的高度.某天,雷达捕捉到敌国的导弹来袭.由于该系统还在试用阶段,所以只有一套系统,因此有可能不能拦截所有的导弹.<br />怎么办呢?多搞几套系统呗!你说说倒蛮容易,成本呢?成本是个大问题啊.所以俺就到这里来求救了,请帮助计算一下最少需要多少套拦截系统.</p><a id="more"></a><p><strong>输入</strong></p><p>输入若干组数据.每组数据包括:导弹总个数(正整数),导弹依此飞来的高度(雷达给出的高度数据是不大于30000的正整数,用空格分隔)</p><p><strong>输出</strong></p><p>对应每组数据输出拦截所有导弹最少要配备多少套这种导弹拦截系统.</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">8 389 207 155 300 299 170 158 65</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;  //概括了所有其他的头文件。只写这一个就够</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> missile[<span class="number">1005</span>],dp[<span class="number">1005</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(dp,dp+<span class="number">1005</span>,<span class="number">1</span>);<span class="comment">//初始化为1，本身就是一个最小的子序列(长度为1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对每一个missile[N]中的元素都计算以他们各自结尾的最大递增子序列的长度，这些长度的最大值，就是我们要求的问题——数组missile的最大递增子序列。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(missile[j]&lt;=missile[i])</span><br><span class="line">dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *max_element(dp+<span class="number">1</span>,dp+<span class="number">1</span>+n); <span class="comment">//返回数组missile中的最大值,注意前面的*。这是*max_element的固定用法，返回一个数组中的最大值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">       &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;missile[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;func()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1257"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1257"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1257" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1257</a></h5></blockquote><blockquote><p>参考：<a href="https://www.cnblogs.com/kuangbin/archive/2012/08/03/2621110.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/kuangbin/archive/2012/08/03/2621110.html</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> LCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1204】 糖果大战</title>
      <link href="/2020/01/2560329366.html"/>
      <url>/2020/01/2560329366.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>生日Party结束的那天晚上，剩下了一些糖果，Gandon想把所有的都统统拿走，Speakless于是说：“可以是可以，不过我们来玩24点，你不是已经拿到了一些糖果了吗？这样，如果谁赢一局，就拿走对方一颗糖，直到拿完对方所有的糖为止。”如果谁能算出来而对方算不出来，谁就赢，但是如果双方都能算出或者都不能，就算平局，不会有任何糖果的得失。<br />Speakless是个喜欢提前想问题的人，既然他发起了这场糖果大战，就自然很想赢啦（不然可就要精光了-_-）。现在他需要你的帮忙，给你他每局赢的概率和Gardon每局赢的概率，请你给出他可能获得这场大战胜利的概率。</p><a id="more"></a><p><strong>输入</strong></p><p>每行有四个数，Speakless手上的糖果数N、Gardon手上的糖果数M(0&lt;=N,M&lt;=50)、一局Speakless能解答出来的概率p、一个问题Gardon能解答出来的概率q(0&lt;=p,q&lt;=1)。</p><p><strong>输出</strong></p><p>每行一个数，表示Speakless能赢的概率（用百分比计算，保留到小数点后2位）。</p><p> </p><h5 id="模型"><a class="markdownIt-Anchor" href="#模型"></a> 模型</h5><p>f(i)表示手中现有i颗糖果赢的概率，<br />下一局赢的概率是p(1-q)<br />下一局输的概率是q(1-p)<br />下一句平手的概率是1-p(1-q)-q(1-p) （平手包括两人均答对或答错）</p><p>f(i) = p(1-q)f(i-1) + q(1-p)f(i+1) + [ 1-p(1-q)-q(1-p) ]f(i)<br />归并相同项可以得到等比数列，p(1-q)(f(i) - f(i-1)) = q(1-p)(f(i+1) - f(i))。</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">50 50 0.5 0.5</span><br><span class="line">10 10 0.51 0.5</span><br><span class="line">50 50 0.51 0.5</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">0.50</span><br><span class="line">0.60</span><br><span class="line">0.88</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">double</span> p, q, win, temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p&gt;&gt;q) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;<span class="string">"0.00"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">           </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"1.00"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p==<span class="number">0</span> || q==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"1.00"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p==<span class="number">1</span> || q==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"1.00"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == q) </span><br><span class="line">        &#123;  <span class="comment">// k==0</span></span><br><span class="line">            win = <span class="number">1.0</span>*n/(m+n);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, win);</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            temp = q*(<span class="number">1.0</span>-p) / (p*(<span class="number">1.0</span>-q));</span><br><span class="line">            win = (<span class="number">1.0</span>-<span class="built_in">pow</span>(temp, n)) / (<span class="number">1.0</span>-<span class="built_in">pow</span>(temp,n+m));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, win);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1204"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1204"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1204" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1204</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1203】 I NEED A OFFER!</title>
      <link href="/2020/01/2883905557.html"/>
      <url>/2020/01/2883905557.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>Speakless很早就想出国，现在他已经考完了所有需要的考试，准备了所有要准备的材料，于是，便需要去申请学校了。要申请国外的任何大学，你都要交纳一定的申请费用，这可是很惊人的。Speakless没有多少钱，总共只攒了n万美元。他将在m个学校中选择若干的（当然要在他的经济承受范围内）。每个学校都有不同的申请费用a（万美元），并且Speakless估计了他得到这个学校offer的可能性b。不同学校之间是否得到offer不会互相影响。“I NEED A OFFER”，他大叫一声。帮帮这个可怜的人吧，帮助他计算一下，他可以收到至少一份offer的最大概率。（如果Speakless选择了多个学校，得到任意一个学校的offer都可以）。</p><a id="more"></a><p><strong>输入</strong></p><p>输入有若干组数据，每组数据的第一行有两个正整数n,m(0&lt;=n&lt;=10000,0&lt;=m&lt;=10000)<br />后面的m行，每行都有两个数据ai(整型),bi(实型)分别表示第i个学校的申请费用和可能拿到offer的概率。<br />输入的最后有两个0。</p><p><strong>输出</strong></p><p>每组数据都对应一个输出，表示Speakless可能得到至少一份offer的最大概率。用百分数表示，精确到小数点后一位。</p><p> </p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>//方法1：在01背包上的修改，要求记录加入背包的物品是哪几个，然后再用概率公式计算<br />//方法2：计算1个offer也收不到的概率，用1减去这个概率就是至少拿到一个offer的概率 。 最大背包变成了最小背包</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">10 3</span><br><span class="line">4 0.1</span><br><span class="line">4 0.2</span><br><span class="line">5 0.3</span><br><span class="line">0 0</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">44.0%</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">10002</span>];</span><br><span class="line"><span class="keyword">int</span> money[<span class="number">10002</span>];</span><br><span class="line"><span class="keyword">double</span> percent[<span class="number">10002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将dp数组全部赋值为概率1</span></span><br><span class="line">    <span class="comment">//memset(dp, 1.0, sizeof(dp));   //memset是不能对实型数组赋值为1.0的</span></span><br><span class="line">    <span class="comment">//如果用for循环赋值，就超时了</span></span><br><span class="line">    <span class="built_in">fill</span>(dp,dp+<span class="number">10002</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n; j &gt;= money[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果把状态转移方程写成dp[j]=max(dp[j],dp[j -money[i]]*percent[i])那么就变成了求拿到所有offer的最大概率</span></span><br><span class="line">            dp[j] = <span class="built_in">min</span>(dp[j], dp[j- money[i]]*(<span class="number">1</span>-percent[i]));  <span class="comment">//拿不到任何offer的最小概率</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f%%\n"</span>,(<span class="number">1</span>-dp[n])*<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;n&gt;&gt;m;</span></span><br><span class="line">   <span class="comment">//如果用“cin&gt;&gt;n&gt;&gt;m &amp;&amp; !(n==0 &amp;&amp; m==0)”  会超时</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp; n+m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;money[i]&gt;&gt;percent[i];</span><br><span class="line">        &#125;</span><br><span class="line">        func();</span><br><span class="line">       <span class="comment">// cin&gt;&gt;n&gt;&gt;m;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1203"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1203"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1203" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1203</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-2602】 Bone Collector</title>
      <link href="/2020/01/2535549847.html"/>
      <url>/2020/01/2535549847.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>就是你有N个东西，有各自的价值和重量，现在你有一个能装一定重量的背包，问怎样选择才能使背包里面的东西价值最大？</p><p> <a id="more"></a></p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>0-1背包，每个物品只有一个，只有拿或不拿两种情况。不要求重量已经排好序。</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1</span><br><span class="line">5 10</span><br><span class="line">1 2 3 4 5</span><br><span class="line">5 4 3 2 1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">14</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;      </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t,N,V;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">int</span> volume[<span class="number">1002</span>], value[<span class="number">1002</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; V;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt; value[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt; volume[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = V; j &gt;= volume[i]; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j- volume[i]]+ value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;f[V]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid2602"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid2602"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2602" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=2602</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-2070】 Fibbonacci Number</title>
      <link href="/2020/01/234536023.html"/>
      <url>/2020/01/234536023.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>简单的斐波那契</p><p> <a id="more"></a></p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">-1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 a[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> n,t;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,a[t]);</span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid2070"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid2070"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2070" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=2070</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-2084】 DP数塔</title>
      <link href="/2020/01/3660633546.html"/>
      <url>/2020/01/3660633546.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>在讲述DP算法的时候，一个经典的例子就是数塔问题，它是这样描述的：</p><p>有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？</p><a id="more"></a><p><strong>输入</strong></p><p>输入数据首先包括一个整数C,表示测试实例的个数，每个测试实例的第一行是一个整数N(1 &lt;= N &lt;= 100)，表示数塔的高度，接下来用N行数字表示数塔，其中第i行有个i个整数，且所有的整数均在区间[0,99]内。</p><p><strong>输出</strong></p><p>对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。</p><p> </p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>从下往上推，最后归于顶点。方程为 sum[i][j]=max(sum[i+1][j],sum[i+1][j+1])+a[i][j];</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0 </span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">    <span class="keyword">int</span> sum[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            sum[n][i]=a[n][i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum[i][j]=<span class="built_in">max</span>(sum[i+<span class="number">1</span>][j],sum[i+<span class="number">1</span>][j+<span class="number">1</span>])+a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum[<span class="number">1</span>][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid2084"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid2084"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2084" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=2084</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1584】 蜘蛛牌</title>
      <link href="/2020/01/4133257042.html"/>
      <url>/2020/01/4133257042.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>蜘蛛牌是windows xp操作系统自带的一款纸牌游戏，游戏规则是这样的：只能将牌拖到比她大一的牌上面（A最小，K最大），如果拖动的牌上有按顺序排好的牌时，那么这些牌也跟着一起移动，游戏的目的是将所有的牌按同一花色从小到大排好，为了简单起见，我们的游戏只有同一花色的10张牌，从A到10，且随机的在一行上展开，编号从1到10，把第i号上的牌移到第j号牌上，移动距离为abs(i-j)，现在你要做的是求出完成游戏的最小移动距离。</p> <a id="more"></a><p><strong>输入</strong></p><p>第一个输入数据是T，表示数据的组数。<br />每组数据有一行，10个输入数据，数据的范围是[1,10]，分别表示A到10，我们保证每组数据都是合法的。</p><p><strong>输出</strong></p><p>对应每组数据输出最小移动距离。</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,<span class="built_in">step</span>,min_distance;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> distance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//不论10张牌怎样排列，最多都只需要移动9次(为什么不==10呢??以为10是不需要移动的)，只是移动距离不确定.要使移动9次后移动的距离最小.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">step</span>==<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//移动完9次后，判断以下移动距离是否创新低，如果创新低，则更新.搜索成功，return开始下一次搜索</span></span><br><span class="line">        <span class="keyword">if</span>(distance&lt;min_distance)</span><br><span class="line">            min_distance=distance;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果还没有移动玩9次后就已经比已有的最低的记录大了，则剪纸，停止此次搜索。搜索失败，return开始下一次搜索</span></span><br><span class="line">    <span class="keyword">if</span>(distance&gt;=min_distance)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从第一个数开始遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//访问标志代表是否被移走。如果该牌没有被移动，则从此牌开始搜索，寻找与当前牌能组合的下一张牌</span></span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//因为要移走当前牌向后搜索了，所以移动次数加1，并设置标记，表示当前牌已被移走</span></span><br><span class="line">            <span class="built_in">step</span>++;</span><br><span class="line">            visit[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//向后搜索，每一寻找后面的第一个没有被移走的牌</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(visit[j]==<span class="number">0</span>)<span class="comment">//这里的效果确实是移动到比他大1的位置上去了，没有随便的乱移。比如要移1了，如果2,3,4,5都已经被移动过了 那么这几张牌必定叠放在6的下面，所以要移到6的位置</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//当前距离加上要移动的距离作为参数.注意：这里要移动的距离为“abs(a[i]-a[j])”，不是“abs(i-j)”.j表示要移动到的位置，这个位置不一定在i的右面，因为移动的是a[i]，不是i</span></span><br><span class="line">                                                            <span class="comment">//i和j使相邻的，但这两点代表的两张牌的大小不一定相邻。而abs中的两个数代表此次跳转的起点和终点，这两点的牌的大小时要求是相邻的。</span></span><br><span class="line">                                                            <span class="comment">//由于在输入是做了处理，导致a[i]和a[j]在位置上不相邻，但这两点代表的牌的大小是相邻的，故可以把a[i]和a[j]当作跳转的起点和终点放在abs里</span></span><br><span class="line">                                                            <span class="comment">//a[i]代表牌值为i的牌所在的位置，a[j]代表牌值为j的牌所在的位置，又因为i和j的值是相邻的，故a[i]和a[j]的牌值是相邻的</span></span><br><span class="line">                    dfs(distance+<span class="built_in">abs</span>(a[i]-a[j]));</span><br><span class="line">                    <span class="keyword">break</span>;   <span class="comment">//这个因为一旦找到下一个移动好的就跳出这个循环，因为你已经找到啦一个，就不用找下一个啦。如果回溯了 就像是又一个全排列 而且牌得移动不合理，比如2移到6了，结果回溯就直接跳过3~6到了7的下面</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            visit[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">step</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每次都更新一些变量</span></span><br><span class="line">        <span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">        min_distance=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使得牌值为x的牌在第i位</span></span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            a[x]=i;   </span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>);  <span class="comment">//这里的0代表距离，刚开始时为0，不适合用1</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;min_distance&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1584"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1584"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1584" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1584</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1426】 Sudoku Killer</title>
      <link href="/2020/01/1908655992.html"/>
      <url>/2020/01/1908655992.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>数独游戏。</p><p>规则是这样的：在一个9x9的方格中，你需要把数字1-9填写到空格当中，并且使方格的每一行和每一列中都包含1-9这九个数字。同时还要保证，空格中用粗线划分成9个3x3的方格也同时包含1-9这九个数字。比如有这样一个题，大家可以仔细观察一下，在这里面每行、每列，以及每个3x3的方格都包含1-9这九个数字。</p><a id="more"></a><p><strong>输入：</strong></p><p>本题包含多组测试，每组之间由一个空行隔开。每组测试会给你一个 9*9 的矩阵，同一行相邻的两个元素用一个空格分开。其中1-9代表该位置的已经填好的数，问号（?）表示需要你填的数。</p><p><strong>输出：</strong></p><p>对于每组测试，请输出它的解，同一行相邻的两个数用一个空格分开。两组解之间要一个空行。<br />对于每组测试数据保证它有且只有一个解。</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">7 1 2 ? 6 ? 3 5 8</span><br><span class="line">? 6 5 2 ? 7 1 ? 4</span><br><span class="line">? ? 8 5 1 3 6 7 2</span><br><span class="line">9 2 4 ? 5 6 ? 3 7</span><br><span class="line">5 ? 6 ? ? ? 2 4 1</span><br><span class="line">1 ? 3 7 2 ? 9 ? 5</span><br><span class="line">? ? 1 9 7 5 4 8 6</span><br><span class="line">6 ? 7 8 3 ? 5 1 9</span><br><span class="line">8 5 9 ? 4 ? ? 2 3</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">7 1 2 4 6 9 3 5 8</span><br><span class="line">3 6 5 2 8 7 1 9 4</span><br><span class="line">4 9 8 5 1 3 6 7 2</span><br><span class="line">9 2 4 1 5 6 8 3 7</span><br><span class="line">5 7 6 3 9 8 2 4 1</span><br><span class="line">1 8 3 7 2 4 9 6 5</span><br><span class="line">2 3 1 9 7 5 4 8 6</span><br><span class="line">6 4 7 8 3 2 5 1 9</span><br><span class="line">8 5 9 6 4 1 7 2 3</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum,<span class="built_in">map</span>[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">input</span><span class="params">()</span><span class="comment">//输入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//用大小位3的数组接收，代表一个数子和旁边的两个空格</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str)==EOF)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'?'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p[sum++]=i*<span class="number">10</span>+j;  <span class="comment">//记录问号出现的位置</span></span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="number">0</span>;      <span class="comment">//将问好转换为数字0，易于处理</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">map</span>[i][j]=str[<span class="number">0</span>]-<span class="string">'0'</span>;  <span class="comment">//正常的数字</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">map</span>[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> res,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">// 判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//进行行列判断</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(res==<span class="built_in">map</span>[x][i]||res==<span class="built_in">map</span>[i][y])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     x=(x<span class="number">-1</span>)/<span class="number">3</span>*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">     y=(y<span class="number">-1</span>)/<span class="number">3</span>*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">     <span class="comment">// 小9方格内判断</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=x+<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=y+<span class="number">2</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(res==<span class="built_in">map</span>[i][j])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//找到'?'的位置，从那里开始搜索</span></span><br><span class="line">    <span class="keyword">int</span> x=p[k]/<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y=p[k]%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sum为一个样例中'?'的个数。如果所有的问号都已处理完毕，则可以输出这个矩阵了</span></span><br><span class="line">    <span class="keyword">if</span>(k==sum)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        output();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//关于这个问号可以填那个数字，进行搜索</span></span><br><span class="line">        <span class="keyword">if</span>(check(i,x,y)&amp;&amp;!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">map</span>[x][y]=i;</span><br><span class="line">            dfs(k+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">map</span>[x][y]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(input())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t++)<span class="comment">// 空格的输出</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从第一个问号开始处理</span></span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1426"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1426"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1426" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1426</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-3287】 Catch That Cow</title>
      <link href="/2020/01/3752565120.html"/>
      <url>/2020/01/3752565120.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>一个人要抓奶牛。</p><p>​     开始输入人和牛的位置N、K。</p><p>​     人有三种移动方法： 1、向前走一步，耗时一分钟。</p><p>​                       2、向后走一步，耗时一分钟。</p><p>​                       3、向前移动到当前位置的两倍N*2，耗时一分钟。</p><p>​    问人抓到奶牛的最少时间（奶牛不动）</p><a id="more"></a><p> </p><h5 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h5><p>广度优先搜索：<br />要时刻以树的思想看问题:初始节点为根节点，往下有三个孩子节点（即三个可选择的方案），三个孩子节点中每个孩子节点又都有三个孩子节点，故最多（因为有的孩子可能越界或重复，需舍去）有9个孩子节点，依次往下…展开三叉树<br />开始对这条树进行搜索（实际上是一边建树一边搜索的）<br />从根节点往下遍历，满足条件就加入队列中，同时记录每条路径的长度，即树的高度。等到发现一条可行路径后，该路径的长度或者该树的高度就是走过的步数</p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">5 17</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span>[<span class="number">1000001</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> N,<span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果开始点在终点右边，则只能通过每次倒退一步的方法到达终点，即需要N-K步</span></span><br><span class="line">    <span class="keyword">if</span>(N&gt;=K)</span><br><span class="line">        <span class="keyword">return</span> N-K;</span><br><span class="line">    <span class="comment">//当前位置、下一步的位置</span></span><br><span class="line">    <span class="keyword">int</span> now,next;</span><br><span class="line">    <span class="comment">//当前位置进队列</span></span><br><span class="line">    q.push(N);</span><br><span class="line">    <span class="built_in">height</span>[N]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//标记已走过的当前位置</span></span><br><span class="line">    visit[N]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取出当前的节点，从这个节点开始搜索</span></span><br><span class="line">        now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">//在每一个结点都朝三个方向搜索</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-1</span>;i&lt;=<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果越界或者判重没通过，也不用回溯，因为next初值为0，在每次循环中也是实时更新的；head也会不用管，用为head是从队列中出来的，在for循环里没有被赋值，不会发生改变</span></span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">                next=now+i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next=now*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果越界或者重复，则放弃这条路径</span></span><br><span class="line">            <span class="keyword">if</span>(next&gt;=<span class="number">0</span> &amp;&amp; next&lt;=<span class="number">100001</span> &amp;&amp; visit[next]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(next);</span><br><span class="line">                <span class="comment">//cout&lt;&lt;next&lt;&lt;" ";</span></span><br><span class="line">                <span class="comment">//树的高度加1，即路径长度加1</span></span><br><span class="line">                <span class="built_in">height</span>[next]=<span class="built_in">height</span>[now]+<span class="number">1</span>;</span><br><span class="line">               <span class="comment">// cout&lt;&lt;height[next]&lt;&lt;endl;</span></span><br><span class="line">               <span class="comment">//对走过的点进行标记，很重要。</span></span><br><span class="line">                visit[next]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果某一步到达终点，则从根节点到这一个节点的树的高度（即长度）就是走过的步数</span></span><br><span class="line">            <span class="keyword">if</span>(next==K)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">height</span>[next];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,K;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;K;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;bfs(N,K)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid3287"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid3287"></a> 题源：<a href="http://poj.org/problem?id=3287" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=3287</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1241】 Oil Deposits</title>
      <link href="/2020/01/1107232129.html"/>
      <url>/2020/01/1107232129.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>GeoSurvComp地质调查公司负责探测地下石油储藏。 GeoSurvComp现在在一块矩形区域探测石油，并把这个大区域分成了很多小块。他们通过专业设备，来分析每个小块中是否蕴藏石油。如果这些蕴藏石油 的小方格相邻，那么他们被认为是同一油藏的一部分。在这块矩形区域，可能有很多油藏。你的任务是确定有多少不同的油藏。</p><a id="more"></a><p><strong>输入</strong></p><p>输入可能有多个矩形区域（即可能有多组测试）。每个矩形区域的起始行包含m和n，表示行和列的数量，1&lt;=n,m&lt;=100，如果m =0表示输入的结束，接下来是n行，每行m个字符。每个字符对应一个小方格，并且要么是’*’，代表没有油，要么是’@’，表示有油。</p><p><strong>输出</strong></p><p>对于每一个矩形区域，输出油藏的数量。两个小方格是相邻的，当且仅当他们水平或者垂直或者对角线相邻（即8个方向）。</p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1 1</span><br><span class="line">*</span><br><span class="line">3 5</span><br><span class="line">*@*@*</span><br><span class="line">**@**</span><br><span class="line">*@*@*</span><br><span class="line">1 8</span><br><span class="line">@@****@*</span><br><span class="line">5 5 </span><br><span class="line">****@</span><br><span class="line">*@@*@</span><br><span class="line">*@**@</span><br><span class="line">@@@*@</span><br><span class="line">@@**@</span><br><span class="line">0 0 </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//越界</span></span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span> || x==m+<span class="number">1</span> || y==<span class="number">0</span> || y==n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//遇到非油田区域</span></span><br><span class="line">    <span class="keyword">if</span>(a[x][y]==<span class="string">'*'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//安全度过了两个if，说明(x,y)此地是合法位置，并且该位置是油田区域。继续向别的地方搜索，在开始前要将此地标记，避免重复搜搜索</span></span><br><span class="line">    a[x][y]=<span class="string">'*'</span>; </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始向别的地方搜索，模拟可搜寻的8个方向，多出来一个方向(0,0)，就当作浪费了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-1</span>;i&lt;=<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-1</span>;j&lt;=<span class="number">1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(x+i,y+j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span> &amp;&amp; n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">//遇到有天去就开始向四周dfs搜索</span></span><br><span class="line">               <span class="keyword">if</span>(a[i][j]==<span class="string">'@'</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   dfs(i,j);</span><br><span class="line">                   <span class="comment">//DFS了多少次，就有多少个油田区域</span></span><br><span class="line">                   count++;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1241"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1241"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1241" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1241</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 迷宫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1016】 	Prime Ring Problem</title>
      <link href="/2020/01/2529590628.html"/>
      <url>/2020/01/2529590628.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>素数环问题</p><a id="more"></a><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">Case 1:</span><br><span class="line">1 4 3 2 5 6</span><br><span class="line">1 6 5 2 3 4</span><br><span class="line"></span><br><span class="line">Case 2:</span><br><span class="line">1 2 3 8 5 6 7 4</span><br><span class="line">1 2 5 8 3 4 7 6</span><br><span class="line">1 4 7 6 5 8 3 2</span><br><span class="line">1 6 7 4 3 8 5 2</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">22</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//先将第一位设为1</span></span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==n+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组下标从1开始，并且a[1]已经被设置为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每个数不能相重，并且每个数和前一个数的和不能为质数，并且不用怕越界，因为a[1]已经被提前赋值为1了</span></span><br><span class="line">        <span class="comment">//原本用的“&amp;&amp; check(i+(i+1))==1“。实在是傻.</span></span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="number">0</span>  &amp;&amp; check(a[k<span class="number">-1</span>]+i)==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">       <span class="comment">//判断最后一个数和第一个数的和是否为质数.如果是，则放弃这一串数</span></span><br><span class="line">            <span class="keyword">if</span>(k==n &amp;&amp; check(a[<span class="number">1</span>]+i)==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">            a[k]=i;</span><br><span class="line">            visit[i]=<span class="number">1</span>;</span><br><span class="line">            dfs(n,k+<span class="number">1</span>);</span><br><span class="line">            visit[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        t++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;t&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        dfs(n,<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1016"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1016"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1016" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1016</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-3617】 Best Cow Line</title>
      <link href="/2020/01/3927558969.html"/>
      <url>/2020/01/3927558969.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给定长度为N的字符串S，要构造一个长度为N的字符串T。起初，T是一个空串，随后反复进行下列任意操作。</p><p>​从S的头部删除一个字符，加到T的尾部</p><p>​从S的尾部删除一个字符，加到T的尾部</p><p>目标是构造字典序尽可能小的字符串。</p><a id="more"></a><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">6</span><br><span class="line">A</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">B</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">ABCBCD</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> c[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(i-j)&gt;=<span class="number">2</span>)   <span class="comment">//为了防止溢出，在i和j快要碰到的时候马上停住</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ii=i+<span class="number">1</span>,jj=j<span class="number">-1</span>;  <span class="comment">//探针</span></span><br><span class="line">        <span class="keyword">if</span>(c[ii]&lt;c[jj])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c[ii]&gt;c[jj])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">//下一位仍相等，则递归判断下下一位。。。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> fun(c,ii,jj);   <span class="comment">//如果直接第调用函数“fun(c,ii,jj)”而没有在前面加上“return”，就会报“wrong answer”，加上return后，只报“Presentation Error”</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">2001</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j=n;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]&lt;c[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;c[i]&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c[i]&gt;c[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;c[j]&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;c[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//相等的情况，判断下一位</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fun(c,i,j)==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;c[i]&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">                 <span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">                 i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(fun(c,i,j)==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;c[j]&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;c[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;c[i]&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">                 <span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">                 i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span>(ans%<span class="number">80</span>==<span class="number">0</span>)    <span class="comment">//如果没有这一句，就一直报“Presentation Error”。至于为什么要“ans%80==0”，不是很清楚。</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid3617"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid3617"></a> 题源：<a href="http://poj.org/problem?id=3617" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=3617</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-4911】 Inversion</title>
      <link href="/2020/01/1940212493.html"/>
      <url>/2020/01/1940212493.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>最多移动相邻的数k次，求移动之后最小的逆序数</p><p> </p><a id="more"></a><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>逆序数的定理1:如果逆序数大于0，那么必定存在1&lt;=i&lt;n。使得i和i+1交换后逆序数减1</p><p>逆序数的定理2：归并排序的交换次数就是这个数组的逆序对个数<br />理由：归并排序是将数列a[l,h]分成两半a[l,mid]和a[mid+1,h]分别进行归     并排序，然后再将这两半合并起来。在合并的过程中（设l&lt;=i&lt;=mid，mid+1&lt;=j&lt;=h）。当a[i]&lt;=a[j]时。并不产生逆序数；当a[i]&gt;a[j]时。在前半部分中比a[i]大的数都比a[j]大，将a[j]放在a[i]前面的话。逆序数要加上mid+1-i。<br />因此，能够在归并排序中的合并过程中计算逆序数.</p><p>其实上面的两个定理说的是同一个道理：就是若一个数列若有逆序对，则每交换一次相邻元素，逆序数就减1。若此数列交换n次相邻元素才能到达升序状态，则说明这个数组有n个逆序数</p><p>在这个题目中：就是对数组进行归并排序，计算排序过程中共有几次相邻元素交换，这个数便是初始数组拥有的逆序数。根据定理1，减去要求交换的次数，就是还剩余的逆序数，即最终答案</p><p> </p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3 1</span><br><span class="line">2 2 1</span><br><span class="line">3 0</span><br><span class="line">2 2 1</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">599999</span>];</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">599999</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> mid,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=l;</span><br><span class="line">    <span class="keyword">int</span> j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            tmp[k++]=a[j++];</span><br><span class="line">            sum+=mid-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tmp[k++]=a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">        tmp[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)</span><br><span class="line">        tmp[k++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=l,k=<span class="number">1</span>;i&lt;=r;i++,k++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=tmp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        merge_sort(l,mid);</span><br><span class="line">        merge_sort(mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">return</span> merge(l,mid,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,i,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        merge_sort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/*      //检验归并排序是否正确的完成</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;n;j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">             printf("%d ",a[j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf("\n");</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span>(sum-m&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum-m);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid4911"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid4911"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4911" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=4911</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-2019】 数列有序</title>
      <link href="/2020/01/3006710954.html"/>
      <url>/2020/01/3006710954.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>有n(n&lt;=100)个整数，已经按照从小到大顺序排列好，现在另外给一个整数x，请将该数插入到序列中，并使新的序列仍然有序。</p><a id="more"></a><p><strong>输入：</strong></p><p>输入数据包含多个测试实例，每组数据由两行组成，第一行是n和m，第二行是已经有序的n个数的数列。n和m同时为0标示输入数据的结束，本行不做处理。</p><p><strong>输出：</strong></p><p>对于每个测试实例，输出插入新的元素后的数列。</p><p> </p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3 3</span><br><span class="line">1 2 4</span><br><span class="line">0 0</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span> || m!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">102</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            <span class="keyword">if</span>(m&gt;=a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=flag;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=flag+<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid2019"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid2019"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2019" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=2019</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-6188】 Duizi and Shunzi</title>
      <link href="/2020/01/3211569148.html"/>
      <url>/2020/01/3211569148.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>有n张牌，第i张牌上的数字是a[i]。我们定义 两张数字是一样的牌 为对子。我们定义 三张数字连续的牌 为顺子。我们想把这n张牌组成尽可能多的顺子和对子。请计算并输出能组成的最多的顺子和对子的数量。</p><p> </p><a id="more"></a><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">7</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">9</span><br><span class="line">1 1 1 2 2 2 3 3 3</span><br><span class="line">6</span><br><span class="line">2 2 3 3 3 3 </span><br><span class="line">6</span><br><span class="line">1 2 3 3 4 5</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,count[<span class="number">100002</span>];</span><br><span class="line">     <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))    <span class="comment">//while(1)会陷入死循环，一定不能用,用了就铁定超时。巨坑！！！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(count,<span class="number">0</span>,<span class="keyword">sizeof</span>(count));   <span class="comment">//对数组初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">            count[a]++;   <span class="comment">//记录每类牌的个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=count[i]/<span class="number">2</span>;       <span class="comment">//组成了count[i]/2个对子</span></span><br><span class="line">            count[i]%=<span class="number">2</span>;          <span class="comment">//减去组成对子需要耗费的牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;=n<span class="number">-2</span> &amp;&amp; count[i]%<span class="number">2</span> &amp;&amp; count[i+<span class="number">1</span>]%<span class="number">2</span> &amp;&amp; count[i+<span class="number">2</span>])  <span class="comment">//检查是否有组成顺子的条件</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans++;           <span class="comment">//组成了一个顺子</span></span><br><span class="line">                count[i]--;      <span class="comment">//减去组成顺子需要耗费的牌</span></span><br><span class="line">                count[i+<span class="number">1</span>]--;</span><br><span class="line">                count[i+<span class="number">2</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid6188"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid6188"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6188" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=6188</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1789】 Doing Homework again</title>
      <link href="/2020/01/109988381.html"/>
      <url>/2020/01/109988381.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>主角打完ACM比赛回来，有一堆作业要做，每个作业有自己的deadline和score，如果不能在deadline之前完成就拿不到这个作业的分数，问主角最多能拿多少分</p><p> <a id="more"></a></p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>按日期从小到大排，如果日期相同则按罚分从大到小排<br />按日期遍历，对应天数做对应期限的作业，如果期限重复了，就查找这一天之前的罚分最少的作业（回溯），如果这一天之前罚分最少的作业的罚分都比这一天作业的罚分大，则这一天就甘愿被罚掉。这一天就老老实实的做这个作业，然后再往后走</p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3 3 3</span><br><span class="line">10 5 1</span><br><span class="line">3</span><br><span class="line">1 3 1</span><br><span class="line">6 2 3</span><br><span class="line">7</span><br><span class="line">1 4 6 4 2 4 3</span><br><span class="line">3 2 1 7 6 5 4</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">0</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> deadline;</span><br><span class="line"><span class="keyword">int</span> reduce;</span><br><span class="line">&#125;;</span><br><span class="line">S x[<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(S a, S b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.deadline==b.deadline)</span><br><span class="line"><span class="keyword">return</span> a.reduce&gt;b.reduce;</span><br><span class="line"><span class="keyword">return</span> a.deadline&lt;b.deadline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,j;</span><br><span class="line">    <span class="keyword">int</span> vis[<span class="number">1002</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));   <span class="comment">//vis每次初始化，并且要用这种方式来初始化，用“int vis[1002];”也不管</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x[i].deadline;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x[i].reduce;</span><br><span class="line">        sort(x, x + n+<span class="number">1</span>, cmp);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/*      //检测排序结果</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;x[i].deadline&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;x[i].reduce&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> day=<span class="number">1</span>,sum=<span class="number">0</span>;   <span class="comment">//这两个个参数要每一次都重置，否则结果不对。注意，vis在此重新定义的话好像不管用，OJ报“Wrong answer”.就拿到前面“memset(vis,0,sizeof(vis));”来初始化了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(day&lt;=x[i].deadline)  <span class="comment">//对应天数做对应期限的作业.在这里原本直接用的i来替代day的作用，但结果一直不对</span></span><br><span class="line">            &#123;</span><br><span class="line">                day++;</span><br><span class="line">                vis[i]=<span class="number">1</span>;  <span class="comment">//对已确定的作业做标记</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> mix=x[i].reduce;</span><br><span class="line">                <span class="keyword">int</span> flag;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)   <span class="comment">//查找这一天之前的罚分最少的作业</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(vis[j]==<span class="number">1</span> &amp;&amp; x[j].reduce&lt;mix)</span><br><span class="line">                    &#123;</span><br><span class="line">                        mix=x[j].reduce;</span><br><span class="line">                        flag=j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mix&lt;x[i].reduce)  </span><br><span class="line">             <span class="comment">//前面罚分最小的作业比当前的作业小，则交换，找到了替死鬼</span></span><br><span class="line">                &#123;</span><br><span class="line">S xx=x[flag];</span><br><span class="line">x[flag]=x[i];</span><br><span class="line">x[i]=xx;</span><br><span class="line">i--;  <span class="comment">//回退一个</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>      </span><br><span class="line">              <span class="comment">//前面罚分最小的作业比当前的作业大，则当前作业甘愿被罚</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum+=x[i].reduce;  <span class="comment">//累计罚分</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1789"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1789"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1789" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1789</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-3348】 coins</title>
      <link href="/2020/01/2490000727.html"/>
      <url>/2020/01/2490000727.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给1，5，10，50，100面值的钞票个a张，求得到p的最小张数和最大张数，</p><p>不能则输出-1.</p><p> <a id="more"></a></p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">33 6 6 6 6 6</span><br><span class="line">10 10 10 10 10 10</span><br><span class="line">11 0 1 20 20 20</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6 9</span><br><span class="line">1 10</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> value[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mixcoin</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> money,<span class="keyword">long</span> <span class="keyword">long</span> count[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> c=<span class="built_in">min</span>(money/value[i],count[i]);</span><br><span class="line">        money-=c*value[i];</span><br><span class="line">        ans+=c;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span> (money&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int maxcoin(int money,int count[])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int sum=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;5;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int c=min(money/value[i],count[i]);</span></span><br><span class="line"><span class="comment">        money-=c*value[i];</span></span><br><span class="line"><span class="comment">        if(i&lt;4)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if(money%value[i+1]!=0)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                money+=c*value[i];</span></span><br><span class="line"><span class="comment">                for(int j=count[i];j&gt;0;j--)  </span></span><br><span class="line"><span class="comment">                //这里的j不能位0,如果为0，则会发生除0错误</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                    if(money%(j*value[i])==0)</span></span><br><span class="line"><span class="comment">                    &#123;</span></span><br><span class="line"><span class="comment">                        c=j;</span></span><br><span class="line"><span class="comment">                        money-=c*value[i];</span></span><br><span class="line"><span class="comment">                        break;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        sum+=c;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">        if (money&gt;0)</span></span><br><span class="line"><span class="comment">            return -1;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            return sum;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,money,count[<span class="number">1001</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> summoney=<span class="number">0</span>,sumcount=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;money;                       <span class="comment">//支付的钱数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;count[j];</span><br><span class="line">            summoney+=count[j]*value[j];  <span class="comment">//所拥有的钱的总数</span></span><br><span class="line">            sumcount+=count[j];           <span class="comment">//纸币总数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(summoney&lt;money)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1 -1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;   <span class="comment">//这里是continue,不是return 0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;mixcoin(money,count)&lt;&lt;<span class="string">" "</span>;  <span class="comment">//所花费的最小数量的纸币</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算最大数量就是（纸币总数量）减去（所拥有的钱的总数减去支付的钱数）所花费的最小数量的纸币。</span></span><br><span class="line">        <span class="keyword">if</span>(mixcoin(summoney-money,count)!=<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;sumcount-mixcoin(summoney-money,count)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid3348"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid3348"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3348" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=3348</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-2037】 今年暑假不AC</title>
      <link href="/2020/01/2267036675.html"/>
      <url>/2020/01/2267036675.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>“今年暑假不AC？”<br />“是的。”<br />“那你干什么呢？”<br />“看世界杯呀，笨蛋！”<br />“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br />作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><a id="more"></a><p><strong>输入：</strong></p><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p><p><strong>输出：</strong></p><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><p> </p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">12</span><br><span class="line">1 3</span><br><span class="line">3 4</span><br><span class="line">0 7</span><br><span class="line">3 8</span><br><span class="line">15 19</span><br><span class="line">15 20</span><br><span class="line">10 15</span><br><span class="line">8 18</span><br><span class="line">6 12</span><br><span class="line">5 10</span><br><span class="line">4 14</span><br><span class="line">2 9</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> start;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">end</span>;</span><br><span class="line">&#125;;</span><br><span class="line">S x[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(S a, S b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.<span class="built_in">end</span> &lt; b.<span class="built_in">end</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a.<span class="built_in">end</span> == b.<span class="built_in">end</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a.start&lt;b.start)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">102</span>],b[<span class="number">102</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> A[<span class="number">102</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x[i].start&gt;&gt;x[i].<span class="built_in">end</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(x, x + n, cmp);</span><br><span class="line">        A[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[i].start&gt;=x[j].<span class="built_in">end</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                A[i]=<span class="number">1</span>;</span><br><span class="line">                j=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                A[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i])</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid2037"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid2037"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2037" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=2037</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-3104】 Drying（似乎有些超时。。）</title>
      <link href="/2020/01/411538287.html"/>
      <url>/2020/01/411538287.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>有n件衣服，若自然风干，则每分钟减少1单位水，若烘干，每分钟减少k单位水（烘干时不再考虑自然风对其影响），每次只能选取一件衣服进行烘干，问最少需要多长时间将所有衣服烘干。</p><a id="more"></a><p> </p><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>每次处理都对含水量进行从小到大排序，最大的用风干机，其余的自然风干。每次处理完后都检测数列的最后一个是否已经小于等于0，若是，则说明她前面的衣服早都已经干了（小于等于0），即所有的衣服都干了，输出当前天数即可</p><p>第一册运行OJ ： 超时了<br />改进：排序算法太耗时，需要改进。因为除最后一个外，都减去的是相同的数（即1）。所以前面的数仍然有序，相当于把一个数插进一个已经有序的数组，采用的方法是先用二分查找到最后一个数在原数组中的位置（若有相同的，则返回那个下标，若没有相同的，则返回富豪开始改变的位置的下标，再将元素一次往后移一位）</p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">2 3 9</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">3</span><br><span class="line">2 3 6</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span>* nums, <span class="keyword">long</span> <span class="keyword">long</span> numsSize, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>;<span class="keyword">int</span> right=numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==nums[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> i,j,maxday,k,a[<span class="number">100002</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    maxday=a[n<span class="number">-1</span>];   <span class="comment">//可能所用的最长的天数，即含水最多的衣服的水量数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;maxday;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;"之前：";</span></span><br><span class="line"><span class="comment">        for(int m=0;m&lt;n;m++)</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;a[m]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序后含水最多的衣服排在最后，让它用烘干机，其他的自然风干</span></span><br><span class="line">        a[n<span class="number">-1</span>]-=k;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[j]-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//sort(a,a+n);//每次都排一下序</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//改进排序：先二分查找位置，再将元素依次后移</span></span><br><span class="line">       <span class="keyword">long</span> <span class="keyword">long</span> loca=search(a,n,a[n<span class="number">-1</span>]);</span><br><span class="line">       <span class="keyword">long</span> <span class="keyword">long</span> temp=a[n<span class="number">-1</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> s=n<span class="number">-1</span>;s&gt;loca;s--)</span><br><span class="line">           a[s]=a[s<span class="number">-1</span>];</span><br><span class="line">       a[loca]=temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;"之后：";</span></span><br><span class="line"><span class="comment">        for(int m=0;m&lt;n;m++)</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;a[m]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span>(a[n<span class="number">-1</span>]&lt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;i+1&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid3104"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid3104"></a> 题源：<a href="http://poj.org/problem?id=3104" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=3104</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1445】 Ride to School</title>
      <link href="/2020/01/3972311125.html"/>
      <url>/2020/01/3972311125.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>骑自行车，开始时间有负数的，选择开始时间非负数的最早出发的人，一起出发，然后被别人超过时，就追上去，终点距离是4.5km，速度单位是km/s，求到达的时间（s）。</p><a id="more"></a><h5 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h5><p>​对于出发时间为负数的骑手不用理会，因为Charley还没到的时候单车就走了，如果速度比查理快，查理永远也追不上。速度比查理慢的话，追上了也没影响，因为查理会直接超过他不会选择跟他<br />​查理最后一定是跟着最早到达的人一块到达终点.因为除了查理每个人都是匀速行驶，包括最早到达的那个人，所以在路上一定是那个人超过了查理然后查理去跟上他。而谁最早到达取决于谁的骑行时间与出发时间的总和最小<br />​      所以，只要某个骑手出发的足够早，速度又足够快，那么查理一定能遇上他，并且查理一定是跟着他到达的终点。<br />​      最简单的做法是：计算所有骑手从出发到到达终点的时间，再加上他们各自的出发时间。总时间最小的那个就是最终答案</p><p>​如果直接对骑手的速度排序，找一个速度最快的，计算他的全程时间再加上他的出发时间作为最终答案，那么很可能会错误，因为如果这个速度很快的人出发很晚，那么就很有可能在查理遇到他之前查理就已经到终点了<br />同理，也不能直接找出发世间最早的，因为他的速度可能很慢。所以，要找这两个因素加起来时间最短的</p><p> </p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">4</span><br><span class="line">20 0</span><br><span class="line">25 -155</span><br><span class="line">27 190</span><br><span class="line">30 240</span><br><span class="line">2</span><br><span class="line">21 0</span><br><span class="line">22 34</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">780</span><br><span class="line">771</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//一直把题意理解错了！！！   一直以为Ti是查理和每个骑手的相遇时间，这样就把问题想复杂了！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,t[<span class="number">10001</span>],v[<span class="number">10001</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mixsum=<span class="number">9999999</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;t[i];</span><br><span class="line">            <span class="keyword">if</span>(t[i]&lt;<span class="number">0</span> || v[i]==<span class="number">0</span>)  </span><br><span class="line">                <span class="comment">//当出发时间为负或者速度为0（除零错误）时，略过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="built_in">ceil</span>(<span class="number">4.5</span>/v[i]*<span class="number">3600</span>+t[i]);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(sum&lt;mixsum)</span><br><span class="line">                mixsum=sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;mixsum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1445"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1445"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1445" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1445</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ-3253】 Fence Repair</title>
      <link href="/2020/01/3718733645.html"/>
      <url>/2020/01/3718733645.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>给你一块长木板，其长度为L，要求将其切割成若干块指定大小的木板，大小分别为a,b,c,d…<br />其中L恰好等于a+b+c+d+…，每切割一次，所需的花费为当前执行切割操作的木板的的长度。比如将长度为P的木板切割为K和H,则花费为P。求最小的花费的切割方法的所需花费。</p><a id="more"></a><p><strong>输入</strong></p><p>第1行给出整数 N，N代表切割后的木板的个数<br />第2到N+1行，每行给出1个整数，代表一块切割后的木板的长度</p><p><strong>输出</strong></p><p>输出一行，该行含有一个整数K，K代表题意所需的结果。</p><p> </p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">8</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">34</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,n,sum=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt; &gt;Quene;  <span class="comment">//这是最大值优先的队列</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">Quene.push(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(Quene.<span class="built_in">size</span>()&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum=Quene.top();</span><br><span class="line">Quene.pop();</span><br><span class="line">sum+=Quene.top();</span><br><span class="line">Quene.pop();</span><br><span class="line">ans+=sum;</span><br><span class="line">Quene.push(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httppojorgproblemid3253"><a class="markdownIt-Anchor" href="#题源httppojorgproblemid3253"></a> 题源：<a href="http://poj.org/problem?id=3253" target="_blank" rel="noopener external nofollow noreferrer">http://poj.org/problem?id=3253</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种实现无限极分类的方案</title>
      <link href="/2020/01/28320.html"/>
      <url>/2020/01/28320.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="第一种方案"><a class="markdownIt-Anchor" href="#第一种方案"></a> 第一种方案：</h4><p>使用递归算法，也是使用频率最多的，大部分开源程序也是这么处理，不过一般都只用到四级分类。这种算法的数据库结构设计最为简单。category表中一个字段id，一个字段fid(父id)。这样可以根据WHERE id = fid来判断上一级内容，运用递归至最顶层。</p><p>分析：通过这种数据库设计出的无限级，可以说读取的时候相当费劲，所以大部分的程序最多3-4级分类，这就足以满足需求，从而一次性读出所有的数据，再对得到数组或者对象进行递归。本身负荷还是没太大问题。但是如果分类到更多级，那是不可取的办法。<br />这样看来这种分类有个好处，就是增删改的时候轻松了…然而就二级分类而言，采用这种算法就应该算最优先了。</p><h4 id="第二种方案"><a class="markdownIt-Anchor" href="#第二种方案"></a> 第二种方案：</h4><p>设置fid字段类型为varchar，将父类id都集中在这个字段里，用符号隔开，比如：1,3,6<br />这样可以比较容易得到各上级分类的ID，而且在查询分类下的所有信息的时候，<br />可以使用：SELECT * FROM category WHERE pid LIKE “1,%”。</p><p>分析：相比于递归算法，在读取数据方面优势非常大，但是若查找该分类的所有 父分类 或者 子分类 查询的效率也不是很高，至少也要二次query，从某种意义看上，个人觉得不太符合数据库范式的设计。倘若递增到无限级，还需考虑字段是否达到要求，而且在修改分类和转移分类的时候操作将非常麻烦。</p><h4 id="第三种方案"><a class="markdownIt-Anchor" href="#第三种方案"></a> 第三种方案：</h4><p>使用预排序遍历树算法，也叫左右值算法。特别适用于多层数据结构设计，像Windows，linux下文件夹结构。在这种数据结构中，设置每个节点的左右值为唯一。通过左右值把所有节点连接起来。</p><table><thead><tr><th>数据结构：</th><th></th></tr></thead><tbody><tr><td>id:</td><td>类别id，主键</td></tr><tr><td>name:</td><td>类名</td></tr><tr><td>lft:</td><td>左值</td></tr><tr><td>rgt:</td><td>右值</td></tr></tbody></table><p>分析：这种数据结构的设计完全可以摒弃掉fid,orderview这些字段，按顺序遍历左右值到达查询效果，这种查询速度非常之快，而且只要一次查询就能得到想要的结果，可以轻易的查询节点是否存在子节点，父节点的路径等。但同样面临的在增删改的时候操作比较复杂。这种预排序遍历树算法的核心就是大量牺牲了写的性能来换取读取的性能。而且完全可以扩展到无限级应用。</p><a id="more"></a><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-3476】 Cyclic Nacklace</title>
      <link href="/2020/01/4248162415.html"/>
      <url>/2020/01/4248162415.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>求再加几个字符，才能使原字符串构成循环</p><p> <a id="more"></a></p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3 </span><br><span class="line">aaa </span><br><span class="line">abca </span><br><span class="line">abcde</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> P[<span class="number">100009</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//int answer[100];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">char</span>* p,<span class="keyword">int</span>* next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; pLen )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k])</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">next[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;"next数组：";</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;=pLen;i++)</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;next[i]&lt;&lt;"  ";</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">100009</span>];</span><br><span class="line">    <span class="keyword">int</span> n,ciclelen,length,ins,times;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,P);</span><br><span class="line">        length=<span class="built_in">strlen</span>(P);</span><br><span class="line">        GetNext(P,next);</span><br><span class="line"></span><br><span class="line">        ciclelen=length-next[length];  <span class="comment">//循环部分的长度</span></span><br><span class="line">        <span class="comment">//times = length/ciclelen;     //循环部分出现的次数。但不要在这里出现，因为在这里出现会浪费程序时间，在下面的else里做这个除法</span></span><br><span class="line">                     <span class="comment">//故：循环部分占用的总字节数=clclelen*times</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(length!=ciclelen &amp;&amp; length%ciclelen==<span class="number">0</span>)  </span><br><span class="line">            <span class="comment">//循环多次的情况,但要注意：不能是循环一次，因为只循环一的话就是length==ciclelen，但这种情况ins不能是0，而应该是length</span></span><br><span class="line">            ins=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ciclelen==length)</span><br><span class="line">            ins=ciclelen;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            times = length/ciclelen;</span><br><span class="line">            ins=ciclelen-(length-ciclelen*times);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ins&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// abcabca,正确答案是2</span></span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid3746"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid3746"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3746" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=3746</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-2087】 剪花布条</title>
      <link href="/2020/01/802506621.html"/>
      <url>/2020/01/802506621.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h5><p>一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p><a id="more"></a><p><strong>输入</strong><br />输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。</p><p><strong>输出</strong><br />输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。</p><p> </p><p> </p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">abcde a3</span><br><span class="line">aaaaaa  aa</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> S[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">char</span> P[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> answer[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">char</span>* p,<span class="keyword">int</span>* next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; pLen - <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k])</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">next[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KmpSearch</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">char</span>* p,<span class="keyword">int</span>* next,<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sLen = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line"><span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == p[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j = next[j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span> (j == pLen)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">10009</span>];</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S[<span class="number">0</span>]==<span class="string">'#'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,P);</span><br><span class="line">        GetNext(P,next);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;KmpSearch(S,P,next,count)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid2087"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid2087"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2087" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=2087</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU-1686】 Oulipo</title>
      <link href="/2020/01/304862037.html"/>
      <url>/2020/01/304862037.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>模式串在主串中出现了多少次。</p><p> <a id="more"></a></p><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">BAPC</span><br><span class="line">BAPC</span><br><span class="line">AZA</span><br><span class="line">AZAZAZA</span><br><span class="line">VERDI</span><br><span class="line">AVERDXIVYERDIAN</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> S[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">char</span> P[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//int answer[100];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">char</span>* p,<span class="keyword">int</span>* next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; pLen )   <span class="comment">//这里从pLen-1变成pLen,作用是将next在最后面增加一位（对前几位没任何影响），在第一个结果出来后作j = next[j];，这个数组里的j就是增加得那一位得下标。这样可以使字串右移得位数变短，可以找出重叠的位置；如果不在next数组里增加那一位，则那一位就是定义数组时得默认初始值“0”，右移位数=j-0，就会右移过多，错过重叠的部分，</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k])</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">next[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;"next数组1：";</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;pLen;i++)</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;next[i]&lt;&lt;"  ";</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KmpSearch</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">char</span>* p,<span class="keyword">int</span>* next,<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sLen = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line"><span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == p[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j = next[j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span> (j == pLen)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">           <span class="comment">// answer[++count]=i - j+1;</span></span><br><span class="line">           <span class="comment">// cout&lt;&lt;"第"&lt;&lt;count&lt;&lt;"个结果："&lt;&lt;answer[count]&lt;&lt;"   "&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//i=i-j+1   //这样说明又回到了暴力方法</span></span><br><span class="line">            j = next[j];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">10009</span>];</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">"%s"</span>,P);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">"%s"</span>,S);</span><br><span class="line"></span><br><span class="line">         GetNext(P,next);</span><br><span class="line">         <span class="built_in">cout</span>&lt;&lt;KmpSearch(S,P,next,count)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1686"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1686"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1686" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1686</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDU 1711】 Number Sequence</title>
      <link href="/2020/01/4156361958.html"/>
      <url>/2020/01/4156361958.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h5><p>给定两个数组，问能不能再第一个数组中匹配得到第二个数组，如果可以，那么输出最早匹配的起始位置，否则输出-1。</p><p> </p><a id="more"></a><h5 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">2</span><br><span class="line">13 5</span><br><span class="line">1 2 1 2 3 1 2 3 1 3 2 1 2</span><br><span class="line">1 2 3 1 3</span><br><span class="line">13 5</span><br><span class="line">1 2 1 2 3 1 2 3 1 3 2 1 2</span><br><span class="line">1 2 3 2 1</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p> </p><hr /><hr /><p> </p><h5 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> S[<span class="number">1000009</span>];</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">10009</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">int</span>* p,<span class="keyword">int</span>* next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pLen = n;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j &lt; pLen - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k])</span><br><span class="line">&#123;</span><br><span class="line">++k;</span><br><span class="line">++j;</span><br><span class="line">next[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KmpSearch</span><span class="params">(<span class="keyword">int</span>* s, <span class="keyword">int</span>* p,<span class="keyword">int</span>* next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sLen = m;</span><br><span class="line"><span class="keyword">int</span> pLen = n;</span><br><span class="line"><span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == p[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == pLen)</span><br><span class="line"><span class="keyword">return</span> i - j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">10009</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;S[i];</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;P[j];</span><br><span class="line">        GetNext(P,next);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;KmpSearch(S,P,next)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><blockquote><h5 id="题源httpacmhdueducnshowproblemphppid1711"><a class="markdownIt-Anchor" href="#题源httpacmhdueducnshowproblemphppid1711"></a> 题源：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1711" target="_blank" rel="noopener external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=1711</a></h5></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书法字帖密码停止保护</title>
      <link href="/2020/01/3059655977.html"/>
      <url>/2020/01/3059655977.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>点击“停止保护”按钮，要求你输入密码，输入  <strong>00piwOVMbyldMI6</strong></p><a id="more"></a><blockquote><p>注：我的版本是 office365</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Experience </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jar文件后运行时图片不显示的问题</title>
      <link href="/2020/01/1518547917.html"/>
      <url>/2020/01/1518547917.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>现象：在eclipse中能够无误运行，但导出Runnable jar后运行jar包时不显示图片。<br />原因：路径问题。</p></blockquote><a id="more"></a><h5 id="方法1"><a class="markdownIt-Anchor" href="#方法1"></a> 方法1：**</h5><p>新建一个文件夹。文件夹中放那个jar包和image文件夹。在这种情况下，双击jar包便会有图片。<br />![](<a href="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%85%B3%E4%BA%8EJava%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90Runnable" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com/han-suyu/Pic/master/关于Java项目打包成Runnable</a> jar文件后运行时图片不显示的问题/1.png)</p><p> </p><p> </p><h5 id="方法2两个步骤"><a class="markdownIt-Anchor" href="#方法2两个步骤"></a> <strong>方法2：（两个步骤）</strong></h5><p>第一步：将image文件夹和代码放在同一个package下面。</p><p>第二步：将   ImageIcon icon = new ImageIcon(“images/white.gif”);<br /> <br />改为: ImageIcon icon = new     ImageIcon(PKCard.class.getResource(“images/rear.gif”));</p><blockquote><p>注意：（1）“PKCard&quot;为类名<br />   （2）路径可以为&quot;images/white.gif” 或 “./images/white.gif”。<br />      但当换成&quot;/images/rear.gif&quot;时会报错。报错信息如下：<br />           at javax.swing.ImageIcon.<init>(Unknown Source)</p></blockquote><p>![](<a href="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%85%B3%E4%BA%8EJava%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90Runnable" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com/han-suyu/Pic/master/关于Java项目打包成Runnable</a> jar文件后运行时图片不显示的问题/2.png)<br />![](<a href="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%85%B3%E4%BA%8EJava%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90Runnable" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com/han-suyu/Pic/master/关于Java项目打包成Runnable</a> jar文件后运行时图片不显示的问题/3.png)</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Experience </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步复位、置位的D触发器设计</title>
      <link href="/2020/01/2336753349.html"/>
      <url>/2020/01/2336753349.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目描述：</p><p>用VHDL语言设计一个同步复位、置位的D触发器</p><p> </p><blockquote><p>原理：</p><p>D触发器是能够存储1位二进制码的逻辑电路，它有两个互补输出端，其输出状态不仅与输入有关，而且还与原先的输出状态有关。触发器有两个稳定状态，用以表示逻辑状态“1”和“0”。在一定的外界信号作用下，可以从一个稳定状态翻转到另一个稳定状态，它是一个具有记忆功能的二进制信息存储器件，是构成各种时序电路的最基本逻辑单元。</p></blockquote><p> <a id="more"></a></p><p>VHDL源代码：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee; </span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>; </span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_unsigned.<span class="keyword">all</span>; </span><br><span class="line"><span class="keyword">entity</span> trigger_d <span class="keyword">is</span> </span><br><span class="line">  <span class="keyword">port</span>(clk,d,sreset,sset:<span class="keyword">in</span> <span class="built_in">std_logic</span>; </span><br><span class="line">               q,qb:<span class="keyword">out</span> <span class="built_in">std_logic</span>); </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">entity</span>; </span><br><span class="line"><span class="keyword">architecture</span> art <span class="keyword">of</span> trigger_d <span class="keyword">is</span> </span><br><span class="line">  <span class="keyword">begin</span> </span><br><span class="line">  <span class="keyword">process</span>(clk,d,sreset,sset) </span><br><span class="line">    <span class="keyword">begin</span> </span><br><span class="line">      <span class="keyword">if</span> clk<span class="symbol">'event</span> <span class="keyword">and</span> clk=<span class="string">'1'</span> <span class="keyword">then</span> </span><br><span class="line">          <span class="keyword">if</span> sreset=<span class="string">'1'</span> <span class="keyword">then</span> q&lt;=<span class="string">'0'</span>;qb&lt;=<span class="string">'1'</span>; </span><br><span class="line">     <span class="keyword">elsif</span> sset=<span class="string">'1'</span> <span class="keyword">then</span> q&lt;=<span class="string">'1'</span>;qb&lt;=<span class="string">'0'</span>; </span><br><span class="line">              <span class="keyword">else</span> q&lt;=d;qb&lt;=<span class="keyword">not</span>(d); </span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">process</span>; </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">architecture</span> art;</span><br></pre></td></tr></table></figure><p> </p><p>波形图如下：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E3%80%81%E7%BD%AE%E4%BD%8D%E7%9A%84D%E8%A7%A6%E5%8F%91%E5%99%A8%E8%AE%BE%E8%AE%A1/1.png" alt="原始波形图" /></p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E3%80%81%E7%BD%AE%E4%BD%8D%E7%9A%84D%E8%A7%A6%E5%8F%91%E5%99%A8%E8%AE%BE%E8%AE%A1/2.jpg" alt="功能仿真图" /></p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E3%80%81%E7%BD%AE%E4%BD%8D%E7%9A%84D%E8%A7%A6%E5%8F%91%E5%99%A8%E8%AE%BE%E8%AE%A1/3.png" alt="时序仿真图" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VHDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步复位、置位的D触发器设计</title>
      <link href="/2020/01/2336753349.html"/>
      <url>/2020/01/2336753349.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目描述：</p><p>用VHDL语言设计一个同步复位、置位的D触发器</p><p> </p><blockquote><p>原理：</p><p>D触发器是能够存储1位二进制码的逻辑电路，它有两个互补输出端，其输出状态不仅与输入有关，而且还与原先的输出状态有关。触发器有两个稳定状态，用以表示逻辑状态“1”和“0”。在一定的外界信号作用下，可以从一个稳定状态翻转到另一个稳定状态，它是一个具有记忆功能的二进制信息存储器件，是构成各种时序电路的最基本逻辑单元。</p></blockquote><p> <a id="more"></a></p><p>VHDL源代码：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee; </span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>; </span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_unsigned.<span class="keyword">all</span>; </span><br><span class="line"><span class="keyword">entity</span> trigger_d <span class="keyword">is</span> </span><br><span class="line">  <span class="keyword">port</span>(clk,d,sreset,sset:<span class="keyword">in</span> <span class="built_in">std_logic</span>; </span><br><span class="line">               q,qb:<span class="keyword">out</span> <span class="built_in">std_logic</span>); </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">entity</span>; </span><br><span class="line"><span class="keyword">architecture</span> art <span class="keyword">of</span> trigger_d <span class="keyword">is</span> </span><br><span class="line">  <span class="keyword">begin</span> </span><br><span class="line">  <span class="keyword">process</span>(clk,d,sreset,sset) </span><br><span class="line">    <span class="keyword">begin</span> </span><br><span class="line">      <span class="keyword">if</span> clk<span class="symbol">'event</span> <span class="keyword">and</span> clk=<span class="string">'1'</span> <span class="keyword">then</span> </span><br><span class="line">          <span class="keyword">if</span> sreset=<span class="string">'1'</span> <span class="keyword">then</span> q&lt;=<span class="string">'0'</span>;qb&lt;=<span class="string">'1'</span>; </span><br><span class="line">     <span class="keyword">elsif</span> sset=<span class="string">'1'</span> <span class="keyword">then</span> q&lt;=<span class="string">'1'</span>;qb&lt;=<span class="string">'0'</span>; </span><br><span class="line">              <span class="keyword">else</span> q&lt;=d;qb&lt;=<span class="keyword">not</span>(d); </span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">process</span>; </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">architecture</span> art;</span><br></pre></td></tr></table></figure><p> </p><p>波形图如下：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E3%80%81%E7%BD%AE%E4%BD%8D%E7%9A%84D%E8%A7%A6%E5%8F%91%E5%99%A8%E8%AE%BE%E8%AE%A1/1.png" alt="原始波形图" /></p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E3%80%81%E7%BD%AE%E4%BD%8D%E7%9A%84D%E8%A7%A6%E5%8F%91%E5%99%A8%E8%AE%BE%E8%AE%A1/2.jpg" alt="功能仿真图" /></p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E3%80%81%E7%BD%AE%E4%BD%8D%E7%9A%84D%E8%A7%A6%E5%8F%91%E5%99%A8%E8%AE%BE%E8%AE%A1/3.png" alt="时序仿真图" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VHDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半减器和全减器的设计</title>
      <link href="/2020/01/3067412391.html"/>
      <url>/2020/01/3067412391.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目描述：</p><p>设计一位半减器，然后利用元件方法设计一位全减器</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%8D%8A%E5%87%8F%E5%99%A8%E5%92%8C%E5%85%A8%E5%87%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/1.png" alt="" /></p><a id="more"></a><p> </p><p> </p><p>半减器源代码：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> h_suber <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span> ( x,y:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">diff,s_out:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">architecture</span> one <span class="keyword">of</span> h_suber <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>(x,y)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">diff &lt;= x <span class="keyword">xor</span> y;</span><br><span class="line">s_out &lt;= (<span class="keyword">not</span> x) <span class="keyword">and</span> y;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p> </p><p> </p><p>全减器源代码：</p><blockquote><p>全减器的实现可以调用半减器的代码，所以要将他们放在同一工程文件下</p></blockquote><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> fullsub <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span> (xin,yin,sub_in:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">   diffr,sub_out:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">architecture</span> one <span class="keyword">of</span> fullsub <span class="keyword">is</span></span><br><span class="line"><span class="keyword">component</span> h_suber</span><br><span class="line"><span class="keyword">port</span> (x,y:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">diff,s_out:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">component</span>;</span><br><span class="line"><span class="keyword">signal</span> c,d,e:<span class="built_in">std_logic</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">u1:h_suber <span class="keyword">port</span> <span class="keyword">map</span>(x =&gt; xin,y =&gt; yin,diff =&gt; c,s_out =&gt; d);</span><br><span class="line">u2:h_suber <span class="keyword">port</span> <span class="keyword">map</span>(x =&gt; c,y =&gt; sub_in,diff =&gt; diffr,s_out =&gt; e);</span><br><span class="line">sub_out &lt;= d <span class="keyword">or</span> e;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>波形图如下：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%8D%8A%E5%87%8F%E5%99%A8%E5%92%8C%E5%85%A8%E5%87%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/2.jpg" alt="半减器功能仿真图" /></p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%8D%8A%E5%87%8F%E5%99%A8%E5%92%8C%E5%85%A8%E5%87%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/3.jpg" alt="半减器时序仿真图" /></p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%8D%8A%E5%87%8F%E5%99%A8%E5%92%8C%E5%85%A8%E5%87%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/4.jpg" alt="全减器功能仿真图" /></p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%8D%8A%E5%87%8F%E5%99%A8%E5%92%8C%E5%85%A8%E5%87%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/5.jpg" alt="全减器时许仿真图" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VHDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计带有异步复位的可加减控制的50进制加减计数器</title>
      <link href="/2020/01/2907258679.html"/>
      <url>/2020/01/2907258679.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​    <strong>题目描述：</strong></p><p>​                      <strong>设计带有异步复位的可加减控制的50进制加减计数器</strong></p><a id="more"></a><p><strong>50进制加减计数器源代码：</strong></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_unsigned.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> count_50 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(clk,rd,updown:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">     q:<span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">5</span> <span class="keyword">downto</span> <span class="number">0</span>));</span><br><span class="line"><span class="keyword">end</span> count_50;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> count <span class="keyword">of</span> count_50 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> y:<span class="built_in">std_logic_vector</span>(<span class="number">5</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span> (clk,rd)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> rd = <span class="string">'0'</span></span><br><span class="line">  <span class="keyword">then</span> y &lt;= <span class="string">"000000"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> (clk<span class="symbol">'event</span> <span class="keyword">and</span> clk = <span class="string">'0'</span>)<span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span>(updown = <span class="string">'1'</span>)<span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> y = <span class="string">"110001"</span> <span class="keyword">then</span></span><br><span class="line">         y &lt;= <span class="string">"000000"</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         y &lt;= y+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> y = <span class="string">"000000"</span> <span class="keyword">then</span></span><br><span class="line">         y &lt;= <span class="string">"110001"</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         y &lt;= y-<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line">q &lt;= y;</span><br><span class="line"><span class="keyword">end</span> count;</span><br></pre></td></tr></table></figure><p><strong>波形图如下：</strong></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E8%AE%BE%E8%AE%A1%E5%B8%A6%E6%9C%89%E5%BC%82%E6%AD%A5%E5%A4%8D%E4%BD%8D%E7%9A%84%E5%8F%AF%E5%8A%A0%E5%87%8F%E6%8E%A7%E5%88%B6%E7%9A%8450%E8%BF%9B%E5%88%B6%E5%8A%A0%E5%87%8F%E8%AE%A1%E6%95%B0%E5%99%A8/1.jpg" alt=" 1.原始波形图" /></p><p> </p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E8%AE%BE%E8%AE%A1%E5%B8%A6%E6%9C%89%E5%BC%82%E6%AD%A5%E5%A4%8D%E4%BD%8D%E7%9A%84%E5%8F%AF%E5%8A%A0%E5%87%8F%E6%8E%A7%E5%88%B6%E7%9A%8450%E8%BF%9B%E5%88%B6%E5%8A%A0%E5%87%8F%E8%AE%A1%E6%95%B0%E5%99%A8/2.jpg" alt=" 2.功能仿真图" /></p><p> </p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E8%AE%BE%E8%AE%A1%E5%B8%A6%E6%9C%89%E5%BC%82%E6%AD%A5%E5%A4%8D%E4%BD%8D%E7%9A%84%E5%8F%AF%E5%8A%A0%E5%87%8F%E6%8E%A7%E5%88%B6%E7%9A%8450%E8%BF%9B%E5%88%B6%E5%8A%A0%E5%87%8F%E8%AE%A1%E6%95%B0%E5%99%A8/3.jpg" alt=" 3.时许仿真图" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VHDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this在java中的用法</title>
      <link href="/2020/01/3413548077.html"/>
      <url>/2020/01/3413548077.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="this在java中的用法"><a class="markdownIt-Anchor" href="#this在java中的用法"></a> this在java中的用法</h2><a id="more"></a><h4 id="1使用this关键字引用成员变量"><a class="markdownIt-Anchor" href="#1使用this关键字引用成员变量"></a> 1.使用this关键字引用成员变量</h4><p>作用：解决成员变量与参数或局部变量命名冲突的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2使用this关键字引用成员函数-在方法中引用调用该方法的对象"><a class="markdownIt-Anchor" href="#2使用this关键字引用成员函数-在方法中引用调用该方法的对象"></a> 2.使用this关键字引用成员函数。在方法中引用调用该方法的对象</h4><p>作用：让类中一个方法，访问该类的另一个方法或实例变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"正在执行jump方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">d.jump();</span><br><span class="line">System.out.println(<span class="string">"正在执行run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dog类中run方法调用jump方法一定要通过对象调用，因为jump方法并没有被static修饰。但不必在run()方法中重新定义一个Dog类，因为DogTest类中当程序调用run()方法时，一定会提供一个Dog对象，这样就可以直接使用这个已经存在的Dog对象，而无须创建新的Dog对象。<br />因此通过this关键字就可以在run()方法中调用该方法的对象<br />即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jump();<span class="comment">//Java允许省略this前缀，即可直接写成jump();</span></span><br><span class="line">System.out.println(<span class="string">"正在执行run方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>static修饰的方法中不能使用this引用</strong><br />例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"汪汪汪"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dog();<span class="comment">//报错：Cannot use this in a static context。</span></span><br><span class="line">               <span class="comment">//省略掉this的情况下：同样报错,因为在静态方法中,不能直接访问非静态成员(包括方法和变量)。非静态的变量是依赖于对象存在的,对象必须实例化之后,它的变量才会在内存中存在。 </span></span><br><span class="line">    <span class="comment">//解决办法：法1.将dog()同样设置为静态  法2.先实例化对象,然后使用对象来调用函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3使用this关键字在自身构造方法内部引用其它构造方法"><a class="markdownIt-Anchor" href="#3使用this关键字在自身构造方法内部引用其它构造方法"></a> 3.使用this关键字在自身构造方法内部引用其它构造方法</h4><p>在某个构造方法内使用this(参数列表)，即可跳转到其他构造方法</p><h4 id="4用this关键字代表自身类的对象"><a class="markdownIt-Anchor" href="#4用this关键字代表自身类的对象"></a> 4.用this关键字代表自身类的对象</h4><p>return this 即代表return整个自身类</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>各种数据类型的互相转换（Java实现）</title>
      <link href="/2020/01/1509329140.html"/>
      <url>/2020/01/1509329140.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="stringbuilder转化为string"><a class="markdownIt-Anchor" href="#stringbuilder转化为string"></a> StringBuilder转化为String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder stb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">String str=stb.toString();  <span class="comment">//方法1</span></span><br><span class="line">String str=<span class="string">""</span>+stb;  <span class="comment">//方法2</span></span><br></pre></td></tr></table></figure><h3 id="string转化为stringbuilder"><a class="markdownIt-Anchor" href="#string转化为stringbuilder"></a> String转化为StringBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abcdefghijklmnopqrs"</span>;</span><br><span class="line">StringBuilder stb = <span class="keyword">new</span> StringBuilder(str);</span><br></pre></td></tr></table></figure><h3 id="整型数组转化为字符串"><a class="markdownIt-Anchor" href="#整型数组转化为字符串"></a> 整型数组转化为字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">s.append(String.valueOf(a[i]));</span><br><span class="line">&#125;</span><br><span class="line">String str = <span class="string">""</span>+s;</span><br></pre></td></tr></table></figure><h3 id="字符串转化为整形数组"><a class="markdownIt-Anchor" href="#字符串转化为整形数组"></a> 字符串转化为整形数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">"123456"</span>;</span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[str.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++) &#123;</span><br><span class="line">a[i]  = str.charAt(i)-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h3 id="字符串转化为字符数组"><a class="markdownIt-Anchor" href="#字符串转化为字符数组"></a> 字符串转化为字符数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">"123456"</span>;</span><br><span class="line"><span class="keyword">char</span>[] c = str.toCharArray() ;</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><p>​</p><h3 id="字符数组转化为字符串"><a class="markdownIt-Anchor" href="#字符数组转化为字符串"></a> 字符数组转化为字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] c = &#123;<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'d'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(c);</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure><p>​</p><h3 id="字符数组转化为整型数组"><a class="markdownIt-Anchor" href="#字符数组转化为整型数组"></a> 字符数组转化为整型数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] c = &#123; <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, &#125;;</span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[c.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">a[i] = c[i] - <span class="string">'0'</span>;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h3 id="整型数组转化为字符数组"><a class="markdownIt-Anchor" href="#整型数组转化为字符数组"></a> 整型数组转化为字符数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[a.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">c[i] = (<span class="keyword">char</span>) (a[i]+<span class="string">'0'</span>);</span><br><span class="line">System.out.println(c[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h3 id="整型数转化为字符串"><a class="markdownIt-Anchor" href="#整型数转化为字符串"></a> 整型数转化为字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.String str = Integer.toString(i);</span><br><span class="line"><span class="number">2</span>.String s = String.valueOf(i);</span><br><span class="line"><span class="number">3</span>.String s = <span class="string">""</span> + i;</span><br></pre></td></tr></table></figure><p>​</p><h3 id="字符串转化为整型数"><a class="markdownIt-Anchor" href="#字符串转化为整型数"></a> 字符串转化为整型数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = Integer.valueOf(str).intValue();</span><br></pre></td></tr></table></figure><a id="more"></a><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2020/01/3306641566.html"/>
      <url>/2020/01/3306641566.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="并查集union-find"><a class="markdownIt-Anchor" href="#并查集union-find"></a> 并查集（Union-Find）</h3><p><strong>常用来解决动态连通性问题。</strong></p><blockquote><p>曾有外国网友在StackExchange上发起过投票，选出世界十大有趣算法。“Union-Find算法”以4票的微弱优势战胜排名第二的“KMP算法”，荣登榜首。</p><p><strong>原投票网址</strong>：<a href="https://cstheory.stackexchange.com/questions/189/algorithms-from-the-book" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>投票截止时间：2014年3月7日</p></blockquote><blockquote><p>基本思想：每个集合用一棵树表示。因为同一棵树上的每一个节点都有相同的根，这样就可以用根节点来标识每一棵树，即用代表元来标识每一个集合。我们可以将树存储在数组中。即S[i]=j。代表j为i的父节点。</p></blockquote><hr /><a id="more"></a><p>并查集的基本应用：</p><ol><li>确定元素属于哪个集合</li><li>判断两个元素是否属于同一集合</li><li>合并两元素</li><li>求一个无向图中连通分量的个数</li><li>判断增加一条边后是否会产生环（可用在kruskal算法中）</li></ol><p>生活中的问题：</p><ol><li>朋友圈</li><li>村中的族谱（大伯二婶三叔）</li><li>武林门派</li><li>路由网络</li></ol><hr /><h3 id="初始化的两种方法"><a class="markdownIt-Anchor" href="#初始化的两种方法"></a> 初始化的两种方法：</h3><h5 id="第一种刚开始时每个集合中都只有一个元素每个元素在树中都是根节点-故设si-1"><a class="markdownIt-Anchor" href="#第一种刚开始时每个集合中都只有一个元素每个元素在树中都是根节点-故设si-1"></a> <code>第一种：刚开始时每个集合中都只有一个元素，每个元素在树中都是根节点。故设S[i]=-1；</code></h5><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">j</td><td style="text-align:center">-1</td><td style="text-align:center">-1</td><td style="text-align:center">-1</td><td style="text-align:center">-1</td><td style="text-align:center">-1</td></tr></tbody></table><h5 id="第二种对于每个节点i-他的组号也是i即sii"><a class="markdownIt-Anchor" href="#第二种对于每个节点i-他的组号也是i即sii"></a> <code>第二种：对于每个节点i。他的组号也是i，即S[i]=i</code></h5><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">j</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td></tr></tbody></table><hr /><h3 id="并集的三种方法"><a class="markdownIt-Anchor" href="#并集的三种方法"></a> 并集的三种方法：</h3><p>这里有普通合并和两个启发函数可以选择：</p><h5 id="第一种普通合并使用第12种初始化无脑合并两个元素谁合并到谁都行"><a class="markdownIt-Anchor" href="#第一种普通合并使用第12种初始化无脑合并两个元素谁合并到谁都行"></a> <code>第一种：普通合并（使用第1/2种初始化）：无脑合并，两个元素谁合并到谁都行。</code></h5><h5 id="第二种根据节点数量进行合并使用第1种初始化将节点少的树合并到节点数量多的树中"><a class="markdownIt-Anchor" href="#第二种根据节点数量进行合并使用第1种初始化将节点少的树合并到节点数量多的树中"></a> <code>第二种：根据节点数量进行合并（使用第1种初始化）：将节点少的树合并到节点数量多的树中.</code></h5><h5 id="第三种根据树的高度进行合并使用第2种初始化将高度小的树合并到高度高的树中"><a class="markdownIt-Anchor" href="#第三种根据树的高度进行合并使用第2种初始化将高度小的树合并到高度高的树中"></a> <code>第三种：根据树的高度进行合并（使用第2种初始化）：将高度小的树合并到高度高的树中.</code></h5><blockquote><p>假设初始节点为1，2，3，4，5。合并顺序为：1和2、2和3、4和5</p></blockquote><hr /><h3 id="查集的两种方法"><a class="markdownIt-Anchor" href="#查集的两种方法"></a> 查集的两种方法：</h3><h5 id="第一种前提是用的第1种初始化和能使用第1种初始化方法的合并方法路径压缩"><a class="markdownIt-Anchor" href="#第一种前提是用的第1种初始化和能使用第1种初始化方法的合并方法路径压缩"></a> <code>第一种：（前提是用的第1种初始化和能使用第1种初始化方法的合并方法）（路径压缩）</code></h5><blockquote><p>J为负数时，代表i为根节点。并且j的绝对值代表这棵树中的节点个数。</p><p>J为正数时，代表j是i的父节点</p></blockquote><p>查找x所在的集合</p><p>X=a[x] 直到a[x]小于0（等于-1）</p><p>则这个小于0（等于-1）的a[x]中的x就是目标集合，节点x就是这棵树的根节点</p><ul><li>例：查找元素1所在的集合</li><li>x=a[1]=2&gt;0</li><li>x=a[2]=3&gt;0</li><li>x=a[3]=-3 &lt;0</li><li>即：3为目标集合，3为这棵树的根</li></ul><p>根据合并顺序，结果为</p><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">j</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">-3（-1）</td><td style="text-align:center">5</td><td style="text-align:center">-2（-1）</td></tr></tbody></table><h5 id="第二种前提是用的第2种初始化和能使用第2种初始化方法的合并方法非路径压缩"><a class="markdownIt-Anchor" href="#第二种前提是用的第2种初始化和能使用第2种初始化方法的合并方法非路径压缩"></a> <code>第二种：（前提是用的第2种初始化和能使用第2种初始化方法的合并方法）（非路径压缩）</code></h5><blockquote><p>J的值只能为正数，代表j是i的父节点（i=j时代表i是根节点）</p></blockquote><p>查找x所在的集合</p><p>x=a[x] 直到a[x]等于x为止</p><p>则这个等于a[x]的x就是目标集合，节点x就是这棵树的根节点</p><ul><li>例：查找元素1所在的集合</li><li>a[1]=2!=1</li><li>a[2]=3!=2，</li><li>a[3]=3==3 故3为目标集合, 3为这棵树的根</li></ul><p>根据合并顺序，结果为</p><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">j</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">5</td><td style="text-align:center">5</td></tr></tbody></table><hr /><h3 id="并-查的基本方法与优化"><a class="markdownIt-Anchor" href="#并-查的基本方法与优化"></a> 并、查的基本方法与优化</h3><p>由上述可知，并与查的操作可以有以下4种方式：</p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> <img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.jpg" alt="" /></h2><h3 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h3><p>基于上图四种方式，给出相应的源代码及输入和输出信息。</p><blockquote><p>一、第1种初始化，第1种合并，第1种查询</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">int</span> m,n;     <span class="comment">//分别代表节点数和关系数</span></span><br><span class="line"><span class="keyword">int</span> count;   <span class="comment">//统计集合的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x]==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> Find(father[x]);  <span class="comment">//或者用return father[x]=Find(father[x]);</span></span><br><span class="line">    <span class="comment">//father[t]=Find(father[t]);    //如果用这一句，则报错：Memory Limit Exceeded</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=Find(x);</span><br><span class="line">    y=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y)</span><br><span class="line">    &#123;</span><br><span class="line">        father[x]=y;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input3.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(father, <span class="number">-1</span>, <span class="keyword">sizeof</span>(father));  <span class="comment">//都设置为-1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    count=m;  <span class="comment">//初始时每个节点都代表一个独立的集合。故集合个数等于节点的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        Union(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示之间的关系</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"树状关系如下："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" --&gt; "</span>&lt;&lt;setw(<span class="number">2</span>)&lt;&lt;father[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"集合个数："</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(father[i]==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"根节点"</span>&lt;&lt;i&lt;&lt;<span class="string">"代表一个集合。其中有："</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(Find(j)==i)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>二、第1种初始化，第2种合并，第1种查询</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">int</span> m,n;     <span class="comment">//分别代表节点数和关系数</span></span><br><span class="line"><span class="keyword">int</span> count;   <span class="comment">//统计集合的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x]&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> Find(father[x]);  <span class="comment">//或者用return father[x]=Find(father[x]);</span></span><br><span class="line">    <span class="comment">//father[t]=Find(father[t]);    //如果用这一句，则报错：Memory Limit Exceeded</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=Find(x);</span><br><span class="line">    y=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(father[x]&lt;father[y])</span><br><span class="line">    &#123;</span><br><span class="line">        father[x]+=father[y];</span><br><span class="line">        father[y]=x;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                       <span class="comment">//默认两树中节点相同时，让x并到y上。当然，也可以默认y并到x上</span></span><br><span class="line">    &#123;</span><br><span class="line">        father[y]+=father[x];</span><br><span class="line">        father[x]=y;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input3.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(father, <span class="number">-1</span>, <span class="keyword">sizeof</span>(father));  <span class="comment">//都设置为-1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    count=m;  <span class="comment">//初始时每个节点都代表一个独立的集合。故集合个数等于节点的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        Union(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示之间的关系</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"树状关系如下："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" --&gt; "</span>&lt;&lt;setw(<span class="number">2</span>)&lt;&lt;father[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"集合个数："</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(father[i]&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"根节点"</span>&lt;&lt;i&lt;&lt;<span class="string">"代表一个集合。其中有："</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(Find(j)==i)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>三、第2种初始化，第1种合并，第2种查询</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">int</span> m,n;     <span class="comment">//分别代表节点数和关系数</span></span><br><span class="line"><span class="keyword">int</span> count;   <span class="comment">//统计集合的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==father[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> Find(father[x]);  <span class="comment">//或者用return father[x]=Find(father[x]);</span></span><br><span class="line">    <span class="comment">//father[t]=Find(father[t]);    //如果用这一句，则报错：Memory Limit Exceeded</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=Find(x);</span><br><span class="line">    y=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y)</span><br><span class="line">    &#123;</span><br><span class="line">        father[x]=y;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input3.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    Init();</span><br><span class="line">    count=m;  <span class="comment">//初始时每个节点都代表一个独立的集合。故集合个数等于节点的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        Union(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示之间的关系</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"树状关系如下："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" --&gt; "</span>&lt;&lt;setw(<span class="number">2</span>)&lt;&lt;father[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"集合个数："</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==father[i])</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"根节点"</span>&lt;&lt;i&lt;&lt;<span class="string">"代表一个集合。其中有："</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(Find(j)==i)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>四、第2种初始化，第3种合并，第2种查询</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span>[<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">int</span> m,n;     <span class="comment">//分别代表节点数和关系数</span></span><br><span class="line"><span class="keyword">int</span> count;   <span class="comment">//统计集合的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i]=i;</span><br><span class="line">        <span class="built_in">height</span>[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==father[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> Find(father[x]);  <span class="comment">//或者用return father[x]=Find(father[x]);</span></span><br><span class="line">    <span class="comment">//father[t]=Find(father[t]);    //如果用这一句，则报错：Memory Limit Exceeded</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=Find(x);</span><br><span class="line">    y=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">height</span>[x]==<span class="built_in">height</span>[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">height</span>[x]++;       <span class="comment">//当两棵树一样高的时候，则增加其中一棵的高度</span></span><br><span class="line">        father[x]=y;       <span class="comment">//因为是让x所在的树高度自增的，所以此时x树要比y树高了，所以要把y并到x树上。当然，也可以让y树自增然后把x并到y树上</span></span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">height</span>[x]&lt;<span class="built_in">height</span>[y])</span><br><span class="line">    &#123;</span><br><span class="line">        father[x]=y;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        father[y]=x;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input3.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    Init();</span><br><span class="line">    count=m;  <span class="comment">//初始时每个节点都代表一个独立的集合。故集合个数等于节点的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        Union(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示之间的关系</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"树状关系如下："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" --&gt; "</span>&lt;&lt;setw(<span class="number">2</span>)&lt;&lt;father[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"集合个数："</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==father[i])</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"根节点"</span>&lt;&lt;i&lt;&lt;<span class="string">"代表一个集合。其中有："</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(Find(j)==i)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入：</strong><br /><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%B9%B6%E6%9F%A5%E9%9B%86/2.png" alt="" /></p><p><strong>输出：</strong><br /><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%B9%B6%E6%9F%A5%E9%9B%86/3.png" alt="" /><br /><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%B9%B6%E6%9F%A5%E9%9B%86/4.png" alt="" /><br /><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%B9%B6%E6%9F%A5%E9%9B%86/5.png" alt="" /><br /><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E5%B9%B6%E6%9F%A5%E9%9B%86/6.png" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用----中缀式转化为后缀式(逆波兰)</title>
      <link href="/2020/01/5571.html"/>
      <url>/2020/01/5571.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1、遇到数值： 直接输出</p><p>2、遇到左括号：将左括号入栈</p><p>3、遇到右括号：将栈中的运算符依次出栈并输出， 直到第一次遇到左括号（该左括号出栈但不输出）。至此消除表达式中的一对括号</p><p>4、遇到四则运算符：栈中所有优先级大于或等于该四则运算符的运算符依次出栈并输出，然后将该运算符入栈</p><p>5、字符串遍历结束后如果栈不为空，则依次将操作符弹出并输出</p><p> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> is_Operand    str[i]&gt;=<span class="meta-string">'0'</span>&amp;&amp;str[i]<span class="meta-string">&lt;='9' || str[i]&gt;='a'&amp;&amp;str[i]&lt;='z' || str[i]&gt;='A'&amp;&amp;str[i]&lt;='Z'         //判断是否为操作数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> is_Operator   str[i]==<span class="meta-string">'+'</span> || str[i]==<span class="meta-string">'-'</span> || str[i]==<span class="meta-string">'*'</span> || str[i]==<span class="meta-string">'/'</span> || str[i]==<span class="meta-string">'%'</span> || str[i]==<span class="meta-string">'@'</span>   <span class="comment">//判断是否为运算符</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;     <span class="comment">//中序输入串</span></span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">100</span>]; <span class="comment">//后序逆波兰式</span></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;        <span class="comment">//后序逆波兰式的有效长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="keyword">char</span>&gt; s; <span class="comment">//用栈来临时存储转化过程中的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">///用一个map来存储运算符优先级</span></span><br><span class="line">    <span class="comment">//下标为字符，很有意思</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; p;</span><br><span class="line">    p[<span class="string">'+'</span>] = p[<span class="string">'-'</span>] = <span class="number">1</span>;</span><br><span class="line">p[<span class="string">'*'</span>] = p[<span class="string">'/'</span>] = p[<span class="string">'%'</span>] = <span class="number">2</span>;</span><br><span class="line">p[<span class="string">'@'</span>] = <span class="number">3</span>;                  <span class="comment">//取反操作，单目运算。优先级最高</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;str[i]!=<span class="string">'\0'</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">///首先略过空格</span></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        <span class="comment">///遇到左括号</span></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'('</span>)</span><br><span class="line">            s.push(str[i]);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        <span class="comment">///遇到右括号</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">')'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; s.top()!=<span class="string">'('</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">///遇到操作数。支持多位整型数以及多位字符变量</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(is_Operand)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str[i];</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">int</span> res=str[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理多位的情况</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; str.length() &amp;&amp; is_Operand)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">i--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">///遇到运算符</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(is_Operator)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">while</span> (!s.empty() &amp;&amp; p[s.top()]&gt;=p[str[i]])</span><br><span class="line">            &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">s.push(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">         <span class="comment">///遇到非法符号</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"存在非法符号"</span>;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">///输出剩余的操作符</span></span><br><span class="line">    <span class="keyword">while</span>(!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"b.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line"></span><br><span class="line">    change();  <span class="comment">//将中缀式转化为后缀式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><p> </p><ul><li><p><strong>输入文件</strong></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E4%B8%AD%E7%BC%80%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%90%8E%E7%BC%80%E5%BC%8F%EF%BC%88%E9%80%86%E6%B3%A2%E5%85%B0%EF%BC%89/1.jpg" alt="" /></p></li><li><p><strong>输出结果</strong></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E4%B8%AD%E7%BC%80%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%90%8E%E7%BC%80%E5%BC%8F%EF%BC%88%E9%80%86%E6%B3%A2%E5%85%B0%EF%BC%89/2.jpg" alt="" /></p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用----表达式求值</title>
      <link href="/2020/01/1456670943.html"/>
      <url>/2020/01/1456670943.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>多位操作数的版本</p><p>请参考：<a href="https://blog.csdn.net/coder_dacyuan/article/details/79941743" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/coder_dacyuan/article/details/79941743</a></p></blockquote><h4 id="一-中缀式转化为后缀式用到一个char型栈和一个数组"><a class="markdownIt-Anchor" href="#一-中缀式转化为后缀式用到一个char型栈和一个数组"></a> 一、中缀式转化为后缀式：（用到一个char型栈和一个数组）</h4><p>1、遇到数值： 直接存到数组</p><p>2、遇到左括号：将左括号入栈</p><p>3、遇到右括号：将栈中的运算符依次出栈并存到数组， 直到第一次遇到左括号（该左括号出栈但不存到数组）。至此消除表达式中的一对括号</p><p>4、遇到四则运算符：栈中所有优先级大于或等于该四则运算符的运算符依次出栈并存到数组，然后将该运算符入栈</p><p>5、字符串遍历结束后如果栈不为空，则依次将操作符弹出并存到数组</p><h4 id="二-后缀式求值用到刚得到的那个数组和一个int型栈"><a class="markdownIt-Anchor" href="#二-后缀式求值用到刚得到的那个数组和一个int型栈"></a> 二、后缀式求值：（用到刚得到的那个数组和一个int型栈）</h4><p>从左到右扫描后缀表达式数组</p><p>1、若是操作数，就压栈</p><p>2、若是操作符，就连续弹出两个操组数。（先弹出的是第一操作数，后弹出的是第二操作数）</p><p>3、栈顶的值即为所需结果</p><a id="more"></a><h4 id="三-代码"><a class="markdownIt-Anchor" href="#三-代码"></a> 三、代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;     <span class="comment">//中序输入串</span></span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">100</span>]; <span class="comment">//后序逆波兰式</span></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;        <span class="comment">//后序逆波兰式的有效长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="keyword">char</span>&gt; s; <span class="comment">//用栈来临时存储转化过程中的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">///用一个map来存储运算符优先级</span></span><br><span class="line">    <span class="comment">//下标为字符，很有意思</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; p;</span><br><span class="line">    p[<span class="string">'+'</span>] = p[<span class="string">'-'</span>] = <span class="number">1</span>;</span><br><span class="line">p[<span class="string">'*'</span>] = p[<span class="string">'/'</span>] = p[<span class="string">'%'</span>] = <span class="number">2</span>;</span><br><span class="line">p[<span class="string">'@'</span>] = <span class="number">3</span>;                  <span class="comment">//取反操作，单目运算。优先级最高</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;str[i]!=<span class="string">'\0'</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">///首先略过空格</span></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">///遇到左括号</span></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'('</span>)</span><br><span class="line">            s.push(str[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">///遇到右括号</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">')'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; s.top()!=<span class="string">'('</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp[t++]=s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">///遇到操作数。只支持一位整型数或一位字符变量</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span> || str[i]&gt;=<span class="string">'a'</span>&amp;&amp;str[i]&lt;=<span class="string">'z'</span> || str[i]&gt;=<span class="string">'A'</span>&amp;&amp;str[i]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[t++]=str[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">///遇到运算符</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">'+'</span> || str[i]==<span class="string">'-'</span> || str[i]==<span class="string">'*'</span> || str[i]==<span class="string">'/'</span> || str[i]==<span class="string">'%'</span> || str[i]==<span class="string">'@'</span>)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">while</span> (!s.empty() &amp;&amp; p[s.top()]&gt;=p[str[i]])</span><br><span class="line">            &#123;</span><br><span class="line">temp[t++]=s.top();</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">s.push(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">///遇到非法符号</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"存在非法符号"</span>;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">///输出剩余的操作符</span></span><br><span class="line">    <span class="keyword">while</span>(!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        temp[t++]=s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出得到的后序逆波兰式</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"逆波兰式："</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp[i]&gt;=<span class="string">'0'</span> &amp;&amp; temp[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"入栈:"</span>&lt;&lt;temp[i]&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            s.push(temp[i]-<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp[i]==<span class="string">'@'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a=s.top();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"出栈:"</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"入栈:"</span>&lt;&lt;-a&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            s.push(-a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a=s.top();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"出栈:"</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">int</span> b=s.top();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"出栈:"</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            s.pop();</span><br><span class="line"></span><br><span class="line">            <span class="comment">///注意：a是右边的操作数，b是左边的操作数</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"入栈:"</span>&lt;&lt;b&lt;&lt;temp[i]&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp[i]==<span class="string">'+'</span>)</span><br><span class="line">                s.push(b+a);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[i]==<span class="string">'-'</span>)</span><br><span class="line">                s.push(b-a);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[i]==<span class="string">'*'</span>)</span><br><span class="line">                s.push(b*a);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[i]==<span class="string">'/'</span>)</span><br><span class="line">                s.push(b/a);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[i]==<span class="string">'%'</span>)</span><br><span class="line">                s.push(b%a);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"符号出现错误"</span>;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"表达式结果："</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"a.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line"></span><br><span class="line">    change();      <span class="comment">//中缀式转化为后缀式</span></span><br><span class="line"></span><br><span class="line">    calculate();   <span class="comment">//后缀式求值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><p> </p><ul><li><p><strong>输入文件</strong></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/1.jpg" alt="" /></p></li><li><p><strong>输出结果</strong></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/2.jpg" alt="" /></p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用----符号匹配</title>
      <link href="/2020/01/749982807.html"/>
      <url>/2020/01/749982807.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>哨兵。这个哨兵非常有用，专门针对因左右符号个数不同而引起的不匹配<br />在没有哨兵的情况下：<br />1、如果左括号多于右括号，则for循环结束后栈中仍有符号，不为空，程序会给出已匹配的结果。但实质上这是不匹配的。<br />如果用上这个#，则判断循环结束后栈顶元素是否为#就可以，如果是#，说明真的已经完全匹配；如果不是#，则肯定是错的<br />2、如果右括号多于左括号。则在for循环程序中会直接崩溃，因为命名栈已经空了，却还要再取栈顶元素去判断，显然是无法取得，会使程序崩溃<br />如果用上这个#，则当取到#时，实质上就已经不匹配了，因为至少少一个左括号。在程序流程中也不会崩溃，因为当取到得是#时，&quot;if&quot;和&quot;else if&quot;语句都不满足，直接掉到&quot;else&quot;语句中，给出不匹配的说明，然后退出程序</p><a id="more"></a>       <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    s.push(<span class="string">'#'</span>);   <span class="comment">//哨兵</span></span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'('</span>||str[i]==<span class="string">'&#123;'</span>||str[i]==<span class="string">'['</span>)</span><br><span class="line">            s.push(str[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((str[i]==<span class="string">')'</span>&amp;&amp;s.top()==<span class="string">'('</span>)||(str[i]==<span class="string">']'</span>&amp;&amp;s.top()==<span class="string">'['</span>)|(str[i]==<span class="string">'&#125;'</span>&amp;&amp;s.top()==<span class="string">'&#123;'</span>))</span><br><span class="line">            s.pop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这个else if是用来支持  “hello(((&#123;as&#125;)))world”  这种测试样例的</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        else if(str[i]!='(' &amp;&amp; str[i]!='[' &amp;&amp; str[i]!='&#123;' &amp;&amp; str[i]!=')' &amp;&amp; str[i]!=']' &amp;&amp; str[i]!='&#125;')</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            continue;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.top()==<span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("c.txt","r",stdin);</span></span><br><span class="line"></span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isValid</span>())</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"成功"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"失败"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用----任意进制数相互转换</title>
      <link href="/2020/01/3392767553.html"/>
      <url>/2020/01/3392767553.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8----%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/1.jpg" alt="" /></p><p> </p><p> <a id="more"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="comment">///将十进制转化为其他进制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">D_to</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据边处理边压栈</span></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p=x%m;</span><br><span class="line">        s.push(p);</span><br><span class="line">        x/=m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边判断边出栈</span></span><br><span class="line">    <span class="keyword">while</span>(!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.top()&gt;=<span class="number">10</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(s.top()+<span class="number">55</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="comment">///将其他进制转化为十进制</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">to_D</span><span class="params">(<span class="keyword">int</span> n,<span class="built_in">string</span> y)</span>  </span></span><br><span class="line"><span class="function"> <span class="comment">//需要让原数据在确定是其他进制转10进制后再输入，因为在这种情况下，原数据不一定是整型数，所以，为了适用于所有情况，要设原数据为char[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  up[<span class="number">26</span>]=&#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> low[<span class="number">26</span>]=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout&lt;&lt;"截止到"&lt;&lt;up[n-10-1]&lt;&lt;endl;     //因为超过10的进制，允许使用的字母个数不相同。不能只判断到“F”，那只是16进制的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先把数据压进栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;y.length();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">///这里千万当心：要分成n&lt;10和n&gt;=10的情况来做。如果不这样做，则错误例子为“n=4,m=5,y=666”和“n=18,m=7,y=GA980H17CB”.</span></span><br><span class="line">                                                                       <span class="comment">///对于第一个例子，可以用“&amp;&amp; y[i]&lt;(n+'0')”解决，因为n=4，是一个字符。但这种方法解决不了第二个反例，因为n=18，是两个字符，加上'0'没有实际意义</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y[i]&lt;(n+<span class="string">'0'</span>))</span><br><span class="line">                s.push(y[i]-<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入错误"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//遇到非法或超出范围的字符</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y[i]&gt;=<span class="string">'0'</span> &amp;&amp; y[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                s.push(y[i]-<span class="string">'0'</span>);       <span class="comment">//将数字字符转化为整型</span></span><br><span class="line">      <span class="comment">//要使用“&amp;&amp; y[i]&lt;=low[n-10-1]”，而非简单的“&amp;&amp; y[i]&lt;=‘F’”</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(y[i]&gt;=<span class="string">'a'</span> &amp;&amp; y[i]&lt;=low[n<span class="number">-10</span><span class="number">-1</span>])         </span><br><span class="line">                s.push(y[i]<span class="number">-87</span>);        <span class="comment">//将大写字母转化为整型</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(y[i]&gt;=<span class="string">'A'</span> &amp;&amp; y[i]&lt;=up[n<span class="number">-10</span><span class="number">-1</span>])</span><br><span class="line">                s.push(y[i]<span class="number">-55</span>);        <span class="comment">//将小写字母转化为整型</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入错误"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//遇到非法或超出范围的字符</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边计算，边出栈</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=s.top()*<span class="built_in">pow</span>(n,i);</span><br><span class="line">        i++;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> n;             <span class="comment">//n为原始数据的进制</span></span><br><span class="line">    <span class="keyword">int</span> m;             <span class="comment">//m为目标数据的进制</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x;       <span class="comment">//x为原始数据（十进制整数）</span></span><br><span class="line">    <span class="built_in">string</span> y;          <span class="comment">//y为原始数据（不确定进制的字符串表示的数）</span></span><br><span class="line">    <span class="built_in">string</span> z;          <span class="comment">//z为原始数据（不确定进制的字符串表示的数）</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入原始数据的进制:"</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入目标数据的进制:"</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">if</span>(n==m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"【不用算了，还是本身】"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span> || m==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"【无法计算】"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">10</span> &amp;&amp; m!=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入原始数据:"</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            D_to(m,x);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">10</span> &amp;&amp; n!=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入原始数据:"</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;y;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;to_D(n,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n!=<span class="number">10</span> &amp;&amp; m!=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入原始数据:"</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;z;</span><br><span class="line"></span><br><span class="line">            <span class="comment">///先把原始数据转成十进制，再把十进制转化为目标进制数</span></span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> temp=to_D(n,z);</span><br><span class="line">            D_to(m,temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><p> </p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8----%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/2.jpg" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+PicGo图床使用</title>
      <link href="/2020/01/2450786063.html"/>
      <url>/2020/01/2450786063.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>…</p><a id="more"></a><h2 id="一-七牛云"><a class="markdownIt-Anchor" href="#一-七牛云"></a> 一、七牛云</h2><p>最开始尝试的是七牛云，毕竟比较有名，上传效果很好，外链也没有问题。</p><p>但部署完成后打开博客发现图片加载失败，F12检查后发现“no such domain”的问题。</p><p>查阅官方文档后发现了“测试域名”和“自定义域名”的坑。即测试域名只允许用30天，到期自动回收，而后需要用一个已经备案的域名来绑定此域名。。。</p><p>虽然没有解决我当前的问题，但当前的发现让我对七牛云好感度-1000</p><blockquote><p>见：<a href="https://developer.qiniu.com/kodo/kb/5443/no-to-domain-related-issues" target="_blank" rel="noopener external nofollow noreferrer">https://developer.qiniu.com/kodo/kb/5443/no-to-domain-related-issues</a></p></blockquote><p>纠结一段时间之后我只好放弃七牛云，寻找其他的图床服务。</p><p>知乎上有一个总结，感觉写的很好。</p><blockquote><p>文末有总结：</p><p><strong>如果打算长期稳定使用请优先选择又拍云或者七牛云，如果是存储并不重要的图片可以使用免费不限大小的SM.MS图床。</strong></p><p>见：<a href="https://zhuanlan.zhihu.com/p/35270383" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/35270383</a></p><p>令见：<a href="https://www.bilibili.com/video/av31103221/" target="_blank" rel="noopener external nofollow noreferrer">https://www.bilibili.com/video/av31103221/</a></p></blockquote><hr /><hr /><h2 id="二-smms"><a class="markdownIt-Anchor" href="#二-smms"></a> 二、<a href="http://SM.MS" target="_blank" rel="noopener external nofollow noreferrer">SM.MS</a></h2><p><a href="http://SM.MS" target="_blank" rel="noopener external nofollow noreferrer">SM.MS</a>，无需注册、实名认证（七牛云需要），上传非常便捷，支持批量上传，但最多10个，上传后即刻给出该图片外链。**同样支持给出markdown链接。**确实很不错。</p><p>但过于简洁，不用登录注册，不用绑定任何东西。反倒让我有点担心它的稳定性，万一图片丢了，找都没处去找。。。emmm，就当作一个备用的吧。</p><p>再继续找，找到了这个PicGo，一个图床管理工具，顺着PicGo我找到了Github作为图床这一方案。Github，对啊，我直接就确认了这种方案。虽然有人说Github图片国内访问会慢一些，但是它肯定能保证数据的稳定性啊。并且我的博客就是基于github的，这也算是落叶归根吧！好了，就这个了！</p><hr /><hr /><h2 id="三-githubpicgo"><a class="markdownIt-Anchor" href="#三-githubpicgo"></a> 三、Github+PicGo</h2><h4 id="1-新建仓库设为public"><a class="markdownIt-Anchor" href="#1-新建仓库设为public"></a> 1、新建仓库，设为public</h4><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/1.jpg" alt="" /></p><p> </p><p>  </p><p>  </p><h4 id="2-获取授权token"><a class="markdownIt-Anchor" href="#2-获取授权token"></a> 2、获取授权token</h4><p>Github首页 -&gt; Setting -&gt; Developer settings -&gt;  Personal access tokens -&gt; Generate new token -&gt; 确认</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/2.jpg" alt="" /></p><p>按此步骤即可生成token如下，该序列只显示一次，忘记只能重新生成。复制下来保存</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/3.jpg" alt="" /></p><p> </p><p> </p><p> </p><h4 id="3-下载picgo客户端"><a class="markdownIt-Anchor" href="#3-下载picgo客户端"></a> 3、下载PicGo客户端</h4><blockquote><p>官网（特别慢）：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Molunerfinn/PicGo/releases</a></p><p>版本2.2.1（蓝奏云下载）：<a href="https://www.lanzous.com/i8rh45g" target="_blank" rel="noopener external nofollow noreferrer">https://www.lanzous.com/i8rh45g</a></p></blockquote><p> </p><p> </p><p> </p><h4 id="4-安装后配置"><a class="markdownIt-Anchor" href="#4-安装后配置"></a> 4、安装后配置</h4><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/4.jpg" alt="" /></p><ul><li><p>1： [github用户名]/[仓库名]</p></li><li><p>2：master</p></li><li><p>3：自己的token序列</p></li><li><p>4：/img （代表图片将上传到仓库下的img文件夹）</p></li><li><p>5：<a href="https://raw.githubusercontent.com/%5Bgithub%E7%94%A8%E6%88%B7%E5%90%8D%5D/%5B%E4%BB%93%E5%BA%93%E5%90%8D%5D/master" target="_blank" rel="noopener external nofollow noreferrer">https://raw.githubusercontent.com/[github用户名]/[仓库名]/master</a></p><p>设为默认图床后点击确定</p></li></ul><p> </p><p> </p><p> </p><h4 id="5-在上传区上传图片"><a class="markdownIt-Anchor" href="#5-在上传区上传图片"></a> 5、在上传区上传图片</h4><p>拖拽上传，也可以剪切板上传，当使用快捷键截屏后再使用Ctrl+Shift+P 自动上传</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/5.jpg" alt="" /></p><p> </p><p> </p><p> </p><h4 id="6-上传成功后在相册查看同时github中也会有相应的相册"><a class="markdownIt-Anchor" href="#6-上传成功后在相册查看同时github中也会有相应的相册"></a> 6、上传成功后在相册查看，同时，github中也会有相应的相册</h4><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/6.jpg" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/7.jpg" alt="" /></p><p> </p><p> </p><p> </p><h4 id="7-点击复制markdown链接也可以批量复制"><a class="markdownIt-Anchor" href="#7-点击复制markdown链接也可以批量复制"></a> 7、点击复制markdown链接，也可以批量复制</h4><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/8.jpg" alt="" /></p><p> </p><p> </p><p> </p><h4 id="8-把链接复制到md文章中"><a class="markdownIt-Anchor" href="#8-把链接复制到md文章中"></a> 8、把链接复制到md文章中</h4><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/9.jpg" alt="" /></p><blockquote><p><em>注意：图片命名最好不要有汉字或中文字符</em></p></blockquote><p> </p><p> </p><p> </p><h4 id="9-部署后浏览器访问-成功"><a class="markdownIt-Anchor" href="#9-部署后浏览器访问-成功"></a> 9、部署后浏览器访问。成功</h4><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/han-suyu/Pic/master/Github+PicGo%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/10.jpg" alt="" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改pip的默认安装packages包的路径</title>
      <link href="/2020/01/2802770012.html"/>
      <url>/2020/01/2802770012.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在python安装路径下的Lib文件夹中找到site.py文件。</p><p>修改USER_SITE = “D:\python\Lib\site-packages” （pip下载的包的存储位置）<br />USER_BASE = “D:\python\Scripts”</p><a id="more"></a><p>测试：在cmd中使用 python -m site  命令。如果显示的路径正确，并且显示“exist”，则成功</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Experience </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final关键字作用总结</title>
      <link href="/2019/02/34213.html"/>
      <url>/2019/02/34213.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>相信对于final的用法，大多数人都可以随口说出以下三句话，但重点是第三句话，到底是什么不可变？</p><ol><li><p>被final修饰的类不可以被继承</p></li><li><p>被final修饰的方法不可以被重写</p></li><li><p><strong>被final修饰的变量不可以被改变</strong>（对于数组，也有相同的规定）</p><blockquote><p>被final修饰不可变的是变量的<code>引用</code>，而不是引用指向的<code>内容</code>，引用指向的对象的内容是可以改变的</p><p>分两种情况：</p><ul><li><p>如果final修饰的变量是<code>基本数据类型</code>，则其数值一旦在初始化之后便不能更改。</p></li><li><p>如果final修饰的变量是<code>引用类型</code>(比如String)，则不能变更指向，去指向其他对象，但现在指向的对象它本身的内容是可以更改的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">已知：同一对象的hashCode值相同</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> StringBuilder ans = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(ans);              <span class="comment">//输出：hello</span></span><br><span class="line">        System.out.println(ans.hashCode());   <span class="comment">//输出：856419764</span></span><br><span class="line">        ans.append(<span class="string">"world"</span>);</span><br><span class="line">        System.out.println(ans);              <span class="comment">//输出：helloworld</span></span><br><span class="line">        System.out.println(ans.hashCode());   <span class="comment">//输出：856419764</span></span><br><span class="line">以上说明：哈希值没有变，即变量的引用(对象)没有变，但对象的内容改变了。</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> StringBuilder tem = <span class="keyword">new</span> StringBuilder(<span class="string">"hi"</span>);</span><br><span class="line">        ans=tem;  <span class="comment">//错误：ans原来指向“856419764” ， 不能更换 去为指向tem的哈希值</span></span><br><span class="line">以上说明：已经初始化好的引用类型的变量，不能再让它指向另一个对象</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ol><a id="more"></a><h6 id="final和const的异同"><a class="markdownIt-Anchor" href="#final和const的异同"></a> final和const的异同：</h6><ul><li><p>相同点：修饰的变量不可以被改变</p></li><li><p>不同点：对于const，只能在定义的时候对变量进行初始化；而final没有这个要求。</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>static关键字作用总结</title>
      <link href="/2019/02/1657983556.html"/>
      <url>/2019/02/1657983556.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>static关键字最基本的用法是：</p><p>1、被static修饰的变量属于类变量，可以通过<strong>类名.变量名</strong>直接引用，而不需要new出一个类来</p><p>2、被static修饰的方法属于类方法，可以通过<strong>类名.方法名</strong>直接引用，而不需要new出一个类来</p><a id="more"></a><p>被static修饰的变量、被static修饰的方法统一属于类的<strong>静态资源，是同类型类实例之间共享的，换言之，一处变、处处变</strong>。JDK把不同的静态资源放在了不同的类中而不把所有静态资源放在一个类里面，很多人可能想当然认为当然要这么做，但是是否想过为什么要这么做呢？个人认为主要有三个好处：</p><p>1、不同的类有自己的静态资源，这可以实现静态资源分类。比如和数学相关的静态资源放在java.lang.Math中，和日历相关的静态资源放在java.util.Calendar中，这样就很清晰了</p><p>2、避免重名。不同的类之间有重名的静态变量名、静态方法名也是很正常的，如果所有的都放在一起不可避免的一个问题就是名字重复，这时候怎么办？分类放置就好了。</p><p>3、避免静态资源类无限膨胀，这很好理解。</p><p>OK，再微微深入一下，也是有些人容易混淆的一个问题：静态方法能不能引用非静态资源？静态方法里面能不能引用静态资源？非静态方法里面能不能引用静态资源？比如就以这段代码为例，是否有错？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">2 </span>&#123;</span><br><span class="line"><span class="number">3</span>     <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="number">4</span>     </span><br><span class="line"><span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">6     </span>&#123;</span><br><span class="line"><span class="number">7</span>         i = <span class="number">1</span>;</span><br><span class="line"><span class="number">8</span>     &#125;</span><br><span class="line"><span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure><p>当然有错，在第7行的地方。不妨这么思考这个问题：</p><p>静态资源属于类，但是是独立于类存在的。从JVM的类加载机制的角度讲，<strong>静态资源是类初始化的时候加载的，而非静态资源是类new的时候加载的</strong>。类的初始化早于类的new，比如Class.forName(“xxx”)方法，就是初始化了一个类，但是并没有new它，只是加载这个类的静态资源罢了。所以对于静态资源来说，它是不可能知道一个类中有哪些非静态资源的；但是对于非静态资源来说就不一样了，由于它是new出来之后产生的，因此属于类的这些东西它都能认识。所以上面的几个问题答案就很明确了：</p><p>1、静态方法能不能引用非静态资源？不能，new的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它。</p><p>2、静态方法里面能不能引用静态资源？可以，因为都是类初始化的时候加载的，大家相互都认识。</p><p>3、非静态方法里面能不能引用静态资源？可以，非静态方法就是实例方法，那是new之后才产生的，那么属于类的内容它都认识。</p><p><strong>静态块</strong></p><p>静态块也是static的重要应用之一。也是用于初始化一个类的时候做操作用的，和静态变量、静态方法一样，<strong>静态块里面的代码只执行一次，且只在初始化类的时候执行</strong>。静态块很简单，不过提三个小细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"> 2 </span>&#123;</span><br><span class="line"> <span class="number">3</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = B();</span><br><span class="line"> <span class="number">4</span>     </span><br><span class="line"> <span class="number">5</span>     <span class="keyword">static</span></span><br><span class="line"> <span class="number">6</span>     &#123;</span><br><span class="line"> <span class="number">7</span>         System.out.println(<span class="string">"Enter A.static block"</span>);</span><br><span class="line"> <span class="number">8</span>     &#125;</span><br><span class="line"> <span class="number">9</span>     </span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">11     </span>&#123;</span><br><span class="line"><span class="number">12</span>         <span class="keyword">new</span> A();</span><br><span class="line"><span class="number">13</span>     &#125;</span><br><span class="line"><span class="number">14</span>     </span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">B</span><span class="params">()</span></span></span><br><span class="line"><span class="function">16     </span>&#123;</span><br><span class="line"><span class="number">17</span>         System.out.println(<span class="string">"Enter A.B()"</span>);</span><br><span class="line"><span class="number">18</span>         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="number">19</span>     &#125;</span><br><span class="line"><span class="number">20</span> &#125;</span><br></pre></td></tr></table></figure><p>打印结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter A.B()</span><br><span class="line">Enter A.static block</span><br></pre></td></tr></table></figure><p>得出第一个结论：<strong>静态资源的加载顺序是严格按照静态资源的定义顺序来加载的</strong>。这和周志明老师《深入理解Java虚拟机：JVM高级特性与最佳实践》中类初始化中的说法“<strong>()方法是由编译器自动收集类中所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的</strong>”是一致的。</p><p>再看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"> 2 </span>&#123;</span><br><span class="line"> <span class="number">3</span>     <span class="keyword">static</span></span><br><span class="line"> <span class="number">4</span>     &#123;</span><br><span class="line"> <span class="number">5</span>         c = <span class="number">3</span>;</span><br><span class="line"> <span class="number">6</span>         System.out.println(c);</span><br><span class="line"> <span class="number">7</span>     &#125;</span><br><span class="line"> <span class="number">8</span>     </span><br><span class="line"> <span class="number">9</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> c;</span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><p>这段代码的第6行是有错误的“Cannot reference a field before it is defined”。从这个例子得出第二个结论：<strong>静态代码块对于定义在它之后的静态变量，可以赋值，但是不能访问</strong>。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/swisszhang/p/9892992.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/swisszhang/p/9892992.html</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
